<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="simcad.xsl"?>
<SimCad version="SimCad 2.2">
<DetectionTimeStamp>2013-11-19 13:08:53.25</DetectionTimeStamp>
<SearchInput>n/a</SearchInput>
<SearchTarget>input/postgresql/</SearchTarget>
<SourceFragmentType>function</SourceFragmentType>
<SourceTransformation>generous</SourceTransformation>
<CloneType>Type-1, Type-2, Type-3</CloneType>
<CloneGroupingType>group</CloneGroupingType>
<SourceFragmentTotal>262</SourceFragmentTotal>
<CloneFragmentTotal>151</CloneFragmentTotal>
<CloneSetTotal>23</CloneSetTotal>
<Clones fragmentType="function" cloneSetType="group" nfragments="151" ngroups="23">
<CloneGroup groupid="1" nfragments="55" type="Type-3">
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="239" endline="259" pcid="50"><![CDATA[
static void _outPlannedStmt (StringInfo str, PlannedStmt *node) {
    WRITE_NODE_TYPE ("PLANNEDSTMT");
    WRITE_ENUM_FIELD (commandType, CmdType);
    WRITE_BOOL_FIELD (canSetTag);
    WRITE_BOOL_FIELD (transientPlan);
    WRITE_NODE_FIELD (planTree);
    WRITE_NODE_FIELD (rtable);
    WRITE_NODE_FIELD (resultRelations);
    WRITE_NODE_FIELD (utilityStmt);
    WRITE_NODE_FIELD (intoClause);
    WRITE_NODE_FIELD (subplans);
    WRITE_BITMAPSET_FIELD (rewindPlanIDs);
    WRITE_NODE_FIELD (returningLists);
    WRITE_NODE_FIELD (rowMarks);
    WRITE_NODE_FIELD (relationOids);
    WRITE_NODE_FIELD (invalItems);
    WRITE_INT_FIELD (nParamExec);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="944" endline="954" pcid="92"><![CDATA[
static void _outSubLink (StringInfo str, SubLink *node) {
    WRITE_NODE_TYPE ("SUBLINK");
    WRITE_ENUM_FIELD (subLinkType, SubLinkType);
    WRITE_NODE_FIELD (testexpr);
    WRITE_NODE_FIELD (operName);
    WRITE_NODE_FIELD (subselect);
    WRITE_LOCATION_FIELD (location);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1110" endline="1120" pcid="105"><![CDATA[
static void _outRowCompareExpr (StringInfo str, RowCompareExpr *node) {
    WRITE_NODE_TYPE ("ROWCOMPARE");
    WRITE_ENUM_FIELD (rctype, RowCompareType);
    WRITE_NODE_FIELD (opnos);
    WRITE_NODE_FIELD (opfamilies);
    WRITE_NODE_FIELD (largs);
    WRITE_NODE_FIELD (rargs);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1055" endline="1065" pcid="100"><![CDATA[
static void _outCaseExpr (StringInfo str, CaseExpr *node) {
    WRITE_NODE_TYPE ("CASE");
    WRITE_OID_FIELD (casetype);
    WRITE_NODE_FIELD (arg);
    WRITE_NODE_FIELD (args);
    WRITE_NODE_FIELD (defresult);
    WRITE_LOCATION_FIELD (location);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="2013" endline="2025" pcid="165"><![CDATA[
static void _outSetOperationStmt (StringInfo str, SetOperationStmt *node) {
    WRITE_NODE_TYPE ("SETOPERATIONSTMT");
    WRITE_ENUM_FIELD (op, SetOperation);
    WRITE_BOOL_FIELD (all);
    WRITE_NODE_FIELD (larg);
    WRITE_NODE_FIELD (rarg);
    WRITE_NODE_FIELD (colTypes);
    WRITE_NODE_FIELD (colTypmods);
    WRITE_NODE_FIELD (groupClauses);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1711" endline="1723" pcid="146"><![CDATA[
static void _outCreateStmt (StringInfo str, CreateStmt *node) {
    WRITE_NODE_TYPE ("CREATESTMT");
    WRITE_NODE_FIELD (relation);
    WRITE_NODE_FIELD (tableElts);
    WRITE_NODE_FIELD (inhRelations);
    WRITE_NODE_FIELD (constraints);
    WRITE_NODE_FIELD (options);
    WRITE_ENUM_FIELD (oncommit, OnCommitAction);
    WRITE_STRING_FIELD (tablespacename);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="852" endline="864" pcid="86"><![CDATA[
static void _outArrayRef (StringInfo str, ArrayRef *node) {
    WRITE_NODE_TYPE ("ARRAYREF");
    WRITE_OID_FIELD (refarraytype);
    WRITE_OID_FIELD (refelemtype);
    WRITE_INT_FIELD (reftypmod);
    WRITE_NODE_FIELD (refupperindexpr);
    WRITE_NODE_FIELD (reflowerindexpr);
    WRITE_NODE_FIELD (refexpr);
    WRITE_NODE_FIELD (refassgnexpr);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1961" endline="1973" pcid="161"><![CDATA[
static void _outWindowClause (StringInfo str, WindowClause *node) {
    WRITE_NODE_TYPE ("WINDOWCLAUSE");
    WRITE_STRING_FIELD (name);
    WRITE_STRING_FIELD (refname);
    WRITE_NODE_FIELD (partitionClause);
    WRITE_NODE_FIELD (orderClause);
    WRITE_INT_FIELD (frameOptions);
    WRITE_UINT_FIELD (winref);
    WRITE_BOOL_FIELD (copiedOrder);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1254" endline="1267" pcid="117"><![CDATA[
static void _outJoinExpr (StringInfo str, JoinExpr *node) {
    WRITE_NODE_TYPE ("JOINEXPR");
    WRITE_ENUM_FIELD (jointype, JoinType);
    WRITE_BOOL_FIELD (isNatural);
    WRITE_NODE_FIELD (larg);
    WRITE_NODE_FIELD (rarg);
    WRITE_NODE_FIELD (using);
    WRITE_NODE_FIELD (quals);
    WRITE_NODE_FIELD (alias);
    WRITE_INT_FIELD (rtindex);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1541" endline="1556" pcid="135"><![CDATA[
static void _outIndexOptInfo (StringInfo str, IndexOptInfo *node) {
    WRITE_NODE_TYPE ("INDEXOPTINFO");
    WRITE_OID_FIELD (indexoid);
    WRITE_UINT_FIELD (pages);
    WRITE_FLOAT_FIELD (tuples, "%.0f");
    WRITE_INT_FIELD (ncolumns);
    WRITE_NODE_FIELD (indexprs);
    WRITE_NODE_FIELD (indpred);
    WRITE_BOOL_FIELD (predOK);
    WRITE_BOOL_FIELD (unique);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1841" endline="1854" pcid="155"><![CDATA[
static void _outColumnDef (StringInfo str, ColumnDef *node) {
    WRITE_NODE_TYPE ("COLUMNDEF");
    WRITE_STRING_FIELD (colname);
    WRITE_NODE_FIELD (typename);
    WRITE_INT_FIELD (inhcount);
    WRITE_BOOL_FIELD (is_local);
    WRITE_BOOL_FIELD (is_not_null);
    WRITE_NODE_FIELD (raw_default);
    WRITE_NODE_FIELD (cooked_default);
    WRITE_NODE_FIELD (constraints);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1997" endline="2011" pcid="164"><![CDATA[
static void _outCommonTableExpr (StringInfo str, CommonTableExpr *node) {
    WRITE_NODE_TYPE ("COMMONTABLEEXPR");
    WRITE_STRING_FIELD (ctename);
    WRITE_NODE_FIELD (aliascolnames);
    WRITE_NODE_FIELD (ctequery);
    WRITE_LOCATION_FIELD (location);
    WRITE_BOOL_FIELD (cterecursive);
    WRITE_INT_FIELD (cterefcount);
    WRITE_NODE_FIELD (ctecolnames);
    WRITE_NODE_FIELD (ctecoltypes);
    WRITE_NODE_FIELD (ctecoltypmods);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1456" endline="1471" pcid="132"><![CDATA[
static void _outPlannerGlobal (StringInfo str, PlannerGlobal *node) {
    WRITE_NODE_TYPE ("PLANNERGLOBAL");
    WRITE_NODE_FIELD (paramlist);
    WRITE_NODE_FIELD (subplans);
    WRITE_NODE_FIELD (subrtables);
    WRITE_BITMAPSET_FIELD (rewindPlanIDs);
    WRITE_NODE_FIELD (finalrtable);
    WRITE_NODE_FIELD (relationOids);
    WRITE_NODE_FIELD (invalItems);
    WRITE_UINT_FIELD (lastPHId);
    WRITE_BOOL_FIELD (transientPlan);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1725" endline="1741" pcid="147"><![CDATA[
static void _outIndexStmt (StringInfo str, IndexStmt *node) {
    WRITE_NODE_TYPE ("INDEXSTMT");
    WRITE_STRING_FIELD (idxname);
    WRITE_NODE_FIELD (relation);
    WRITE_STRING_FIELD (accessMethod);
    WRITE_STRING_FIELD (tableSpace);
    WRITE_NODE_FIELD (indexParams);
    WRITE_NODE_FIELD (options);
    WRITE_NODE_FIELD (whereClause);
    WRITE_BOOL_FIELD (unique);
    WRITE_BOOL_FIELD (primary);
    WRITE_BOOL_FIELD (isconstraint);
    WRITE_BOOL_FIELD (concurrent);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="956" endline="975" pcid="93"><![CDATA[
static void _outSubPlan (StringInfo str, SubPlan *node) {
    WRITE_NODE_TYPE ("SUBPLAN");
    WRITE_ENUM_FIELD (subLinkType, SubLinkType);
    WRITE_NODE_FIELD (testexpr);
    WRITE_NODE_FIELD (paramIds);
    WRITE_INT_FIELD (plan_id);
    WRITE_STRING_FIELD (plan_name);
    WRITE_OID_FIELD (firstColType);
    WRITE_INT_FIELD (firstColTypmod);
    WRITE_BOOL_FIELD (useHashTable);
    WRITE_BOOL_FIELD (unknownEqFalse);
    WRITE_NODE_FIELD (setParam);
    WRITE_NODE_FIELD (parParam);
    WRITE_NODE_FIELD (args);
    WRITE_FLOAT_FIELD (startup_cost, "%.2f");
    WRITE_FLOAT_FIELD (per_call_cost, "%.2f");
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1761" endline="1784" pcid="149"><![CDATA[
static void _outSelectStmt (StringInfo str, SelectStmt *node) {
    WRITE_NODE_TYPE ("SELECT");
    WRITE_NODE_FIELD (distinctClause);
    WRITE_NODE_FIELD (intoClause);
    WRITE_NODE_FIELD (targetList);
    WRITE_NODE_FIELD (fromClause);
    WRITE_NODE_FIELD (whereClause);
    WRITE_NODE_FIELD (groupClause);
    WRITE_NODE_FIELD (havingClause);
    WRITE_NODE_FIELD (windowClause);
    WRITE_NODE_FIELD (withClause);
    WRITE_NODE_FIELD (valuesLists);
    WRITE_NODE_FIELD (sortClause);
    WRITE_NODE_FIELD (limitOffset);
    WRITE_NODE_FIELD (limitCount);
    WRITE_NODE_FIELD (lockingClause);
    WRITE_ENUM_FIELD (op, SetOperation);
    WRITE_BOOL_FIELD (all);
    WRITE_NODE_FIELD (larg);
    WRITE_NODE_FIELD (rarg);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1510" endline="1539" pcid="134"><![CDATA[
static void _outRelOptInfo (StringInfo str, RelOptInfo *node) {
    WRITE_NODE_TYPE ("RELOPTINFO");
    WRITE_ENUM_FIELD (reloptkind, RelOptKind);
    WRITE_BITMAPSET_FIELD (relids);
    WRITE_FLOAT_FIELD (rows, "%.0f");
    WRITE_INT_FIELD (width);
    WRITE_NODE_FIELD (reltargetlist);
    WRITE_NODE_FIELD (pathlist);
    WRITE_NODE_FIELD (cheapest_startup_path);
    WRITE_NODE_FIELD (cheapest_total_path);
    WRITE_NODE_FIELD (cheapest_unique_path);
    WRITE_UINT_FIELD (relid);
    WRITE_ENUM_FIELD (rtekind, RTEKind);
    WRITE_INT_FIELD (min_attr);
    WRITE_INT_FIELD (max_attr);
    WRITE_NODE_FIELD (indexlist);
    WRITE_UINT_FIELD (pages);
    WRITE_FLOAT_FIELD (tuples, "%.0f");
    WRITE_NODE_FIELD (subplan);
    WRITE_NODE_FIELD (subrtable);
    WRITE_NODE_FIELD (baserestrictinfo);
    WRITE_NODE_FIELD (joininfo);
    WRITE_BOOL_FIELD (has_eclass_joins);
    WRITE_BITMAPSET_FIELD (index_outer_relids);
    WRITE_NODE_FIELD (index_inner_paths);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1473" endline="1508" pcid="133"><![CDATA[
static void _outPlannerInfo (StringInfo str, PlannerInfo *node) {
    WRITE_NODE_TYPE ("PLANNERINFO");
    WRITE_NODE_FIELD (parse);
    WRITE_NODE_FIELD (glob);
    WRITE_UINT_FIELD (query_level);
    WRITE_NODE_FIELD (join_rel_list);
    WRITE_NODE_FIELD (resultRelations);
    WRITE_NODE_FIELD (returningLists);
    WRITE_NODE_FIELD (init_plans);
    WRITE_NODE_FIELD (cte_plan_ids);
    WRITE_NODE_FIELD (eq_classes);
    WRITE_NODE_FIELD (canon_pathkeys);
    WRITE_NODE_FIELD (left_join_clauses);
    WRITE_NODE_FIELD (right_join_clauses);
    WRITE_NODE_FIELD (full_join_clauses);
    WRITE_NODE_FIELD (join_info_list);
    WRITE_NODE_FIELD (append_rel_list);
    WRITE_NODE_FIELD (placeholder_list);
    WRITE_NODE_FIELD (query_pathkeys);
    WRITE_NODE_FIELD (group_pathkeys);
    WRITE_NODE_FIELD (window_pathkeys);
    WRITE_NODE_FIELD (distinct_pathkeys);
    WRITE_NODE_FIELD (sort_pathkeys);
    WRITE_FLOAT_FIELD (total_table_pages, "%.0f");
    WRITE_FLOAT_FIELD (tuple_fraction, "%.4f");
    WRITE_BOOL_FIELD (hasInheritedTarget);
    WRITE_BOOL_FIELD (hasJoinRTEs);
    WRITE_BOOL_FIELD (hasHavingQual);
    WRITE_BOOL_FIELD (hasPseudoConstantQuals);
    WRITE_BOOL_FIELD (hasRecursion);
    WRITE_INT_FIELD (wt_param_id);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1594" endline="1603" pcid="138"><![CDATA[
static void _outPathKey (StringInfo str, PathKey *node) {
    WRITE_NODE_TYPE ("PATHKEY");
    WRITE_NODE_FIELD (pk_eclass);
    WRITE_OID_FIELD (pk_opfamily);
    WRITE_INT_FIELD (pk_strategy);
    WRITE_BOOL_FIELD (pk_nulls_first);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="996" endline="1005" pcid="95"><![CDATA[
static void _outFieldStore (StringInfo str, FieldStore *node) {
    WRITE_NODE_TYPE ("FIELDSTORE");
    WRITE_NODE_FIELD (arg);
    WRITE_NODE_FIELD (newvals);
    WRITE_NODE_FIELD (fieldnums);
    WRITE_OID_FIELD (resulttype);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="448" endline="459" pcid="63"><![CDATA[
static void _outFunctionScan (StringInfo str, FunctionScan *node) {
    WRITE_NODE_TYPE ("FUNCTIONSCAN");
    _outScanInfo (str, (Scan *) node);
    WRITE_NODE_FIELD (funcexpr);
    WRITE_NODE_FIELD (funccolnames);
    WRITE_NODE_FIELD (funccoltypes);
    WRITE_NODE_FIELD (funccoltypmods);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="2253" endline="2264" pcid="177"><![CDATA[
static void _outWindowDef (StringInfo str, WindowDef *node) {
    WRITE_NODE_TYPE ("WINDOWDEF");
    WRITE_STRING_FIELD (name);
    WRITE_STRING_FIELD (refname);
    WRITE_NODE_FIELD (partitionClause);
    WRITE_NODE_FIELD (orderClause);
    WRITE_INT_FIELD (frameOptions);
    WRITE_LOCATION_FIELD (location);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1232" endline="1244" pcid="116"><![CDATA[
static void _outTargetEntry (StringInfo str, TargetEntry *node) {
    WRITE_NODE_TYPE ("TARGETENTRY");
    WRITE_NODE_FIELD (expr);
    WRITE_INT_FIELD (resno);
    WRITE_STRING_FIELD (resname);
    WRITE_UINT_FIELD (ressortgroupref);
    WRITE_OID_FIELD (resorigtbl);
    WRITE_INT_FIELD (resorigcol);
    WRITE_BOOL_FIELD (resjunk);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1856" endline="1869" pcid="156"><![CDATA[
static void _outTypeName (StringInfo str, TypeName *node) {
    WRITE_NODE_TYPE ("TYPENAME");
    WRITE_NODE_FIELD (names);
    WRITE_OID_FIELD (typeid);
    WRITE_BOOL_FIELD (setof);
    WRITE_BOOL_FIELD (pct_type);
    WRITE_NODE_FIELD (typmods);
    WRITE_INT_FIELD (typemod);
    WRITE_NODE_FIELD (arrayBounds);
    WRITE_LOCATION_FIELD (location);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1871" endline="1879" pcid="157"><![CDATA[
static void _outTypeCast (StringInfo str, TypeCast *node) {
    WRITE_NODE_TYPE ("TYPECAST");
    WRITE_NODE_FIELD (arg);
    WRITE_NODE_FIELD (typename);
    WRITE_LOCATION_FIELD (location);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="766" endline="776" pcid="80"><![CDATA[
static void _outIntoClause (StringInfo str, IntoClause *node) {
    WRITE_NODE_TYPE ("INTOCLAUSE");
    WRITE_NODE_FIELD (rel);
    WRITE_NODE_FIELD (colNames);
    WRITE_NODE_FIELD (options);
    WRITE_ENUM_FIELD (onCommit, OnCommitAction);
    WRITE_STRING_FIELD (tableSpaceName);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1030" endline="1042" pcid="98"><![CDATA[
static void _outArrayCoerceExpr (StringInfo str, ArrayCoerceExpr *node) {
    WRITE_NODE_TYPE ("ARRAYCOERCEEXPR");
    WRITE_NODE_FIELD (arg);
    WRITE_OID_FIELD (elemfuncid);
    WRITE_OID_FIELD (resulttype);
    WRITE_INT_FIELD (resulttypmod);
    WRITE_BOOL_FIELD (isExplicit);
    WRITE_ENUM_FIELD (coerceformat, CoercionForm);
    WRITE_LOCATION_FIELD (location);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="740" endline="747" pcid="78"><![CDATA[
static void _outAlias (StringInfo str, Alias *node) {
    WRITE_NODE_TYPE ("ALIAS");
    WRITE_STRING_FIELD (aliasname);
    WRITE_NODE_FIELD (colnames);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="985" endline="994" pcid="94"><![CDATA[
static void _outFieldSelect (StringInfo str, FieldSelect *node) {
    WRITE_NODE_TYPE ("FIELDSELECT");
    WRITE_NODE_FIELD (arg);
    WRITE_INT_FIELD (fieldnum);
    WRITE_OID_FIELD (resulttype);
    WRITE_INT_FIELD (resulttypmod);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="2230" endline="2239" pcid="175"><![CDATA[
static void _outResTarget (StringInfo str, ResTarget *node) {
    WRITE_NODE_TYPE ("RESTARGET");
    WRITE_STRING_FIELD (name);
    WRITE_NODE_FIELD (indirection);
    WRITE_NODE_FIELD (val);
    WRITE_LOCATION_FIELD (location);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="749" endline="764" pcid="79"><![CDATA[
static void _outRangeVar (StringInfo str, RangeVar *node) {
    WRITE_NODE_TYPE ("RANGEVAR");
    WRITE_STRING_FIELD (schemaname);
    WRITE_STRING_FIELD (relname);
    WRITE_ENUM_FIELD (inhOpt, InhOption);
    WRITE_BOOL_FIELD (istemp);
    WRITE_NODE_FIELD (alias);
    WRITE_LOCATION_FIELD (location);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="838" endline="850" pcid="85"><![CDATA[
static void _outWindowFunc (StringInfo str, WindowFunc *node) {
    WRITE_NODE_TYPE ("WINDOWFUNC");
    WRITE_OID_FIELD (winfnoid);
    WRITE_OID_FIELD (wintype);
    WRITE_NODE_FIELD (args);
    WRITE_UINT_FIELD (winref);
    WRITE_BOOL_FIELD (winstar);
    WRITE_BOOL_FIELD (winagg);
    WRITE_LOCATION_FIELD (location);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1086" endline="1096" pcid="103"><![CDATA[
static void _outArrayExpr (StringInfo str, ArrayExpr *node) {
    WRITE_NODE_TYPE ("ARRAY");
    WRITE_OID_FIELD (array_typeid);
    WRITE_OID_FIELD (element_typeid);
    WRITE_NODE_FIELD (elements);
    WRITE_BOOL_FIELD (multidims);
    WRITE_LOCATION_FIELD (location);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="892" endline="903" pcid="89"><![CDATA[
static void _outDistinctExpr (StringInfo str, DistinctExpr *node) {
    WRITE_NODE_TYPE ("DISTINCTEXPR");
    WRITE_OID_FIELD (opno);
    WRITE_OID_FIELD (opfuncid);
    WRITE_OID_FIELD (opresulttype);
    WRITE_BOOL_FIELD (opretset);
    WRITE_NODE_FIELD (args);
    WRITE_LOCATION_FIELD (location);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1655" endline="1668" pcid="142"><![CDATA[
static void _outSpecialJoinInfo (StringInfo str, SpecialJoinInfo *node) {
    WRITE_NODE_TYPE ("SPECIALJOININFO");
    WRITE_BITMAPSET_FIELD (min_lefthand);
    WRITE_BITMAPSET_FIELD (min_righthand);
    WRITE_BITMAPSET_FIELD (syn_lefthand);
    WRITE_BITMAPSET_FIELD (syn_righthand);
    WRITE_ENUM_FIELD (jointype, JoinType);
    WRITE_BOOL_FIELD (lhs_strict);
    WRITE_BOOL_FIELD (delay_upper_joins);
    WRITE_NODE_FIELD (join_quals);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1143" endline="1157" pcid="108"><![CDATA[
static void _outXmlExpr (StringInfo str, XmlExpr *node) {
    WRITE_NODE_TYPE ("XMLEXPR");
    WRITE_ENUM_FIELD (op, XmlExprOp);
    WRITE_STRING_FIELD (name);
    WRITE_NODE_FIELD (named_args);
    WRITE_NODE_FIELD (arg_names);
    WRITE_NODE_FIELD (args);
    WRITE_ENUM_FIELD (xmloption, XmlOptionType);
    WRITE_OID_FIELD (type);
    WRITE_INT_FIELD (typmod);
    WRITE_LOCATION_FIELD (location);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="2331" endline="2346" pcid="181"><![CDATA[
static void _outFkConstraint (StringInfo str, FkConstraint *node) {
    WRITE_NODE_TYPE ("FKCONSTRAINT");
    WRITE_STRING_FIELD (constr_name);
    WRITE_NODE_FIELD (pktable);
    WRITE_NODE_FIELD (fk_attrs);
    WRITE_NODE_FIELD (pk_attrs);
    WRITE_CHAR_FIELD (fk_matchtype);
    WRITE_CHAR_FIELD (fk_upd_action);
    WRITE_CHAR_FIELD (fk_del_action);
    WRITE_BOOL_FIELD (deferrable);
    WRITE_BOOL_FIELD (initdeferred);
    WRITE_BOOL_FIELD (skip_validation);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="905" endline="915" pcid="90"><![CDATA[
static void _outScalarArrayOpExpr (StringInfo str, ScalarArrayOpExpr *node) {
    WRITE_NODE_TYPE ("SCALARARRAYOPEXPR");
    WRITE_OID_FIELD (opno);
    WRITE_OID_FIELD (opfuncid);
    WRITE_BOOL_FIELD (useOr);
    WRITE_NODE_FIELD (args);
    WRITE_LOCATION_FIELD (location);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="824" endline="836" pcid="84"><![CDATA[
static void _outAggref (StringInfo str, Aggref *node) {
    WRITE_NODE_TYPE ("AGGREF");
    WRITE_OID_FIELD (aggfnoid);
    WRITE_OID_FIELD (aggtype);
    WRITE_NODE_FIELD (args);
    WRITE_UINT_FIELD (agglevelsup);
    WRITE_BOOL_FIELD (aggstar);
    WRITE_BOOL_FIELD (aggdistinct);
    WRITE_LOCATION_FIELD (location);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1605" endline="1632" pcid="139"><![CDATA[
static void _outRestrictInfo (StringInfo str, RestrictInfo *node) {
    WRITE_NODE_TYPE ("RESTRICTINFO");
    WRITE_NODE_FIELD (clause);
    WRITE_BOOL_FIELD (is_pushed_down);
    WRITE_BOOL_FIELD (outerjoin_delayed);
    WRITE_BOOL_FIELD (can_join);
    WRITE_BOOL_FIELD (pseudoconstant);
    WRITE_BITMAPSET_FIELD (clause_relids);
    WRITE_BITMAPSET_FIELD (required_relids);
    WRITE_BITMAPSET_FIELD (nullable_relids);
    WRITE_BITMAPSET_FIELD (left_relids);
    WRITE_BITMAPSET_FIELD (right_relids);
    WRITE_NODE_FIELD (orclause);
    WRITE_FLOAT_FIELD (norm_selec, "%.4f");
    WRITE_FLOAT_FIELD (outer_selec, "%.4f");
    WRITE_NODE_FIELD (mergeopfamilies);
    WRITE_NODE_FIELD (left_em);
    WRITE_NODE_FIELD (right_em);
    WRITE_BOOL_FIELD (outer_is_left);
    WRITE_OID_FIELD (hashjoinoperator);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1786" endline="1798" pcid="150"><![CDATA[
static void _outFuncCall (StringInfo str, FuncCall *node) {
    WRITE_NODE_TYPE ("FUNCCALL");
    WRITE_NODE_FIELD (funcname);
    WRITE_NODE_FIELD (args);
    WRITE_BOOL_FIELD (agg_star);
    WRITE_BOOL_FIELD (agg_distinct);
    WRITE_BOOL_FIELD (func_variadic);
    WRITE_NODE_FIELD (over);
    WRITE_LOCATION_FIELD (location);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="264" endline="278" pcid="51"><![CDATA[
static void _outPlanInfo (StringInfo str, Plan *node) {
    WRITE_FLOAT_FIELD (startup_cost, "%.2f");
    WRITE_FLOAT_FIELD (total_cost, "%.2f");
    WRITE_FLOAT_FIELD (plan_rows, "%.0f");
    WRITE_INT_FIELD (plan_width);
    WRITE_NODE_FIELD (targetlist);
    WRITE_NODE_FIELD (qual);
    WRITE_NODE_FIELD (lefttree);
    WRITE_NODE_FIELD (righttree);
    WRITE_NODE_FIELD (initPlan);
    WRITE_BITMAPSET_FIELD (extParam);
    WRITE_BITMAPSET_FIELD (allParam);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1558" endline="1580" pcid="136"><![CDATA[
static void _outEquivalenceClass (StringInfo str, EquivalenceClass *node) {
    while (node->ec_merged)
        node = node->ec_merged;
    WRITE_NODE_TYPE ("EQUIVALENCECLASS");
    WRITE_NODE_FIELD (ec_opfamilies);
    WRITE_NODE_FIELD (ec_members);
    WRITE_NODE_FIELD (ec_sources);
    WRITE_NODE_FIELD (ec_derives);
    WRITE_BITMAPSET_FIELD (ec_relids);
    WRITE_BOOL_FIELD (ec_has_const);
    WRITE_BOOL_FIELD (ec_has_volatile);
    WRITE_BOOL_FIELD (ec_below_outer_join);
    WRITE_BOOL_FIELD (ec_broken);
    WRITE_UINT_FIELD (ec_sortref);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1634" endline="1642" pcid="140"><![CDATA[
static void _outInnerIndexscanInfo (StringInfo str, InnerIndexscanInfo *node) {
    WRITE_NODE_TYPE ("INNERINDEXSCANINFO");
    WRITE_BITMAPSET_FIELD (other_relids);
    WRITE_BOOL_FIELD (isouterjoin);
    WRITE_NODE_FIELD (cheapest_startup_innerpath);
    WRITE_NODE_FIELD (cheapest_total_innerpath);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1893" endline="1948" pcid="159"><![CDATA[
static void _outQuery (StringInfo str, Query *node) {
    WRITE_NODE_TYPE ("QUERY");
    WRITE_ENUM_FIELD (commandType, CmdType);
    WRITE_ENUM_FIELD (querySource, QuerySource);
    WRITE_BOOL_FIELD (canSetTag);
    if (node->utilityStmt) {
        switch (nodeTag (node->utilityStmt)) {
        case T_CreateStmt :
        case T_IndexStmt :
        case T_NotifyStmt :
        case T_DeclareCursorStmt :
            WRITE_NODE_FIELD (utilityStmt);
            break;
        default :
            appendStringInfo (str, " :utilityStmt ?");
            break;
        }
    }
    else
        appendStringInfo (str, " :utilityStmt <>");
    WRITE_INT_FIELD (resultRelation);
    WRITE_NODE_FIELD (intoClause);
    WRITE_BOOL_FIELD (hasAggs);
    WRITE_BOOL_FIELD (hasWindowFuncs);
    WRITE_BOOL_FIELD (hasSubLinks);
    WRITE_BOOL_FIELD (hasDistinctOn);
    WRITE_BOOL_FIELD (hasRecursive);
    WRITE_NODE_FIELD (cteList);
    WRITE_NODE_FIELD (rtable);
    WRITE_NODE_FIELD (jointree);
    WRITE_NODE_FIELD (targetList);
    WRITE_NODE_FIELD (returningList);
    WRITE_NODE_FIELD (groupClause);
    WRITE_NODE_FIELD (havingQual);
    WRITE_NODE_FIELD (windowClause);
    WRITE_NODE_FIELD (distinctClause);
    WRITE_NODE_FIELD (sortClause);
    WRITE_NODE_FIELD (limitOffset);
    WRITE_NODE_FIELD (limitCount);
    WRITE_NODE_FIELD (rowMarks);
    WRITE_NODE_FIELD (setOperations);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="2027" endline="2076" pcid="166"><![CDATA[
static void _outRangeTblEntry (StringInfo str, RangeTblEntry *node) {
    WRITE_NODE_TYPE ("RTE");
    WRITE_NODE_FIELD (alias);
    WRITE_NODE_FIELD (eref);
    WRITE_ENUM_FIELD (rtekind, RTEKind);
    switch (node->rtekind) {
    case RTE_RELATION :
    case RTE_SPECIAL :
        WRITE_OID_FIELD (relid);
        break;
    case RTE_SUBQUERY :
        WRITE_NODE_FIELD (subquery);
        break;
    case RTE_JOIN :
        WRITE_ENUM_FIELD (jointype, JoinType);
        WRITE_NODE_FIELD (joinaliasvars);
        break;
    case RTE_FUNCTION :
        WRITE_NODE_FIELD (funcexpr);
        WRITE_NODE_FIELD (funccoltypes);
        WRITE_NODE_FIELD (funccoltypmods);
        break;
    case RTE_VALUES :
        WRITE_NODE_FIELD (values_lists);
        break;
    case RTE_CTE :
        WRITE_STRING_FIELD (ctename);
        WRITE_UINT_FIELD (ctelevelsup);
        WRITE_BOOL_FIELD (self_reference);
        WRITE_NODE_FIELD (ctecoltypes);
        WRITE_NODE_FIELD (ctecoltypmods);
        break;
    default :
        elog (ERROR, "unrecognized RTE kind: %d", (int) node->rtekind);
        break;
    }
    WRITE_BOOL_FIELD (inh);
    WRITE_BOOL_FIELD (inFromCl);
    WRITE_UINT_FIELD (requiredPerms);
    WRITE_OID_FIELD (checkAsUser);
    WRITE_BITMAPSET_FIELD (selectedCols);
    WRITE_BITMAPSET_FIELD (modifiedCols);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="879" endline="890" pcid="88"><![CDATA[
static void _outOpExpr (StringInfo str, OpExpr *node) {
    WRITE_NODE_TYPE ("OPEXPR");
    WRITE_OID_FIELD (opno);
    WRITE_OID_FIELD (opfuncid);
    WRITE_OID_FIELD (opresulttype);
    WRITE_BOOL_FIELD (opretset);
    WRITE_NODE_FIELD (args);
    WRITE_LOCATION_FIELD (location);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1098" endline="1108" pcid="104"><![CDATA[
static void _outRowExpr (StringInfo str, RowExpr *node) {
    WRITE_NODE_TYPE ("ROW");
    WRITE_NODE_FIELD (args);
    WRITE_OID_FIELD (row_typeid);
    WRITE_ENUM_FIELD (row_format, CoercionForm);
    WRITE_NODE_FIELD (colnames);
    WRITE_LOCATION_FIELD (location);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1582" endline="1592" pcid="137"><![CDATA[
static void _outEquivalenceMember (StringInfo str, EquivalenceMember *node) {
    WRITE_NODE_TYPE ("EQUIVALENCEMEMBER");
    WRITE_NODE_FIELD (em_expr);
    WRITE_BITMAPSET_FIELD (em_relids);
    WRITE_BOOL_FIELD (em_is_const);
    WRITE_BOOL_FIELD (em_is_child);
    WRITE_OID_FIELD (em_datatype);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1670" endline="1681" pcid="143"><![CDATA[
static void _outAppendRelInfo (StringInfo str, AppendRelInfo *node) {
    WRITE_NODE_TYPE ("APPENDRELINFO");
    WRITE_UINT_FIELD (parent_relid);
    WRITE_UINT_FIELD (child_relid);
    WRITE_OID_FIELD (parent_reltype);
    WRITE_OID_FIELD (child_reltype);
    WRITE_NODE_FIELD (translated_vars);
    WRITE_OID_FIELD (parent_reloid);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="793" endline="810" pcid="82"><![CDATA[
static void _outConst (StringInfo str, Const *node) {
    WRITE_NODE_TYPE ("CONST");
    WRITE_OID_FIELD (consttype);
    WRITE_INT_FIELD (consttypmod);
    WRITE_INT_FIELD (constlen);
    WRITE_BOOL_FIELD (constbyval);
    WRITE_BOOL_FIELD (constisnull);
    WRITE_LOCATION_FIELD (location);
    appendStringInfo (str, " :constvalue ");
    if (node->constisnull)
        appendStringInfo (str, "<>");
    else
        _outDatum (str, node->constvalue, node->constlen, node->constbyval);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1159" endline="1170" pcid="109"><![CDATA[
static void _outNullIfExpr (StringInfo str, NullIfExpr *node) {
    WRITE_NODE_TYPE ("NULLIFEXPR");
    WRITE_OID_FIELD (opno);
    WRITE_OID_FIELD (opfuncid);
    WRITE_OID_FIELD (opresulttype);
    WRITE_BOOL_FIELD (opretset);
    WRITE_NODE_FIELD (args);
    WRITE_LOCATION_FIELD (location);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1987" endline="1995" pcid="163"><![CDATA[
static void _outWithClause (StringInfo str, WithClause *node) {
    WRITE_NODE_TYPE ("WITHCLAUSE");
    WRITE_NODE_FIELD (ctes);
    WRITE_BOOL_FIELD (recursive);
    WRITE_LOCATION_FIELD (location);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1683" endline="1694" pcid="144"><![CDATA[
static void _outPlaceHolderInfo (StringInfo str, PlaceHolderInfo *node) {
    WRITE_NODE_TYPE ("PLACEHOLDERINFO");
    WRITE_UINT_FIELD (phid);
    WRITE_NODE_FIELD (ph_var);
    WRITE_BITMAPSET_FIELD (ph_eval_at);
    WRITE_BITMAPSET_FIELD (ph_needed);
    WRITE_BITMAPSET_FIELD (ph_may_need);
    WRITE_INT_FIELD (ph_width);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="778" endline="791" pcid="81"><![CDATA[
static void _outVar (StringInfo str, Var *node) {
    WRITE_NODE_TYPE ("VAR");
    WRITE_UINT_FIELD (varno);
    WRITE_INT_FIELD (varattno);
    WRITE_OID_FIELD (vartype);
    WRITE_INT_FIELD (vartypmod);
    WRITE_UINT_FIELD (varlevelsup);
    WRITE_UINT_FIELD (varnoold);
    WRITE_INT_FIELD (varoattno);
    WRITE_LOCATION_FIELD (location);
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="2" nfragments="2" type="Type-3">
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="312" endline="320" pcid="53"><![CDATA[
static void _outResult (StringInfo str, Result *node) {
    WRITE_NODE_TYPE ("RESULT");
    _outPlanInfo (str, (Plan *) node);
    WRITE_NODE_FIELD (resconstantqual);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="437" endline="446" pcid="62"><![CDATA[
static void _outSubqueryScan (StringInfo str, SubqueryScan *node) {
    WRITE_NODE_TYPE ("SUBQUERYSCAN");
    _outScanInfo (str, (Scan *) node);
    WRITE_NODE_FIELD (subplan);
    WRITE_NODE_FIELD (subrtable);
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="3" nfragments="4" type="Type-3">
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="356" endline="364" pcid="56"><![CDATA[
static void _outBitmapAnd (StringInfo str, BitmapAnd *node) {
    WRITE_NODE_TYPE ("BITMAPAND");
    _outPlanInfo (str, (Plan *) node);
    WRITE_NODE_FIELD (bitmapplans);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="535" endline="543" pcid="68"><![CDATA[
static void _outHashJoin (StringInfo str, HashJoin *node) {
    WRITE_NODE_TYPE ("HASHJOIN");
    _outJoinPlanInfo (str, (Join *) node);
    WRITE_NODE_FIELD (hashclauses);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="427" endline="435" pcid="61"><![CDATA[
static void _outTidScan (StringInfo str, TidScan *node) {
    WRITE_NODE_TYPE ("TIDSCAN");
    _outScanInfo (str, (Scan *) node);
    WRITE_NODE_FIELD (tidquals);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1371" endline="1379" pcid="125"><![CDATA[
static void _outTidPath (StringInfo str, TidPath *node) {
    WRITE_NODE_TYPE ("TIDPATH");
    _outPathInfo (str, (Path *) node);
    WRITE_NODE_FIELD (tidquals);
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="4" nfragments="3" type="Type-3">
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="601" endline="619" pcid="71"><![CDATA[
static void _outGroup (StringInfo str, Group *node) {
    int i;
    WRITE_NODE_TYPE ("GROUP");
    _outPlanInfo (str, (Plan *) node);
    WRITE_INT_FIELD (numCols);
    appendStringInfo (str, " :grpColIdx");
    for (i = 0; i < node->numCols; i++)
        appendStringInfo (str, " %d", node->grpColIdx[i]);
    appendStringInfo (str, " :grpOperators");
    for (i = 0; i < node->numCols; i++)
        appendStringInfo (str, " %u", node->grpOperators[i]);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="653" endline="671" pcid="73"><![CDATA[
static void _outUnique (StringInfo str, Unique *node) {
    int i;
    WRITE_NODE_TYPE ("UNIQUE");
    _outPlanInfo (str, (Plan *) node);
    WRITE_INT_FIELD (numCols);
    appendStringInfo (str, " :uniqColIdx");
    for (i = 0; i < node->numCols; i++)
        appendStringInfo (str, " %d", node->uniqColIdx[i]);
    appendStringInfo (str, " :uniqOperators");
    for (i = 0; i < node->numCols; i++)
        appendStringInfo (str, " %u", node->uniqOperators[i]);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="629" endline="651" pcid="72"><![CDATA[
static void _outSort (StringInfo str, Sort *node) {
    int i;
    WRITE_NODE_TYPE ("SORT");
    _outPlanInfo (str, (Plan *) node);
    WRITE_INT_FIELD (numCols);
    appendStringInfo (str, " :sortColIdx");
    for (i = 0; i < node->numCols; i++)
        appendStringInfo (str, " %d", node->sortColIdx[i]);
    appendStringInfo (str, " :sortOperators");
    for (i = 0; i < node->numCols; i++)
        appendStringInfo (str, " %u", node->sortOperators[i]);
    appendStringInfo (str, " :nullsFirst");
    for (i = 0; i < node->numCols; i++)
        appendStringInfo (str, " %s", booltostr (node->nullsFirst[i]));
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="5" nfragments="2" type="Type-3">
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="812" endline="822" pcid="83"><![CDATA[
static void _outParam (StringInfo str, Param *node) {
    WRITE_NODE_TYPE ("PARAM");
    WRITE_ENUM_FIELD (paramkind, ParamKind);
    WRITE_INT_FIELD (paramid);
    WRITE_OID_FIELD (paramtype);
    WRITE_INT_FIELD (paramtypmod);
    WRITE_LOCATION_FIELD (location);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="2241" endline="2251" pcid="176"><![CDATA[
static void _outSortBy (StringInfo str, SortBy *node) {
    WRITE_NODE_TYPE ("SORTBY");
    WRITE_NODE_FIELD (node);
    WRITE_ENUM_FIELD (sortby_dir, SortByDir);
    WRITE_ENUM_FIELD (sortby_nulls, SortByNulls);
    WRITE_NODE_FIELD (useOp);
    WRITE_LOCATION_FIELD (location);
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="6" nfragments="2" type="Type-3">
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1172" endline="1179" pcid="110"><![CDATA[
static void _outNullTest (StringInfo str, NullTest *node) {
    WRITE_NODE_TYPE ("NULLTEST");
    WRITE_NODE_FIELD (arg);
    WRITE_ENUM_FIELD (nulltesttype, NullTestType);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1181" endline="1188" pcid="111"><![CDATA[
static void _outBooleanTest (StringInfo str, BooleanTest *node) {
    WRITE_NODE_TYPE ("BOOLEANTEST");
    WRITE_NODE_FIELD (arg);
    WRITE_ENUM_FIELD (booltesttype, BoolTestType);
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="7" nfragments="2" type="Type-3">
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1202" endline="1210" pcid="113"><![CDATA[
static void _outCoerceToDomainValue (StringInfo str, CoerceToDomainValue *node) {
    WRITE_NODE_TYPE ("COERCETODOMAINVALUE");
    WRITE_OID_FIELD (typeId);
    WRITE_INT_FIELD (typeMod);
    WRITE_LOCATION_FIELD (location);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1212" endline="1220" pcid="114"><![CDATA[
static void _outSetToDefault (StringInfo str, SetToDefault *node) {
    WRITE_NODE_TYPE ("SETTODEFAULT");
    WRITE_OID_FIELD (typeId);
    WRITE_INT_FIELD (typeMod);
    WRITE_LOCATION_FIELD (location);
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="8" nfragments="4" type="Type-3">
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="1269" endline="1276" pcid="118"><![CDATA[
static void _outFromExpr (StringInfo str, FromExpr *node) {
    WRITE_NODE_TYPE ("FROMEXPR");
    WRITE_NODE_FIELD (fromlist);
    WRITE_NODE_FIELD (quals);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="2203" endline="2210" pcid="172"><![CDATA[
static void _outA_Indices (StringInfo str, A_Indices *node) {
    WRITE_NODE_TYPE ("A_INDICES");
    WRITE_NODE_FIELD (lidx);
    WRITE_NODE_FIELD (uidx);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="2212" endline="2219" pcid="173"><![CDATA[
static void _outA_Indirection (StringInfo str, A_Indirection *node) {
    WRITE_NODE_TYPE ("A_INDIRECTION");
    WRITE_NODE_FIELD (arg);
    WRITE_NODE_FIELD (indirection);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/outfuncs.c.ifdefed" startline="2169" endline="2176" pcid="169"><![CDATA[
static void _outColumnRef (StringInfo str, ColumnRef *node) {
    WRITE_NODE_TYPE ("COLUMNREF");
    WRITE_NODE_FIELD (fields);
    WRITE_LOCATION_FIELD (location);
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="9" nfragments="36" type="Type-3">
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="190" endline="222" pcid="206"><![CDATA[
static Query *_readQuery (void) {
    READ_LOCALS (Query);
    READ_ENUM_FIELD (commandType, CmdType);
    READ_ENUM_FIELD (querySource, QuerySource);
    READ_BOOL_FIELD (canSetTag);
    READ_NODE_FIELD (utilityStmt);
    READ_INT_FIELD (resultRelation);
    READ_NODE_FIELD (intoClause);
    READ_BOOL_FIELD (hasAggs);
    READ_BOOL_FIELD (hasWindowFuncs);
    READ_BOOL_FIELD (hasSubLinks);
    READ_BOOL_FIELD (hasDistinctOn);
    READ_BOOL_FIELD (hasRecursive);
    READ_NODE_FIELD (cteList);
    READ_NODE_FIELD (rtable);
    READ_NODE_FIELD (jointree);
    READ_NODE_FIELD (targetList);
    READ_NODE_FIELD (returningList);
    READ_NODE_FIELD (groupClause);
    READ_NODE_FIELD (havingQual);
    READ_NODE_FIELD (windowClause);
    READ_NODE_FIELD (distinctClause);
    READ_NODE_FIELD (sortClause);
    READ_NODE_FIELD (limitOffset);
    READ_NODE_FIELD (limitCount);
    READ_NODE_FIELD (rowMarks);
    READ_NODE_FIELD (setOperations);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="680" endline="691" pcid="230"><![CDATA[
static FieldStore *_readFieldStore (void) {
    READ_LOCALS (FieldStore);
    READ_NODE_FIELD (arg);
    READ_NODE_FIELD (newvals);
    READ_NODE_FIELD (fieldnums);
    READ_OID_FIELD (resulttype);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="643" endline="655" pcid="228"><![CDATA[
static SubLink *_readSubLink (void) {
    READ_LOCALS (SubLink);
    READ_ENUM_FIELD (subLinkType, SubLinkType);
    READ_NODE_FIELD (testexpr);
    READ_NODE_FIELD (operName);
    READ_NODE_FIELD (subselect);
    READ_LOCATION_FIELD (location);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="378" endline="390" pcid="216"><![CDATA[
static IntoClause *_readIntoClause (void) {
    READ_LOCALS (IntoClause);
    READ_NODE_FIELD (rel);
    READ_NODE_FIELD (colNames);
    READ_NODE_FIELD (options);
    READ_ENUM_FIELD (onCommit, OnCommitAction);
    READ_STRING_FIELD (tableSpaceName);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="764" endline="776" pcid="235"><![CDATA[
static CaseExpr *_readCaseExpr (void) {
    READ_LOCALS (CaseExpr);
    READ_OID_FIELD (casetype);
    READ_NODE_FIELD (arg);
    READ_NODE_FIELD (args);
    READ_NODE_FIELD (defresult);
    READ_LOCATION_FIELD (location);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="328" endline="342" pcid="213"><![CDATA[
static SetOperationStmt *_readSetOperationStmt (void) {
    READ_LOCALS (SetOperationStmt);
    READ_ENUM_FIELD (op, SetOperation);
    READ_BOOL_FIELD (all);
    READ_NODE_FIELD (larg);
    READ_NODE_FIELD (rarg);
    READ_NODE_FIELD (colTypes);
    READ_NODE_FIELD (colTypmods);
    READ_NODE_FIELD (groupClauses);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="494" endline="508" pcid="222"><![CDATA[
static ArrayRef *_readArrayRef (void) {
    READ_LOCALS (ArrayRef);
    READ_OID_FIELD (refarraytype);
    READ_OID_FIELD (refelemtype);
    READ_INT_FIELD (reftypmod);
    READ_NODE_FIELD (refupperindexpr);
    READ_NODE_FIELD (reflowerindexpr);
    READ_NODE_FIELD (refexpr);
    READ_NODE_FIELD (refassgnexpr);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="1064" endline="1079" pcid="253"><![CDATA[
static JoinExpr *_readJoinExpr (void) {
    READ_LOCALS (JoinExpr);
    READ_ENUM_FIELD (jointype, JoinType);
    READ_BOOL_FIELD (isNatural);
    READ_NODE_FIELD (larg);
    READ_NODE_FIELD (rarg);
    READ_NODE_FIELD (using);
    READ_NODE_FIELD (quals);
    READ_NODE_FIELD (alias);
    READ_INT_FIELD (rtindex);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="307" endline="323" pcid="212"><![CDATA[
static CommonTableExpr *_readCommonTableExpr (void) {
    READ_LOCALS (CommonTableExpr);
    READ_STRING_FIELD (ctename);
    READ_NODE_FIELD (aliascolnames);
    READ_NODE_FIELD (ctequery);
    READ_LOCATION_FIELD (location);
    READ_BOOL_FIELD (cterecursive);
    READ_INT_FIELD (cterefcount);
    READ_NODE_FIELD (ctecolnames);
    READ_NODE_FIELD (ctecoltypes);
    READ_NODE_FIELD (ctecoltypmods);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="892" endline="908" pcid="243"><![CDATA[
static XmlExpr *_readXmlExpr (void) {
    READ_LOCALS (XmlExpr);
    READ_ENUM_FIELD (op, XmlExprOp);
    READ_STRING_FIELD (name);
    READ_NODE_FIELD (named_args);
    READ_NODE_FIELD (arg_names);
    READ_NODE_FIELD (args);
    READ_ENUM_FIELD (xmloption, XmlOptionType);
    READ_OID_FIELD (type);
    READ_INT_FIELD (typmod);
    READ_LOCATION_FIELD (location);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="861" endline="871" pcid="241"><![CDATA[
static CoalesceExpr *_readCoalesceExpr (void) {
    READ_LOCALS (CoalesceExpr);
    READ_OID_FIELD (coalescetype);
    READ_NODE_FIELD (args);
    READ_LOCATION_FIELD (location);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="748" endline="759" pcid="234"><![CDATA[
static ConvertRowtypeExpr *_readConvertRowtypeExpr (void) {
    READ_LOCALS (ConvertRowtypeExpr);
    READ_NODE_FIELD (arg);
    READ_OID_FIELD (resulttype);
    READ_ENUM_FIELD (convertformat, CoercionForm);
    READ_LOCATION_FIELD (location);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="713" endline="724" pcid="232"><![CDATA[
static CoerceViaIO *_readCoerceViaIO (void) {
    READ_LOCALS (CoerceViaIO);
    READ_NODE_FIELD (arg);
    READ_OID_FIELD (resulttype);
    READ_ENUM_FIELD (coerceformat, CoercionForm);
    READ_LOCATION_FIELD (location);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="827" endline="839" pcid="239"><![CDATA[
static RowExpr *_readRowExpr (void) {
    READ_LOCALS (RowExpr);
    READ_NODE_FIELD (args);
    READ_OID_FIELD (row_typeid);
    READ_ENUM_FIELD (row_format, CoercionForm);
    READ_NODE_FIELD (colnames);
    READ_LOCATION_FIELD (location);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="513" endline="526" pcid="223"><![CDATA[
static FuncExpr *_readFuncExpr (void) {
    READ_LOCALS (FuncExpr);
    READ_OID_FIELD (funcid);
    READ_OID_FIELD (funcresulttype);
    READ_BOOL_FIELD (funcretset);
    READ_ENUM_FIELD (funcformat, CoercionForm);
    READ_NODE_FIELD (args);
    READ_LOCATION_FIELD (location);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="729" endline="743" pcid="233"><![CDATA[
static ArrayCoerceExpr *_readArrayCoerceExpr (void) {
    READ_LOCALS (ArrayCoerceExpr);
    READ_NODE_FIELD (arg);
    READ_OID_FIELD (elemfuncid);
    READ_OID_FIELD (resulttype);
    READ_INT_FIELD (resulttypmod);
    READ_BOOL_FIELD (isExplicit);
    READ_ENUM_FIELD (coerceformat, CoercionForm);
    READ_LOCATION_FIELD (location);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="560" endline="584" pcid="225"><![CDATA[
static DistinctExpr *_readDistinctExpr (void) {
    READ_LOCALS (DistinctExpr);
    READ_OID_FIELD (opno);
    READ_OID_FIELD (opfuncid);
    local_node->opfuncid = InvalidOid;
    READ_OID_FIELD (opresulttype);
    READ_BOOL_FIELD (opretset);
    READ_NODE_FIELD (args);
    READ_LOCATION_FIELD (location);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="475" endline="489" pcid="221"><![CDATA[
static WindowFunc *_readWindowFunc (void) {
    READ_LOCALS (WindowFunc);
    READ_OID_FIELD (winfnoid);
    READ_OID_FIELD (wintype);
    READ_NODE_FIELD (args);
    READ_UINT_FIELD (winref);
    READ_BOOL_FIELD (winstar);
    READ_BOOL_FIELD (winagg);
    READ_LOCATION_FIELD (location);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="810" endline="822" pcid="238"><![CDATA[
static ArrayExpr *_readArrayExpr (void) {
    READ_LOCALS (ArrayExpr);
    READ_OID_FIELD (array_typeid);
    READ_OID_FIELD (element_typeid);
    READ_NODE_FIELD (elements);
    READ_BOOL_FIELD (multidims);
    READ_LOCATION_FIELD (location);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="987" endline="997" pcid="248"><![CDATA[
static CoerceToDomainValue *_readCoerceToDomainValue (void) {
    READ_LOCALS (CoerceToDomainValue);
    READ_OID_FIELD (typeId);
    READ_INT_FIELD (typeMod);
    READ_LOCATION_FIELD (location);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="589" endline="612" pcid="226"><![CDATA[
static ScalarArrayOpExpr *_readScalarArrayOpExpr (void) {
    READ_LOCALS (ScalarArrayOpExpr);
    READ_OID_FIELD (opno);
    READ_OID_FIELD (opfuncid);
    local_node->opfuncid = InvalidOid;
    READ_BOOL_FIELD (useOr);
    READ_NODE_FIELD (args);
    READ_LOCATION_FIELD (location);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="531" endline="555" pcid="224"><![CDATA[
static OpExpr *_readOpExpr (void) {
    READ_LOCALS (OpExpr);
    READ_OID_FIELD (opno);
    READ_OID_FIELD (opfuncid);
    local_node->opfuncid = InvalidOid;
    READ_OID_FIELD (opresulttype);
    READ_BOOL_FIELD (opretset);
    READ_NODE_FIELD (args);
    READ_LOCATION_FIELD (location);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="1002" endline="1012" pcid="249"><![CDATA[
static SetToDefault *_readSetToDefault (void) {
    READ_LOCALS (SetToDefault);
    READ_OID_FIELD (typeId);
    READ_INT_FIELD (typeMod);
    READ_LOCATION_FIELD (location);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="876" endline="887" pcid="242"><![CDATA[
static MinMaxExpr *_readMinMaxExpr (void) {
    READ_LOCALS (MinMaxExpr);
    READ_OID_FIELD (minmaxtype);
    READ_ENUM_FIELD (op, MinMaxOp);
    READ_NODE_FIELD (args);
    READ_LOCATION_FIELD (location);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="696" endline="708" pcid="231"><![CDATA[
static RelabelType *_readRelabelType (void) {
    READ_LOCALS (RelabelType);
    READ_NODE_FIELD (arg);
    READ_OID_FIELD (resulttype);
    READ_INT_FIELD (resulttypmod);
    READ_ENUM_FIELD (relabelformat, CoercionForm);
    READ_LOCATION_FIELD (location);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="913" endline="937" pcid="244"><![CDATA[
static NullIfExpr *_readNullIfExpr (void) {
    READ_LOCALS (NullIfExpr);
    READ_OID_FIELD (opno);
    READ_OID_FIELD (opfuncid);
    local_node->opfuncid = InvalidOid;
    READ_OID_FIELD (opresulttype);
    READ_BOOL_FIELD (opretset);
    READ_NODE_FIELD (args);
    READ_LOCATION_FIELD (location);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="456" endline="470" pcid="220"><![CDATA[
static Aggref *_readAggref (void) {
    READ_LOCALS (Aggref);
    READ_OID_FIELD (aggfnoid);
    READ_OID_FIELD (aggtype);
    READ_NODE_FIELD (args);
    READ_UINT_FIELD (agglevelsup);
    READ_BOOL_FIELD (aggstar);
    READ_BOOL_FIELD (aggdistinct);
    READ_LOCATION_FIELD (location);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="255" endline="266" pcid="209"><![CDATA[
static SortGroupClause *_readSortGroupClause (void) {
    READ_LOCALS (SortGroupClause);
    READ_UINT_FIELD (tleSortGroupRef);
    READ_OID_FIELD (eqop);
    READ_OID_FIELD (sortop);
    READ_BOOL_FIELD (nulls_first);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="290" endline="302" pcid="211"><![CDATA[
static RowMarkClause *_readRowMarkClause (void) {
    READ_LOCALS (RowMarkClause);
    READ_UINT_FIELD (rti);
    READ_UINT_FIELD (prti);
    READ_BOOL_FIELD (forUpdate);
    READ_BOOL_FIELD (noWait);
    READ_BOOL_FIELD (isParent);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="1032" endline="1046" pcid="251"><![CDATA[
static TargetEntry *_readTargetEntry (void) {
    READ_LOCALS (TargetEntry);
    READ_NODE_FIELD (expr);
    READ_INT_FIELD (resno);
    READ_STRING_FIELD (resname);
    READ_UINT_FIELD (ressortgroupref);
    READ_OID_FIELD (resorigtbl);
    READ_INT_FIELD (resorigcol);
    READ_BOOL_FIELD (resjunk);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="970" endline="982" pcid="247"><![CDATA[
static CoerceToDomain *_readCoerceToDomain (void) {
    READ_LOCALS (CoerceToDomain);
    READ_NODE_FIELD (arg);
    READ_OID_FIELD (resulttype);
    READ_INT_FIELD (resulttypmod);
    READ_ENUM_FIELD (coercionformat, CoercionForm);
    READ_LOCATION_FIELD (location);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="395" endline="410" pcid="217"><![CDATA[
static Var *_readVar (void) {
    READ_LOCALS (Var);
    READ_UINT_FIELD (varno);
    READ_INT_FIELD (varattno);
    READ_OID_FIELD (vartype);
    READ_INT_FIELD (vartypmod);
    READ_UINT_FIELD (varlevelsup);
    READ_UINT_FIELD (varnoold);
    READ_INT_FIELD (varoattno);
    READ_LOCATION_FIELD (location);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="664" endline="675" pcid="229"><![CDATA[
static FieldSelect *_readFieldSelect (void) {
    READ_LOCALS (FieldSelect);
    READ_NODE_FIELD (arg);
    READ_INT_FIELD (fieldnum);
    READ_OID_FIELD (resulttype);
    READ_INT_FIELD (resulttypmod);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="271" endline="285" pcid="210"><![CDATA[
static WindowClause *_readWindowClause (void) {
    READ_LOCALS (WindowClause);
    READ_STRING_FIELD (name);
    READ_STRING_FIELD (refname);
    READ_NODE_FIELD (partitionClause);
    READ_NODE_FIELD (orderClause);
    READ_INT_FIELD (frameOptions);
    READ_UINT_FIELD (winref);
    READ_BOOL_FIELD (copiedOrder);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="240" endline="250" pcid="208"><![CDATA[
static DeclareCursorStmt *_readDeclareCursorStmt (void) {
    READ_LOCALS (DeclareCursorStmt);
    READ_STRING_FIELD (portalname);
    READ_INT_FIELD (options);
    READ_NODE_FIELD (query);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="1017" endline="1027" pcid="250"><![CDATA[
static CurrentOfExpr *_readCurrentOfExpr (void) {
    READ_LOCALS (CurrentOfExpr);
    READ_UINT_FIELD (cvarno);
    READ_STRING_FIELD (cursor_name);
    READ_INT_FIELD (cursor_param);
    READ_DONE ();
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="10" nfragments="2" type="Type-3">
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="349" endline="358" pcid="214"><![CDATA[
static Alias *_readAlias (void) {
    READ_LOCALS (Alias);
    READ_STRING_FIELD (aliasname);
    READ_NODE_FIELD (colnames);
    READ_DONE ();
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/readfuncs.c.ifdefed" startline="1084" endline="1093" pcid="254"><![CDATA[
static FromExpr *_readFromExpr (void) {
    READ_LOCALS (FromExpr);
    READ_NODE_FIELD (fromlist);
    READ_NODE_FIELD (quals);
    READ_DONE ();
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="11" nfragments="4" type="Type-3">
<CloneFragment file="/smallpostgresql/value.c.ifdefed" startline="22" endline="30" pcid="258"><![CDATA[
Value *makeInteger (long i) {
    Value *v = makeNode (Value);
    v->type = T_Integer;
    v->val.ival = i;
    return v;
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/value.c.ifdefed" startline="37" endline="45" pcid="259"><![CDATA[
Value *makeFloat (char *numericStr) {
    Value *v = makeNode (Value);
    v->type = T_Float;
    v->val.str = numericStr;
    return v;
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/value.c.ifdefed" startline="52" endline="60" pcid="260"><![CDATA[
Value *makeString (char *str) {
    Value *v = makeNode (Value);
    v->type = T_String;
    v->val.str = str;
    return v;
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/value.c.ifdefed" startline="67" endline="75" pcid="261"><![CDATA[
Value *makeBitString (char *str) {
    Value *v = makeNode (Value);
    v->type = T_BitString;
    v->val.str = str;
    return v;
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="12" nfragments="2" type="Type-3">
<CloneFragment file="/smallpostgresql/list.c.ifdefed" startline="62" endline="79" pcid="0"><![CDATA[
static List *new_list (NodeTag type) {
    List *new_list;
    ListCell *new_head;
    new_head = (ListCell *) palloc (sizeof (*new_head));
    new_head->next = NULL;
    new_list = (List *) palloc (sizeof (*new_list));
    new_list->type = type;
    new_list->length = 1;
    new_list->head = new_head;
    new_list->tail = new_head;
    return new_list;
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/list.c.ifdefed" startline="107" endline="118" pcid="2"><![CDATA[
static void new_tail_cell (List *list) {
    ListCell *new_tail;
    new_tail = (ListCell *) palloc (sizeof (*new_tail));
    new_tail->next = NULL;
    list->tail->next = new_tail;
    list->tail = new_tail;
    list->length++;
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="13" nfragments="3" type="Type-3">
<CloneFragment file="/smallpostgresql/list.c.ifdefed" startline="127" endline="140" pcid="3"><![CDATA[
List *lappend (List *list, void *datum) {
    Assert (IsPointerList (list));
    if (list == NIL)
        list = new_list (T_List);
    else
        new_tail_cell (list);
    lfirst (list->tail) = datum;
    check_list_invariants (list);
    return list;
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/list.c.ifdefed" startline="145" endline="158" pcid="4"><![CDATA[
List *lappend_int (List *list, int datum) {
    Assert (IsIntegerList (list));
    if (list == NIL)
        list = new_list (T_IntList);
    else
        new_tail_cell (list);
    lfirst_int (list->tail) = datum;
    check_list_invariants (list);
    return list;
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/list.c.ifdefed" startline="163" endline="176" pcid="5"><![CDATA[
List *lappend_oid (List *list, Oid datum) {
    Assert (IsOidList (list));
    if (list == NIL)
        list = new_list (T_OidList);
    else
        new_tail_cell (list);
    lfirst_oid (list->tail) = datum;
    check_list_invariants (list);
    return list;
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="14" nfragments="3" type="Type-3">
<CloneFragment file="/smallpostgresql/list.c.ifdefed" startline="208" endline="219" pcid="7"><![CDATA[
ListCell *lappend_cell (List *list, ListCell *prev, void *datum) {
    ListCell *new_cell;
    Assert (IsPointerList (list));
    new_cell = add_new_cell (list, prev);
    lfirst (new_cell) = datum;
    check_list_invariants (list);
    return new_cell;
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/list.c.ifdefed" startline="234" endline="245" pcid="9"><![CDATA[
ListCell *lappend_cell_oid (List *list, ListCell *prev, Oid datum) {
    ListCell *new_cell;
    Assert (IsOidList (list));
    new_cell = add_new_cell (list, prev);
    lfirst_oid (new_cell) = datum;
    check_list_invariants (list);
    return new_cell;
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/list.c.ifdefed" startline="221" endline="232" pcid="8"><![CDATA[
ListCell *lappend_cell_int (List *list, ListCell *prev, int datum) {
    ListCell *new_cell;
    Assert (IsIntegerList (list));
    new_cell = add_new_cell (list, prev);
    lfirst_int (new_cell) = datum;
    check_list_invariants (list);
    return new_cell;
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="15" nfragments="2" type="Type-3">
<CloneFragment file="/smallpostgresql/list.c.ifdefed" startline="276" endline="289" pcid="11"><![CDATA[
List *lcons_int (int datum, List *list) {
    Assert (IsIntegerList (list));
    if (list == NIL)
        list = new_list (T_IntList);
    else
        new_head_cell (list);
    lfirst_int (list->head) = datum;
    check_list_invariants (list);
    return list;
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/list.c.ifdefed" startline="294" endline="307" pcid="12"><![CDATA[
List *lcons_oid (Oid datum, List *list) {
    Assert (IsOidList (list));
    if (list == NIL)
        list = new_list (T_OidList);
    else
        new_head_cell (list);
    lfirst_oid (list->head) = datum;
    check_list_invariants (list);
    return list;
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="16" nfragments="3" type="Type-3">
<CloneFragment file="/smallpostgresql/list.c.ifdefed" startline="464" endline="479" pcid="17"><![CDATA[
bool list_member_ptr (List *list, void *datum) {
    ListCell *cell;
    Assert (IsPointerList (list));
    check_list_invariants (list);
    foreach (cell, list) {
        if (lfirst (cell) == datum)
            return true;
    }
    return false;
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/list.c.ifdefed" startline="504" endline="519" pcid="19"><![CDATA[
bool list_member_oid (List *list, Oid datum) {
    ListCell *cell;
    Assert (IsOidList (list));
    check_list_invariants (list);
    foreach (cell, list) {
        if (lfirst_oid (cell) == datum)
            return true;
    }
    return false;
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/list.c.ifdefed" startline="484" endline="499" pcid="18"><![CDATA[
bool list_member_int (List *list, int datum) {
    ListCell *cell;
    Assert (IsIntegerList (list));
    check_list_invariants (list);
    foreach (cell, list) {
        if (lfirst_int (cell) == datum)
            return true;
    }
    return false;
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="17" nfragments="4" type="Type-3">
<CloneFragment file="/smallpostgresql/list.c.ifdefed" startline="566" endline="586" pcid="21"><![CDATA[
List *list_delete (List *list, void *datum) {
    ListCell *cell;
    ListCell *prev;
    Assert (IsPointerList (list));
    check_list_invariants (list);
    prev = NULL;
    foreach (cell, list) {
        if (equal (lfirst (cell), datum))
            return list_delete_cell (list, cell, prev);
        prev = cell;
    }
    return list;
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/list.c.ifdefed" startline="589" endline="609" pcid="22"><![CDATA[
List *list_delete_ptr (List *list, void *datum) {
    ListCell *cell;
    ListCell *prev;
    Assert (IsPointerList (list));
    check_list_invariants (list);
    prev = NULL;
    foreach (cell, list) {
        if (lfirst (cell) == datum)
            return list_delete_cell (list, cell, prev);
        prev = cell;
    }
    return list;
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/list.c.ifdefed" startline="635" endline="655" pcid="24"><![CDATA[
List *list_delete_oid (List *list, Oid datum) {
    ListCell *cell;
    ListCell *prev;
    Assert (IsOidList (list));
    check_list_invariants (list);
    prev = NULL;
    foreach (cell, list) {
        if (lfirst_oid (cell) == datum)
            return list_delete_cell (list, cell, prev);
        prev = cell;
    }
    return list;
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/list.c.ifdefed" startline="612" endline="632" pcid="23"><![CDATA[
List *list_delete_int (List *list, int datum) {
    ListCell *cell;
    ListCell *prev;
    Assert (IsIntegerList (list));
    check_list_invariants (list);
    prev = NULL;
    foreach (cell, list) {
        if (lfirst_int (cell) == datum)
            return list_delete_cell (list, cell, prev);
        prev = cell;
    }
    return list;
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="18" nfragments="6" type="Type-3">
<CloneFragment file="/smallpostgresql/list.c.ifdefed" startline="696" endline="714" pcid="26"><![CDATA[
List *list_union (List *list1, List *list2) {
    List *result;
    ListCell *cell;
    Assert (IsPointerList (list1));
    Assert (IsPointerList (list2));
    result = list_copy (list1);
    foreach (cell, list2) {
        if (!list_member (result, lfirst (cell)))
            result = lappend (result, lfirst (cell));
    }
    check_list_invariants (result);
    return result;
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/list.c.ifdefed" startline="766" endline="784" pcid="29"><![CDATA[
List *list_union_oid (List *list1, List *list2) {
    List *result;
    ListCell *cell;
    Assert (IsOidList (list1));
    Assert (IsOidList (list2));
    result = list_copy (list1);
    foreach (cell, list2) {
        if (!list_member_oid (result, lfirst_oid (cell)))
            result = lappend_oid (result, lfirst_oid (cell));
    }
    check_list_invariants (result);
    return result;
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/list.c.ifdefed" startline="720" endline="738" pcid="27"><![CDATA[
List *list_union_ptr (List *list1, List *list2) {
    List *result;
    ListCell *cell;
    Assert (IsPointerList (list1));
    Assert (IsPointerList (list2));
    result = list_copy (list1);
    foreach (cell, list2) {
        if (!list_member_ptr (result, lfirst (cell)))
            result = lappend (result, lfirst (cell));
    }
    check_list_invariants (result);
    return result;
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/list.c.ifdefed" startline="831" endline="851" pcid="31"><![CDATA[
List *list_difference (List *list1, List *list2) {
    ListCell *cell;
    List *result = NIL;
    Assert (IsPointerList (list1));
    Assert (IsPointerList (list2));
    if (list2 == NIL)
        return list_copy (list1);
    foreach (cell, list1) {
        if (!list_member (list2, lfirst (cell)))
            result = lappend (result, lfirst (cell));
    }
    check_list_invariants (result);
    return result;
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/list.c.ifdefed" startline="857" endline="877" pcid="32"><![CDATA[
List *list_difference_ptr (List *list1, List *list2) {
    ListCell *cell;
    List *result = NIL;
    Assert (IsPointerList (list1));
    Assert (IsPointerList (list2));
    if (list2 == NIL)
        return list_copy (list1);
    foreach (cell, list1) {
        if (!list_member_ptr (list2, lfirst (cell)))
            result = lappend (result, lfirst (cell));
    }
    check_list_invariants (result);
    return result;
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/list.c.ifdefed" startline="907" endline="927" pcid="34"><![CDATA[
List *list_difference_oid (List *list1, List *list2) {
    ListCell *cell;
    List *result = NIL;
    Assert (IsOidList (list1));
    Assert (IsOidList (list2));
    if (list2 == NIL)
        return list_copy (list1);
    foreach (cell, list1) {
        if (!list_member_oid (list2, lfirst_oid (cell)))
            result = lappend_oid (result, lfirst_oid (cell));
    }
    check_list_invariants (result);
    return result;
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="19" nfragments="2" type="Type-2">
<CloneFragment file="/smallpostgresql/list.c.ifdefed" startline="935" endline="942" pcid="35"><![CDATA[
List *list_append_unique (List *list, void *datum) {
    if (list_member (list, datum))
        return list;
    else
        return lappend (list, datum);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/list.c.ifdefed" startline="948" endline="955" pcid="36"><![CDATA[
List *list_append_unique_ptr (List *list, void *datum) {
    if (list_member_ptr (list, datum))
        return list;
    else
        return lappend (list, datum);
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="20" nfragments="4" type="Type-3">
<CloneFragment file="/smallpostgresql/list.c.ifdefed" startline="991" endline="1007" pcid="39"><![CDATA[
List *list_concat_unique (List *list1, List *list2) {
    ListCell *cell;
    Assert (IsPointerList (list1));
    Assert (IsPointerList (list2));
    foreach (cell, list2) {
        if (!list_member (list1, lfirst (cell)))
            list1 = lappend (list1, lfirst (cell));
    }
    check_list_invariants (list1);
    return list1;
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/list.c.ifdefed" startline="1034" endline="1050" pcid="41"><![CDATA[
List *list_concat_unique_int (List *list1, List *list2) {
    ListCell *cell;
    Assert (IsIntegerList (list1));
    Assert (IsIntegerList (list2));
    foreach (cell, list2) {
        if (!list_member_int (list1, lfirst_int (cell)))
            list1 = lappend_int (list1, lfirst_int (cell));
    }
    check_list_invariants (list1);
    return list1;
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/list.c.ifdefed" startline="1055" endline="1071" pcid="42"><![CDATA[
List *list_concat_unique_oid (List *list1, List *list2) {
    ListCell *cell;
    Assert (IsOidList (list1));
    Assert (IsOidList (list2));
    foreach (cell, list2) {
        if (!list_member_oid (list1, lfirst_oid (cell)))
            list1 = lappend_oid (list1, lfirst_oid (cell));
    }
    check_list_invariants (list1);
    return list1;
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/list.c.ifdefed" startline="1013" endline="1029" pcid="40"><![CDATA[
List *list_concat_unique_ptr (List *list1, List *list2) {
    ListCell *cell;
    Assert (IsPointerList (list1));
    Assert (IsPointerList (list2));
    foreach (cell, list2) {
        if (!list_member_ptr (list1, lfirst (cell)))
            list1 = lappend (list1, lfirst (cell));
    }
    check_list_invariants (list1);
    return list1;
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="21" nfragments="2" type="Type-3">
<CloneFragment file="/smallpostgresql/pqformat.c.ifdefed" startline="184" endline="199" pcid="186"><![CDATA[
void pq_sendstring (StringInfo buf, const char *str) {
    int slen = strlen (str);
    char *p;
    p = pg_server_to_client (str, slen);
    if (p != str) {
        slen = strlen (p);
        appendBinaryStringInfo (buf, p, slen + 1);
        pfree (p);
    }
    else
        appendBinaryStringInfo (buf, str, slen +1);
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/pqformat.c.ifdefed" startline="425" endline="439" pcid="195"><![CDATA[
void pq_puttextmessage (char msgtype, const char *str) {
    int slen = strlen (str);
    char *p;
    p = pg_server_to_client (str, slen);
    if (p != str) {
        (void) pq_putmessage (msgtype, p, strlen (p) +1);
        pfree (p);
        return;
    }
    (void) pq_putmessage (msgtype, str, slen +1);
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="22" nfragments="2" type="Type-3">
<CloneFragment file="/smallpostgresql/pqformat.c.ifdefed" startline="234" endline="259" pcid="188"><![CDATA[
void pq_sendint (StringInfo buf, int i, int b) {
    unsigned char n8;
    uint16 n16;
    uint32 n32;
    switch (b) {
    case 1 :
        n8 = (unsigned char) i;
        appendBinaryStringInfo (buf, (char *) & n8, 1);
        break;
    case 2 :
        n16 = htons ((uint16) i);
        appendBinaryStringInfo (buf, (char *) & n16, 2);
        break;
    case 4 :
        n32 = htonl ((uint32) i);
        appendBinaryStringInfo (buf, (char *) & n32, 4);
        break;
    default :
        elog (ERROR, "unsupported integer size %d", b);
        break;
    }
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/pqformat.c.ifdefed" startline="473" endline="501" pcid="197"><![CDATA[
unsigned int pq_getmsgint (StringInfo msg, int b) {
    unsigned int result;
    unsigned char n8;
    uint16 n16;
    uint32 n32;
    switch (b) {
    case 1 :
        pq_copymsgbytes (msg, (char *) &n8, 1);
        result = n8;
        break;
    case 2 :
        pq_copymsgbytes (msg, (char *) &n16, 2);
        result = ntohs (n16);
        break;
    case 4 :
        pq_copymsgbytes (msg, (char *) &n32, 4);
        result = ntohl (n32);
        break;
    default :
        elog (ERROR, "unsupported integer size %d", b);
        result = 0;
        break;
    }
    return result;
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="23" nfragments="2" type="Type-3">
<CloneFragment file="/smallpostgresql/pqformat.c.ifdefed" startline="545" endline="556" pcid="199"><![CDATA[
float4 pq_getmsgfloat4 (StringInfo msg) {
    union {
        float4 f;
        uint32 i;
    } swap;
    swap.i = pq_getmsgint (msg, 4);
    return swap.f;
}
]]></CloneFragment>
<CloneFragment file="/smallpostgresql/pqformat.c.ifdefed" startline="564" endline="594" pcid="200"><![CDATA[
float8 pq_getmsgfloat8 (StringInfo msg) {
    union {
        float8 f;
        int64 i;
    } swap;
    swap.i = pq_getmsgint64 (msg);
    return swap.f;
}
]]></CloneFragment>
</CloneGroup>
</Clones>
</SimCad>