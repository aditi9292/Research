<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="62" endline="79">
static List *x (NodeTag x) {
    List *x;
    ListCell *x;
    x = (x *) x (sizeof (*x));
    x->x = x;
    x = (x *) x (sizeof (*x));
    x->x = x;
    x->x = 1;
    x->x = x;
    x->x = x;
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="88" endline="98">
static void x (List *x) {
    ListCell *x;
    x = (x *) x (sizeof (*x));
    x->x = x->x;
    x->x = x;
    x->x++;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="107" endline="118">
static void x (List *x) {
    ListCell *x;
    x = (x *) x (sizeof (*x));
    x->x = x;
    x->x->x = x;
    x->x = x;
    x->x++;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="127" endline="140">
List *x (List *x, void *x) {
    Assert (IsPointerList (x));
    if (x == x)
        x = x (x);
    else
        x (x);
    x (x->x) = x;
    x (x);
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="145" endline="158">
List *x (List *x, int x) {
    Assert (IsIntegerList (x));
    if (x == x)
        x = x (x);
    else
        x (x);
    x (x->x) = x;
    x (x);
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="163" endline="176">
List *x (List *x, Oid x) {
    Assert (IsOidList (x));
    if (x == x)
        x = x (x);
    else
        x (x);
    x (x->x) = x;
    x (x);
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="184" endline="200">
static ListCell *x (List *x, ListCell *x) {
    ListCell *x;
    x = (x *) x (sizeof (*x));
    x->x = x->x;
    x->x = x;
    if (x->x == x)
        x->x = x;
    x->x++;
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="208" endline="219">
ListCell *x (List *x, ListCell *x, void *x) {
    ListCell *x;
    Assert (IsPointerList (x));
    x = x (x, x);
    x (x) = x;
    x (x);
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="221" endline="232">
ListCell *x (List *x, ListCell *x, int x) {
    ListCell *x;
    Assert (IsIntegerList (x));
    x = x (x, x);
    x (x) = x;
    x (x);
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="234" endline="245">
ListCell *x (List *x, ListCell *x, Oid x) {
    ListCell *x;
    Assert (IsOidList (x));
    x = x (x, x);
    x (x) = x;
    x (x);
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="258" endline="271">
List *x (void *x, List *x) {
    Assert (IsPointerList (x));
    if (x == x)
        x = x (x);
    else
        x (x);
    x (x->x) = x;
    x (x);
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="276" endline="289">
List *x (int x, List *x) {
    Assert (IsIntegerList (x));
    if (x == x)
        x = x (x);
    else
        x (x);
    x (x->x) = x;
    x (x);
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="294" endline="307">
List *x (Oid x, List *x) {
    Assert (IsOidList (x));
    if (x == x)
        x = x (x);
    else
        x (x);
    x (x->x) = x;
    x (x);
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="320" endline="338">
List *x (List *x, List *x) {
    if (x == x)
        return x;
    if (x == x)
        return x;
    if (x == x)
        x (x, "cannot list_concat() a list to itself");
    x (x -> x == x -> x);
    x->x += x->x;
    x->x->x = x->x;
    x->x = x->x;
    x (x);
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="349" endline="379">
List *x (List *x, int x) {
    ListCell *x;
    int x;
    if (x <= 0)
        return x;
    if (x >= x (x))
        return x;
    x = 1;
    foreach (x, x) {
        if (x == x) {
            x->x = x;
            x->x = x;
            x->x = x;
            x (x);
            return x;
        }
        x++;
    }
    Assert (x);
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="385" endline="403">
static ListCell *x (List *x, int x) {
    ListCell *x;
    x (x != x);
    x (x >= 0);
    x (x < x -> x);
    x (x);
    if (x == x->x - 1)
        return x->x;
    for (x = x->x; x-- > 0; x = x->x)
        ;
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="409" endline="414">
void *x (List *x, int x) {
    Assert (IsPointerList (x));
    return x (x (x, x));
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="420" endline="425">
int x (List *x, int x) {
    Assert (IsIntegerList (x));
    return x (x (x, x));
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="431" endline="436">
Oid x (List *x, int x) {
    Assert (IsOidList (x));
    return x (x (x, x));
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="443" endline="458">
x x (List *x, void *x) {
    ListCell *x;
    Assert (IsPointerList (x));
    x (x);
    foreach (x, x) {
        if (x (x (x), x))
            return x;
    }
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="464" endline="479">
x x (List *x, void *x) {
    ListCell *x;
    Assert (IsPointerList (x));
    x (x);
    foreach (x, x) {
        if (x (x) == x)
            return x;
    }
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="484" endline="499">
x x (List *x, int x) {
    ListCell *x;
    Assert (IsIntegerList (x));
    x (x);
    foreach (x, x) {
        if (x (x) == x)
            return x;
    }
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="504" endline="519">
x x (List *x, Oid x) {
    ListCell *x;
    Assert (IsOidList (x));
    x (x);
    foreach (x, x) {
        if (x (x) == x)
            return x;
    }
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="527" endline="560">
List *x (List *x, ListCell *x, ListCell *x) {
    x (x);
    x (x != x ? x (x) == x : x (x) == x);
    if (x->x == 1) {
        x (x);
        return x;
    }
    x->x--;
    if (x)
        x->x = x->x;
    else
        x->x = x->x;
    if (x->x == x)
        x->x = x;
    x (x);
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="566" endline="586">
List *x (List *x, void *x) {
    ListCell *x;
    ListCell *x;
    Assert (IsPointerList (x));
    x (x);
    x = x;
    foreach (x, x) {
        if (x (x (x), x))
            return x (x, x, x);
        x = x;
    }
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="589" endline="609">
List *x (List *x, void *x) {
    ListCell *x;
    ListCell *x;
    Assert (IsPointerList (x));
    x (x);
    x = x;
    foreach (x, x) {
        if (x (x) == x)
            return x (x, x, x);
        x = x;
    }
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="612" endline="632">
List *x (List *x, int x) {
    ListCell *x;
    ListCell *x;
    Assert (IsIntegerList (x));
    x (x);
    x = x;
    foreach (x, x) {
        if (x (x) == x)
            return x (x, x, x);
        x = x;
    }
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="635" endline="655">
List *x (List *x, Oid x) {
    ListCell *x;
    ListCell *x;
    Assert (IsOidList (x));
    x (x);
    x = x;
    foreach (x, x) {
        if (x (x) == x)
            return x (x, x, x);
        x = x;
    }
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="665" endline="674">
List *x (List *x) {
    x (x);
    if (x == x)
        return x;
    return x (x, x (x), x);
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="696" endline="714">
List *x (List *x, List *x) {
    List *x;
    ListCell *x;
    Assert (IsPointerList (x));
    Assert (IsPointerList (x));
    x = x (x);
    foreach (x, x) {
        if (!x (x, x (x)))
            x = x (x, x (x));
    }
    x (x);
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="720" endline="738">
List *x (List *x, List *x) {
    List *x;
    ListCell *x;
    Assert (IsPointerList (x));
    Assert (IsPointerList (x));
    x = x (x);
    foreach (x, x) {
        if (!x (x, x (x)))
            x = x (x, x (x));
    }
    x (x);
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="743" endline="761">
List *x (List *x, List *x) {
    List *x;
    ListCell *x;
    Assert (IsIntegerList (x));
    Assert (IsIntegerList (x));
    x = x (x);
    foreach (x, x) {
        if (!x (x, x (x)))
            x = x (x, x (x));
    }
    x (x);
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="766" endline="784">
List *x (List *x, List *x) {
    List *x;
    ListCell *x;
    Assert (IsOidList (x));
    Assert (IsOidList (x));
    x = x (x);
    foreach (x, x) {
        if (!x (x, x (x)))
            x = x (x, x (x));
    }
    x (x);
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="799" endline="820">
List *x (List *x, List *x) {
    List *x;
    ListCell *x;
    if (x == x || x == x)
        return x;
    Assert (IsPointerList (x));
    Assert (IsPointerList (x));
    x = x;
    foreach (x, x) {
        if (x (x, x (x)))
            x = x (x, x (x));
    }
    x (x);
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="831" endline="851">
List *x (List *x, List *x) {
    ListCell *x;
    List *x = x;
    Assert (IsPointerList (x));
    Assert (IsPointerList (x));
    if (x == x)
        return x (x);
    foreach (x, x) {
        if (!x (x, x (x)))
            x = x (x, x (x));
    }
    x (x);
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="857" endline="877">
List *x (List *x, List *x) {
    ListCell *x;
    List *x = x;
    Assert (IsPointerList (x));
    Assert (IsPointerList (x));
    if (x == x)
        return x (x);
    foreach (x, x) {
        if (!x (x, x (x)))
            x = x (x, x (x));
    }
    x (x);
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="882" endline="902">
List *x (List *x, List *x) {
    ListCell *x;
    List *x = x;
    Assert (IsIntegerList (x));
    Assert (IsIntegerList (x));
    if (x == x)
        return x (x);
    foreach (x, x) {
        if (!x (x, x (x)))
            x = x (x, x (x));
    }
    x (x);
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="907" endline="927">
List *x (List *x, List *x) {
    ListCell *x;
    List *x = x;
    Assert (IsOidList (x));
    Assert (IsOidList (x));
    if (x == x)
        return x (x);
    foreach (x, x) {
        if (!x (x, x (x)))
            x = x (x, x (x));
    }
    x (x);
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="935" endline="942">
List *x (List *x, void *x) {
    if (x (x, x))
        return x;
    else
        return x (x, x);
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="948" endline="955">
List *x (List *x, void *x) {
    if (x (x, x))
        return x;
    else
        return x (x, x);
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="960" endline="967">
List *x (List *x, int x) {
    if (x (x, x))
        return x;
    else
        return x (x, x);
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="972" endline="979">
List *x (List *x, Oid x) {
    if (x (x, x))
        return x;
    else
        return x (x, x);
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="991" endline="1007">
List *x (List *x, List *x) {
    ListCell *x;
    Assert (IsPointerList (x));
    Assert (IsPointerList (x));
    foreach (x, x) {
        if (!x (x, x (x)))
            x = x (x, x (x));
    }
    x (x);
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="1013" endline="1029">
List *x (List *x, List *x) {
    ListCell *x;
    Assert (IsPointerList (x));
    Assert (IsPointerList (x));
    foreach (x, x) {
        if (!x (x, x (x)))
            x = x (x, x (x));
    }
    x (x);
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="1034" endline="1050">
List *x (List *x, List *x) {
    ListCell *x;
    Assert (IsIntegerList (x));
    Assert (IsIntegerList (x));
    foreach (x, x) {
        if (!x (x, x (x)))
            x = x (x, x (x));
    }
    x (x);
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="1055" endline="1071">
List *x (List *x, List *x) {
    ListCell *x;
    Assert (IsOidList (x));
    Assert (IsOidList (x));
    foreach (x, x) {
        if (!x (x, x (x)))
            x = x (x, x (x));
    }
    x (x);
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="1076" endline="1096">
static void x (List *x, x x) {
    ListCell *x;
    x (x);
    x = x (x);
    while (x != x) {
        ListCell *x = x;
        x = x (x);
        if (x)
            x (x (x));
        x (x);
    }
    if (x)
        x (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="1106" endline="1110">
void x (List *x) {
    x (x, x);
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="1120" endline="1128">
void x (List *x) {
    Assert (IsPointerList (x));
    x (x, x);
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="1133" endline="1171">
List *x (List *x) {
    List *x;
    ListCell *x;
    ListCell *x;
    if (x == x)
        return x;
    x = x (x->x);
    x->x = x->x;
    x->x->x = x->x->x;
    x = x->x;
    x = x->x->x;
    while (x) {
        ListCell *x;
        x = (x *) x (sizeof (*x));
        x->x = x->x;
        x->x = x;
        x = x;
        x = x->x;
    }
    x->x = x;
    x->x = x;
    x (x);
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="1176" endline="1224">
List *x (List *x, int x) {
    List *x;
    ListCell *x;
    ListCell *x;
    if (x < 0)
        x = 0;
    if (x == x || x >= x->x)
        return x;
    x = x (x->x);
    x->x = x->x - x;
    x = x->x;
    while (x-- > 0)
        x = x->x;
    x->x->x = x->x;
    x = x->x;
    x = x->x;
    while (x) {
        ListCell *x;
        x = (x *) x (sizeof (*x));
        x->x = x->x;
        x->x = x;
        x = x;
        x = x->x;
    }
    x->x = x;
    x->x = x;
    x (x);
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="1234" endline="1238">
ListCell *x (List *x) {
    return x ? x->x : x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="1240" endline="1244">
ListCell *x (List *x) {
    return x ? x->x : x;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="1246" endline="1250">
int x (List *x) {
    return x ? x->x : 0;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="1271" endline="1275">
int x (List *x) {
    return x (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="109" endline="139">
static void x (StringInfo x, char *x) {
    if (x == x || *x == '\0') {
        x (x, "<>");
        return;
    }
    if (*x == '<' || *x == '\"' || x ((unsigned char) *x) || ((*x == '+' || *x == '-') && (x ((unsigned char) x[1]) || x[1] == '.')))
        x (x, '\\');
    while (*x) {
        if (*x == ' ' || *x == '\n' || *x == '\t' || *x == '(' || *x == ')' || *x == '{' || *x == '}' || *x == '\\')
            x (x, '\\');
        x (x, * x ++);
    }
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="141" endline="176">
static void x (StringInfo x, List *x) {
    ListCell *x;
    x (x, '(');
    if (x (x, x))
        x (x, 'i');
    else if (x (x, x))
        x (x, 'o');
    foreach (x, x) {
        if (x (x, x)) {
            x (x, x (x));
            if (x (x))
                x (x, ' ');
        }
        else if (x (x, x))
            x (x, " %d", x (x));
        else if (x (x, x))
            x (x, " %u", x (x));
        else
            x (x, "unrecognized list node type: %d", (int) x->x);
    }
    x (x, ')');
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="184" endline="197">
static void x (StringInfo x, Bitmapset *x) {
    Bitmapset *x;
    int x;
    x (x, '(');
    x (x, 'b');
    x = x (x);
    while ((x = x (x)) >= 0)
        x (x, " %d", x);
    x (x);
    x (x, ')');
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="202" endline="232">
static void x (StringInfo x, Datum x, int x, x x) {
    Size x, x;
    char *x;
    x = x (x, x, x);
    if (x) {
        x = (char *) (&x);
        x (x, "%u [ ", (unsigned int) x);
        for (x = 0; x < (x) sizeof (x); x++)
            x (x, "%d ", (int) (x[x]));
        x (x, "]");
    }
    else {
        x = (char *) x (x);
        if (!x (x))
            x (x, "0 [ ]");
        else {
            x (x, "%u [ ", (unsigned int) x);
            for (x = 0; x < x; x++)
                x (x, "%d ", (int) (x[x]));
            x (x, "]");
        }
    }
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="239" endline="259">
static void x (StringInfo x, PlannedStmt *x) {
    x ("PLANNEDSTMT");
    x (x, x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_BITMAPSET_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_INT_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="264" endline="278">
static void x (StringInfo x, Plan *x) {
    x (x, "%.2f");
    x (x, "%.2f");
    x (x, "%.0f");
    WRITE_INT_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_BITMAPSET_FIELD (x);
    WRITE_BITMAPSET_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="283" endline="289">
static void x (StringInfo x, Scan *x) {
    x (x, (x *) x);
    WRITE_UINT_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="294" endline="301">
static void x (StringInfo x, Join *x) {
    x (x, (x *) x);
    x (x, x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="304" endline="310">
static void x (StringInfo x, Plan *x) {
    x ("PLAN");
    x (x, (x *) x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="312" endline="320">
static void x (StringInfo x, Result *x) {
    x ("RESULT");
    x (x, (x *) x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="322" endline="331">
static void x (StringInfo x, Append *x) {
    x ("APPEND");
    x (x, (x *) x);
    WRITE_NODE_FIELD (x);
    WRITE_BOOL_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="333" endline="354">
static void x (StringInfo x, RecursiveUnion *x) {
    int x;
    x ("RECURSIVEUNION");
    x (x, (x *) x);
    WRITE_INT_FIELD (x);
    WRITE_INT_FIELD (x);
    x (x, " :dupColIdx");
    for (x = 0; x < x->x; x++)
        x (x, " %d", x->x[x]);
    x (x, " :dupOperators");
    for (x = 0; x < x->x; x++)
        x (x, " %u", x->x[x]);
    WRITE_LONG_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="356" endline="364">
static void x (StringInfo x, BitmapAnd *x) {
    x ("BITMAPAND");
    x (x, (x *) x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="366" endline="374">
static void x (StringInfo x, BitmapOr *x) {
    x ("BITMAPOR");
    x (x, (x *) x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="376" endline="382">
static void x (StringInfo x, Scan *x) {
    x ("SCAN");
    x (x, (x *) x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="384" endline="390">
static void x (StringInfo x, SeqScan *x) {
    x ("SEQSCAN");
    x (x, (x *) x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="392" endline="403">
static void x (StringInfo x, IndexScan *x) {
    x ("INDEXSCAN");
    x (x, (x *) x);
    WRITE_OID_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    x (x, x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="405" endline="415">
static void x (StringInfo x, BitmapIndexScan *x) {
    x ("BITMAPINDEXSCAN");
    x (x, (x *) x);
    WRITE_OID_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="417" endline="425">
static void x (StringInfo x, BitmapHeapScan *x) {
    x ("BITMAPHEAPSCAN");
    x (x, (x *) x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="427" endline="435">
static void x (StringInfo x, TidScan *x) {
    x ("TIDSCAN");
    x (x, (x *) x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="437" endline="446">
static void x (StringInfo x, SubqueryScan *x) {
    x ("SUBQUERYSCAN");
    x (x, (x *) x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="448" endline="459">
static void x (StringInfo x, FunctionScan *x) {
    x ("FUNCTIONSCAN");
    x (x, (x *) x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="461" endline="469">
static void x (StringInfo x, ValuesScan *x) {
    x ("VALUESSCAN");
    x (x, (x *) x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="471" endline="480">
static void x (StringInfo x, CteScan *x) {
    x ("CTESCAN");
    x (x, (x *) x);
    WRITE_INT_FIELD (x);
    WRITE_INT_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="482" endline="490">
static void x (StringInfo x, WorkTableScan *x) {
    x ("WORKTABLESCAN");
    x (x, (x *) x);
    WRITE_INT_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="492" endline="498">
static void x (StringInfo x, Join *x) {
    x ("JOIN");
    x (x, (x *) x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="500" endline="506">
static void x (StringInfo x, NestLoop *x) {
    x ("NESTLOOP");
    x (x, (x *) x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="508" endline="533">
static void x (StringInfo x, MergeJoin *x) {
    int x;
    int x;
    x ("MERGEJOIN");
    x (x, (x *) x);
    WRITE_NODE_FIELD (x);
    x = x (x->x);
    x (x, " :mergeFamilies");
    for (x = 0; x < x; x++)
        x (x, " %u", x->x[x]);
    x (x, " :mergeStrategies");
    for (x = 0; x < x; x++)
        x (x, " %d", x->x[x]);
    x (x, " :mergeNullsFirst");
    for (x = 0; x < x; x++)
        x (x, " %d", (int) x->x[x]);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="535" endline="543">
static void x (StringInfo x, HashJoin *x) {
    x ("HASHJOIN");
    x (x, (x *) x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="545" endline="566">
static void x (StringInfo x, Agg *x) {
    int x;
    x ("AGG");
    x (x, (x *) x);
    x (x, x);
    WRITE_INT_FIELD (x);
    x (x, " :grpColIdx");
    for (x = 0; x < x->x; x++)
        x (x, " %d", x->x[x]);
    x (x, " :grpOperators");
    for (x = 0; x < x->x; x++)
        x (x, " %u", x->x[x]);
    WRITE_LONG_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="568" endline="599">
static void x (StringInfo x, WindowAgg *x) {
    int x;
    x ("WINDOWAGG");
    x (x, (x *) x);
    WRITE_UINT_FIELD (x);
    WRITE_INT_FIELD (x);
    x (x, " :partColIdx");
    for (x = 0; x < x->x; x++)
        x (x, " %d", x->x[x]);
    x (x, " :partOperations");
    for (x = 0; x < x->x; x++)
        x (x, " %u", x->x[x]);
    WRITE_INT_FIELD (x);
    x (x, " :ordColIdx");
    for (x = 0; x < x->x; x++)
        x (x, " %d", x->x[x]);
    x (x, " :ordOperations");
    for (x = 0; x < x->x; x++)
        x (x, " %u", x->x[x]);
    WRITE_INT_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="601" endline="619">
static void x (StringInfo x, Group *x) {
    int x;
    x ("GROUP");
    x (x, (x *) x);
    WRITE_INT_FIELD (x);
    x (x, " :grpColIdx");
    for (x = 0; x < x->x; x++)
        x (x, " %d", x->x[x]);
    x (x, " :grpOperators");
    for (x = 0; x < x->x; x++)
        x (x, " %u", x->x[x]);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="621" endline="627">
static void x (StringInfo x, Material *x) {
    x ("MATERIAL");
    x (x, (x *) x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="629" endline="651">
static void x (StringInfo x, Sort *x) {
    int x;
    x ("SORT");
    x (x, (x *) x);
    WRITE_INT_FIELD (x);
    x (x, " :sortColIdx");
    for (x = 0; x < x->x; x++)
        x (x, " %d", x->x[x]);
    x (x, " :sortOperators");
    for (x = 0; x < x->x; x++)
        x (x, " %u", x->x[x]);
    x (x, " :nullsFirst");
    for (x = 0; x < x->x; x++)
        x (x, " %s", x (x->x[x]));
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="653" endline="671">
static void x (StringInfo x, Unique *x) {
    int x;
    x ("UNIQUE");
    x (x, (x *) x);
    WRITE_INT_FIELD (x);
    x (x, " :uniqColIdx");
    for (x = 0; x < x->x; x++)
        x (x, " %d", x->x[x]);
    x (x, " :uniqOperators");
    for (x = 0; x < x->x; x++)
        x (x, " %u", x->x[x]);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="673" endline="684">
static void x (StringInfo x, Hash *x) {
    x ("HASH");
    x (x, (x *) x);
    WRITE_OID_FIELD (x);
    WRITE_INT_FIELD (x);
    WRITE_OID_FIELD (x);
    WRITE_INT_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="686" endline="710">
static void x (StringInfo x, SetOp *x) {
    int x;
    x ("SETOP");
    x (x, (x *) x);
    x (x, x);
    x (x, x);
    WRITE_INT_FIELD (x);
    x (x, " :dupColIdx");
    for (x = 0; x < x->x; x++)
        x (x, " %d", x->x[x]);
    x (x, " :dupOperators");
    for (x = 0; x < x->x; x++)
        x (x, " %u", x->x[x]);
    WRITE_INT_FIELD (x);
    WRITE_INT_FIELD (x);
    WRITE_LONG_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="712" endline="721">
static void x (StringInfo x, Limit *x) {
    x ("LIMIT");
    x (x, (x *) x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="723" endline="732">
static void x (StringInfo x, PlanInvalItem *x) {
    x ("PLANINVALITEM");
    WRITE_INT_FIELD (x);
    x (x, " :tupleId (%u,%u)", x (& x -> x), x (& x -> x));
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="740" endline="747">
static void x (StringInfo x, Alias *x) {
    x ("ALIAS");
    WRITE_STRING_FIELD (x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="749" endline="764">
static void x (StringInfo x, RangeVar *x) {
    x ("RANGEVAR");
    WRITE_STRING_FIELD (x);
    WRITE_STRING_FIELD (x);
    x (x, x);
    WRITE_BOOL_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="766" endline="776">
static void x (StringInfo x, IntoClause *x) {
    x ("INTOCLAUSE");
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    x (x, x);
    WRITE_STRING_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="778" endline="791">
static void x (StringInfo x, Var *x) {
    x ("VAR");
    WRITE_UINT_FIELD (x);
    WRITE_INT_FIELD (x);
    WRITE_OID_FIELD (x);
    WRITE_INT_FIELD (x);
    WRITE_UINT_FIELD (x);
    WRITE_UINT_FIELD (x);
    WRITE_INT_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="793" endline="810">
static void x (StringInfo x, Const *x) {
    x ("CONST");
    WRITE_OID_FIELD (x);
    WRITE_INT_FIELD (x);
    WRITE_INT_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_LOCATION_FIELD (x);
    x (x, " :constvalue ");
    if (x->x)
        x (x, "<>");
    else
        x (x, x->x, x->x, x->x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="812" endline="822">
static void x (StringInfo x, Param *x) {
    x ("PARAM");
    x (x, x);
    WRITE_INT_FIELD (x);
    WRITE_OID_FIELD (x);
    WRITE_INT_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="824" endline="836">
static void x (StringInfo x, Aggref *x) {
    x ("AGGREF");
    WRITE_OID_FIELD (x);
    WRITE_OID_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_UINT_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="838" endline="850">
static void x (StringInfo x, WindowFunc *x) {
    x ("WINDOWFUNC");
    WRITE_OID_FIELD (x);
    WRITE_OID_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_UINT_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="852" endline="864">
static void x (StringInfo x, ArrayRef *x) {
    x ("ARRAYREF");
    WRITE_OID_FIELD (x);
    WRITE_OID_FIELD (x);
    WRITE_INT_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="866" endline="877">
static void x (StringInfo x, FuncExpr *x) {
    x ("FUNCEXPR");
    WRITE_OID_FIELD (x);
    WRITE_OID_FIELD (x);
    WRITE_BOOL_FIELD (x);
    x (x, x);
    WRITE_NODE_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="879" endline="890">
static void x (StringInfo x, OpExpr *x) {
    x ("OPEXPR");
    WRITE_OID_FIELD (x);
    WRITE_OID_FIELD (x);
    WRITE_OID_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="892" endline="903">
static void x (StringInfo x, DistinctExpr *x) {
    x ("DISTINCTEXPR");
    WRITE_OID_FIELD (x);
    WRITE_OID_FIELD (x);
    WRITE_OID_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="905" endline="915">
static void x (StringInfo x, ScalarArrayOpExpr *x) {
    x ("SCALARARRAYOPEXPR");
    WRITE_OID_FIELD (x);
    WRITE_OID_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="917" endline="942">
static void x (StringInfo x, BoolExpr *x) {
    char *x = x;
    x ("BOOLEXPR");
    switch (x->x) {
    case x :
        x = "and";
        break;
    case x :
        x = "or";
        break;
    case x :
        x = "not";
        break;
    }
    x (x, " :boolop ");
    x (x, x);
    WRITE_NODE_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="944" endline="954">
static void x (StringInfo x, SubLink *x) {
    x ("SUBLINK");
    x (x, x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="956" endline="975">
static void x (StringInfo x, SubPlan *x) {
    x ("SUBPLAN");
    x (x, x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_INT_FIELD (x);
    WRITE_STRING_FIELD (x);
    WRITE_OID_FIELD (x);
    WRITE_INT_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    x (x, "%.2f");
    x (x, "%.2f");
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="977" endline="983">
static void x (StringInfo x, AlternativeSubPlan *x) {
    x ("ALTERNATIVESUBPLAN");
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="985" endline="994">
static void x (StringInfo x, FieldSelect *x) {
    x ("FIELDSELECT");
    WRITE_NODE_FIELD (x);
    WRITE_INT_FIELD (x);
    WRITE_OID_FIELD (x);
    WRITE_INT_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="996" endline="1005">
static void x (StringInfo x, FieldStore *x) {
    x ("FIELDSTORE");
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_OID_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1007" endline="1017">
static void x (StringInfo x, RelabelType *x) {
    x ("RELABELTYPE");
    WRITE_NODE_FIELD (x);
    WRITE_OID_FIELD (x);
    WRITE_INT_FIELD (x);
    x (x, x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1019" endline="1028">
static void x (StringInfo x, CoerceViaIO *x) {
    x ("COERCEVIAIO");
    WRITE_NODE_FIELD (x);
    WRITE_OID_FIELD (x);
    x (x, x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1030" endline="1042">
static void x (StringInfo x, ArrayCoerceExpr *x) {
    x ("ARRAYCOERCEEXPR");
    WRITE_NODE_FIELD (x);
    WRITE_OID_FIELD (x);
    WRITE_OID_FIELD (x);
    WRITE_INT_FIELD (x);
    WRITE_BOOL_FIELD (x);
    x (x, x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1044" endline="1053">
static void x (StringInfo x, ConvertRowtypeExpr *x) {
    x ("CONVERTROWTYPEEXPR");
    WRITE_NODE_FIELD (x);
    WRITE_OID_FIELD (x);
    x (x, x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1055" endline="1065">
static void x (StringInfo x, CaseExpr *x) {
    x ("CASE");
    WRITE_OID_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1067" endline="1075">
static void x (StringInfo x, CaseWhen *x) {
    x ("WHEN");
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1077" endline="1084">
static void x (StringInfo x, CaseTestExpr *x) {
    x ("CASETESTEXPR");
    WRITE_OID_FIELD (x);
    WRITE_INT_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1086" endline="1096">
static void x (StringInfo x, ArrayExpr *x) {
    x ("ARRAY");
    WRITE_OID_FIELD (x);
    WRITE_OID_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1098" endline="1108">
static void x (StringInfo x, RowExpr *x) {
    x ("ROW");
    WRITE_NODE_FIELD (x);
    WRITE_OID_FIELD (x);
    x (x, x);
    WRITE_NODE_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1110" endline="1120">
static void x (StringInfo x, RowCompareExpr *x) {
    x ("ROWCOMPARE");
    x (x, x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1122" endline="1130">
static void x (StringInfo x, CoalesceExpr *x) {
    x ("COALESCE");
    WRITE_OID_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1132" endline="1141">
static void x (StringInfo x, MinMaxExpr *x) {
    x ("MINMAX");
    WRITE_OID_FIELD (x);
    x (x, x);
    WRITE_NODE_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1143" endline="1157">
static void x (StringInfo x, XmlExpr *x) {
    x ("XMLEXPR");
    x (x, x);
    WRITE_STRING_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    x (x, x);
    WRITE_OID_FIELD (x);
    WRITE_INT_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1159" endline="1170">
static void x (StringInfo x, NullIfExpr *x) {
    x ("NULLIFEXPR");
    WRITE_OID_FIELD (x);
    WRITE_OID_FIELD (x);
    WRITE_OID_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1172" endline="1179">
static void x (StringInfo x, NullTest *x) {
    x ("NULLTEST");
    WRITE_NODE_FIELD (x);
    x (x, x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1181" endline="1188">
static void x (StringInfo x, BooleanTest *x) {
    x ("BOOLEANTEST");
    WRITE_NODE_FIELD (x);
    x (x, x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1190" endline="1200">
static void x (StringInfo x, CoerceToDomain *x) {
    x ("COERCETODOMAIN");
    WRITE_NODE_FIELD (x);
    WRITE_OID_FIELD (x);
    WRITE_INT_FIELD (x);
    x (x, x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1202" endline="1210">
static void x (StringInfo x, CoerceToDomainValue *x) {
    x ("COERCETODOMAINVALUE");
    WRITE_OID_FIELD (x);
    WRITE_INT_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1212" endline="1220">
static void x (StringInfo x, SetToDefault *x) {
    x ("SETTODEFAULT");
    WRITE_OID_FIELD (x);
    WRITE_INT_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1222" endline="1230">
static void x (StringInfo x, CurrentOfExpr *x) {
    x ("CURRENTOFEXPR");
    WRITE_UINT_FIELD (x);
    WRITE_STRING_FIELD (x);
    WRITE_INT_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1232" endline="1244">
static void x (StringInfo x, TargetEntry *x) {
    x ("TARGETENTRY");
    WRITE_NODE_FIELD (x);
    WRITE_INT_FIELD (x);
    WRITE_STRING_FIELD (x);
    WRITE_UINT_FIELD (x);
    WRITE_OID_FIELD (x);
    WRITE_INT_FIELD (x);
    WRITE_BOOL_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1246" endline="1252">
static void x (StringInfo x, RangeTblRef *x) {
    x ("RANGETBLREF");
    WRITE_INT_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1254" endline="1267">
static void x (StringInfo x, JoinExpr *x) {
    x ("JOINEXPR");
    x (x, x);
    WRITE_BOOL_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_INT_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1269" endline="1276">
static void x (StringInfo x, FromExpr *x) {
    x ("FROMEXPR");
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1289" endline="1296">
static void x (StringInfo x, Path *x) {
    x (x, x);
    x (x, "%.2f");
    x (x, "%.2f");
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1301" endline="1310">
static void x (StringInfo x, JoinPath *x) {
    x (x, (x *) x);
    x (x, x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1312" endline="1318">
static void x (StringInfo x, Path *x) {
    x ("PATH");
    x (x, (x *) x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1320" endline="1335">
static void x (StringInfo x, IndexPath *x) {
    x ("INDEXPATH");
    x (x, (x *) x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_BOOL_FIELD (x);
    x (x, x);
    x (x, "%.2f");
    x (x, "%.4f");
    x (x, "%.0f");
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1337" endline="1347">
static void x (StringInfo x, BitmapHeapPath *x) {
    x ("BITMAPHEAPPATH");
    x (x, (x *) x);
    WRITE_NODE_FIELD (x);
    WRITE_BOOL_FIELD (x);
    x (x, "%.0f");
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1349" endline="1358">
static void x (StringInfo x, BitmapAndPath *x) {
    x ("BITMAPANDPATH");
    x (x, (x *) x);
    WRITE_NODE_FIELD (x);
    x (x, "%.4f");
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1360" endline="1369">
static void x (StringInfo x, BitmapOrPath *x) {
    x ("BITMAPORPATH");
    x (x, (x *) x);
    WRITE_NODE_FIELD (x);
    x (x, "%.4f");
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1371" endline="1379">
static void x (StringInfo x, TidPath *x) {
    x ("TIDPATH");
    x (x, (x *) x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1381" endline="1389">
static void x (StringInfo x, AppendPath *x) {
    x ("APPENDPATH");
    x (x, (x *) x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1391" endline="1399">
static void x (StringInfo x, ResultPath *x) {
    x ("RESULTPATH");
    x (x, (x *) x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1401" endline="1409">
static void x (StringInfo x, MaterialPath *x) {
    x ("MATERIALPATH");
    x (x, (x *) x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1411" endline="1423">
static void x (StringInfo x, UniquePath *x) {
    x ("UNIQUEPATH");
    x (x, (x *) x);
    WRITE_NODE_FIELD (x);
    x (x, x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    x (x, "%.0f");
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1425" endline="1431">
static void x (StringInfo x, NestPath *x) {
    x ("NESTPATH");
    x (x, (x *) x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1433" endline="1443">
static void x (StringInfo x, MergePath *x) {
    x ("MERGEPATH");
    x (x, (x *) x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1445" endline="1454">
static void x (StringInfo x, HashPath *x) {
    x ("HASHPATH");
    x (x, (x *) x);
    WRITE_NODE_FIELD (x);
    WRITE_INT_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1456" endline="1471">
static void x (StringInfo x, PlannerGlobal *x) {
    x ("PLANNERGLOBAL");
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_BITMAPSET_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_UINT_FIELD (x);
    WRITE_BOOL_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1473" endline="1508">
static void x (StringInfo x, PlannerInfo *x) {
    x ("PLANNERINFO");
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_UINT_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    x (x, "%.0f");
    x (x, "%.4f");
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_INT_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1510" endline="1539">
static void x (StringInfo x, RelOptInfo *x) {
    x ("RELOPTINFO");
    x (x, x);
    WRITE_BITMAPSET_FIELD (x);
    x (x, "%.0f");
    WRITE_INT_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_UINT_FIELD (x);
    x (x, x);
    WRITE_INT_FIELD (x);
    WRITE_INT_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_UINT_FIELD (x);
    x (x, "%.0f");
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BITMAPSET_FIELD (x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1541" endline="1556">
static void x (StringInfo x, IndexOptInfo *x) {
    x ("INDEXOPTINFO");
    WRITE_OID_FIELD (x);
    WRITE_UINT_FIELD (x);
    x (x, "%.0f");
    WRITE_INT_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1558" endline="1580">
static void x (StringInfo x, EquivalenceClass *x) {
    while (x->x)
        x = x->x;
    x ("EQUIVALENCECLASS");
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_BITMAPSET_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_UINT_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1582" endline="1592">
static void x (StringInfo x, EquivalenceMember *x) {
    x ("EQUIVALENCEMEMBER");
    WRITE_NODE_FIELD (x);
    WRITE_BITMAPSET_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_OID_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1594" endline="1603">
static void x (StringInfo x, PathKey *x) {
    x ("PATHKEY");
    WRITE_NODE_FIELD (x);
    WRITE_OID_FIELD (x);
    WRITE_INT_FIELD (x);
    WRITE_BOOL_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1605" endline="1632">
static void x (StringInfo x, RestrictInfo *x) {
    x ("RESTRICTINFO");
    WRITE_NODE_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BITMAPSET_FIELD (x);
    WRITE_BITMAPSET_FIELD (x);
    WRITE_BITMAPSET_FIELD (x);
    WRITE_BITMAPSET_FIELD (x);
    WRITE_BITMAPSET_FIELD (x);
    WRITE_NODE_FIELD (x);
    x (x, "%.4f");
    x (x, "%.4f");
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_OID_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1634" endline="1642">
static void x (StringInfo x, InnerIndexscanInfo *x) {
    x ("INNERINDEXSCANINFO");
    WRITE_BITMAPSET_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1644" endline="1653">
static void x (StringInfo x, PlaceHolderVar *x) {
    x ("PLACEHOLDERVAR");
    WRITE_NODE_FIELD (x);
    WRITE_BITMAPSET_FIELD (x);
    WRITE_UINT_FIELD (x);
    WRITE_UINT_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1655" endline="1668">
static void x (StringInfo x, SpecialJoinInfo *x) {
    x ("SPECIALJOININFO");
    WRITE_BITMAPSET_FIELD (x);
    WRITE_BITMAPSET_FIELD (x);
    WRITE_BITMAPSET_FIELD (x);
    WRITE_BITMAPSET_FIELD (x);
    x (x, x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1670" endline="1681">
static void x (StringInfo x, AppendRelInfo *x) {
    x ("APPENDRELINFO");
    WRITE_UINT_FIELD (x);
    WRITE_UINT_FIELD (x);
    WRITE_OID_FIELD (x);
    WRITE_OID_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_OID_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1683" endline="1694">
static void x (StringInfo x, PlaceHolderInfo *x) {
    x ("PLACEHOLDERINFO");
    WRITE_UINT_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_BITMAPSET_FIELD (x);
    WRITE_BITMAPSET_FIELD (x);
    WRITE_BITMAPSET_FIELD (x);
    WRITE_INT_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1696" endline="1703">
static void x (StringInfo x, PlannerParamItem *x) {
    x ("PLANNERPARAMITEM");
    WRITE_NODE_FIELD (x);
    WRITE_UINT_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1711" endline="1723">
static void x (StringInfo x, CreateStmt *x) {
    x ("CREATESTMT");
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    x (x, x);
    WRITE_STRING_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1725" endline="1741">
static void x (StringInfo x, IndexStmt *x) {
    x ("INDEXSTMT");
    WRITE_STRING_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_STRING_FIELD (x);
    WRITE_STRING_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1743" endline="1749">
static void x (StringInfo x, NotifyStmt *x) {
    x ("NOTIFY");
    WRITE_STRING_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1751" endline="1759">
static void x (StringInfo x, DeclareCursorStmt *x) {
    x ("DECLARECURSOR");
    WRITE_STRING_FIELD (x);
    WRITE_INT_FIELD (x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1761" endline="1784">
static void x (StringInfo x, SelectStmt *x) {
    x ("SELECT");
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    x (x, x);
    WRITE_BOOL_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1786" endline="1798">
static void x (StringInfo x, FuncCall *x) {
    x ("FUNCCALL");
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1800" endline="1809">
static void x (StringInfo x, DefElem *x) {
    x ("DEFELEM");
    WRITE_STRING_FIELD (x);
    WRITE_STRING_FIELD (x);
    WRITE_NODE_FIELD (x);
    x (x, x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1811" endline="1818">
static void x (StringInfo x, InhRelation *x) {
    x ("INHRELATION");
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1820" endline="1828">
static void x (StringInfo x, LockingClause *x) {
    x ("LOCKINGCLAUSE");
    WRITE_NODE_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1830" endline="1839">
static void x (StringInfo x, XmlSerialize *x) {
    x ("XMLSERIALIZE");
    x (x, x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1841" endline="1854">
static void x (StringInfo x, ColumnDef *x) {
    x ("COLUMNDEF");
    WRITE_STRING_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_INT_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1856" endline="1869">
static void x (StringInfo x, TypeName *x) {
    x ("TYPENAME");
    WRITE_NODE_FIELD (x);
    WRITE_OID_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_INT_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1871" endline="1879">
static void x (StringInfo x, TypeCast *x) {
    x ("TYPECAST");
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1881" endline="1891">
static void x (StringInfo x, IndexElem *x) {
    x ("INDEXELEM");
    WRITE_STRING_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    x (x, x);
    x (x, x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1893" endline="1948">
static void x (StringInfo x, Query *x) {
    x ("QUERY");
    x (x, x);
    x (x, x);
    WRITE_BOOL_FIELD (x);
    if (x->x) {
        switch (x (x->x)) {
        case x :
        case x :
        case x :
        case x :
            x (x);
            break;
        default :
            x (x, " :utilityStmt ?");
            break;
        }
    }
    else
        x (x, " :utilityStmt <>");
    WRITE_INT_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1950" endline="1959">
static void x (StringInfo x, SortGroupClause *x) {
    x ("SORTGROUPCLAUSE");
    WRITE_UINT_FIELD (x);
    WRITE_OID_FIELD (x);
    WRITE_OID_FIELD (x);
    WRITE_BOOL_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1961" endline="1973">
static void x (StringInfo x, WindowClause *x) {
    x ("WINDOWCLAUSE");
    WRITE_STRING_FIELD (x);
    WRITE_STRING_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_INT_FIELD (x);
    WRITE_UINT_FIELD (x);
    WRITE_BOOL_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1975" endline="1985">
static void x (StringInfo x, RowMarkClause *x) {
    x ("ROWMARKCLAUSE");
    WRITE_UINT_FIELD (x);
    WRITE_UINT_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1987" endline="1995">
static void x (StringInfo x, WithClause *x) {
    x ("WITHCLAUSE");
    WRITE_NODE_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1997" endline="2011">
static void x (StringInfo x, CommonTableExpr *x) {
    x ("COMMONTABLEEXPR");
    WRITE_STRING_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_LOCATION_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_INT_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2013" endline="2025">
static void x (StringInfo x, SetOperationStmt *x) {
    x ("SETOPERATIONSTMT");
    x (x, x);
    WRITE_BOOL_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2027" endline="2076">
static void x (StringInfo x, RangeTblEntry *x) {
    x ("RTE");
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    x (x, x);
    switch (x->x) {
    case x :
    case x :
        x (x);
        break;
    case x :
        x (x);
        break;
    case x :
        x (x, x);
        WRITE_NODE_FIELD (x);
        break;
    case x :
        x (x);
        WRITE_NODE_FIELD (x);
        WRITE_NODE_FIELD (x);
        break;
    case x :
        x (x);
        break;
    case x :
        x (x);
        WRITE_UINT_FIELD (x);
        WRITE_BOOL_FIELD (x);
        WRITE_NODE_FIELD (x);
        WRITE_NODE_FIELD (x);
        break;
    default :
        x (x, "unrecognized RTE kind: %d", (int) x->x);
        break;
    }
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_UINT_FIELD (x);
    WRITE_OID_FIELD (x);
    WRITE_BITMAPSET_FIELD (x);
    WRITE_BITMAPSET_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2078" endline="2132">
static void x (StringInfo x, A_Expr *x) {
    x ("AEXPR");
    switch (x->x) {
    case x :
        x (x, " ");
        WRITE_NODE_FIELD (x);
        break;
    case x :
        x (x, " AND");
        break;
    case x :
        x (x, " OR");
        break;
    case x :
        x (x, " NOT");
        break;
    case x :
        x (x, " ");
        WRITE_NODE_FIELD (x);
        x (x, " ANY ");
        break;
    case x :
        x (x, " ");
        WRITE_NODE_FIELD (x);
        x (x, " ALL ");
        break;
    case x :
        x (x, " DISTINCT ");
        WRITE_NODE_FIELD (x);
        break;
    case x :
        x (x, " NULLIF ");
        WRITE_NODE_FIELD (x);
        break;
    case x :
        x (x, " OF ");
        WRITE_NODE_FIELD (x);
        break;
    case x :
        x (x, " IN ");
        WRITE_NODE_FIELD (x);
        break;
    default :
        x (x, " ??");
        break;
    }
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2134" endline="2167">
static void x (StringInfo x, Value *x) {
    switch (x->x) {
    case x :
        x (x, "%ld", x->x.x);
        break;
    case x :
        x (x, x->x.x);
        break;
    case x :
        x (x, '"');
        x (x, x -> x.x);
        x (x, '"');
        break;
    case x :
        x (x, x->x.x);
        break;
    case x :
        x (x, "NULL");
        break;
    default :
        x (x, "unrecognized node type: %d", (int) x->x);
        break;
    }
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2169" endline="2176">
static void x (StringInfo x, ColumnRef *x) {
    x ("COLUMNREF");
    WRITE_NODE_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2178" endline="2185">
static void x (StringInfo x, ParamRef *x) {
    x ("PARAMREF");
    WRITE_INT_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2187" endline="2195">
static void x (StringInfo x, A_Const *x) {
    x ("A_CONST");
    x (x, " :val ");
    x (x, & (x -> x));
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2197" endline="2201">
static void x (StringInfo x, A_Star *x) {
    x ("A_STAR");
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2203" endline="2210">
static void x (StringInfo x, A_Indices *x) {
    x ("A_INDICES");
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2212" endline="2219">
static void x (StringInfo x, A_Indirection *x) {
    x ("A_INDIRECTION");
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2221" endline="2228">
static void x (StringInfo x, A_ArrayExpr *x) {
    x ("A_ARRAYEXPR");
    WRITE_NODE_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2230" endline="2239">
static void x (StringInfo x, ResTarget *x) {
    x ("RESTARGET");
    WRITE_STRING_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2241" endline="2251">
static void x (StringInfo x, SortBy *x) {
    x ("SORTBY");
    WRITE_NODE_FIELD (x);
    x (x, x);
    x (x, x);
    WRITE_NODE_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2253" endline="2264">
static void x (StringInfo x, WindowDef *x) {
    x ("WINDOWDEF");
    WRITE_STRING_FIELD (x);
    WRITE_STRING_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_INT_FIELD (x);
    WRITE_LOCATION_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2266" endline="2273">
static void x (StringInfo x, RangeSubselect *x) {
    x ("RANGESUBSELECT");
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2275" endline="2283">
static void x (StringInfo x, RangeFunction *x) {
    x ("RANGEFUNCTION");
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2285" endline="2329">
static void x (StringInfo x, Constraint *x) {
    x ("CONSTRAINT");
    WRITE_STRING_FIELD (x);
    x (x, " :contype ");
    switch (x->x) {
    case x :
        x (x, "PRIMARY_KEY");
        WRITE_NODE_FIELD (x);
        WRITE_NODE_FIELD (x);
        WRITE_STRING_FIELD (x);
        break;
    case x :
        x (x, "UNIQUE");
        WRITE_NODE_FIELD (x);
        WRITE_NODE_FIELD (x);
        WRITE_STRING_FIELD (x);
        break;
    case x :
        x (x, "CHECK");
        WRITE_NODE_FIELD (x);
        WRITE_STRING_FIELD (x);
        break;
    case x :
        x (x, "DEFAULT");
        WRITE_NODE_FIELD (x);
        WRITE_STRING_FIELD (x);
        break;
    case x :
        x (x, "NOT_NULL");
        break;
    default :
        x (x, "<unrecognized_constraint>");
        break;
    }
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2331" endline="2346">
static void x (StringInfo x, FkConstraint *x) {
    x ("FKCONSTRAINT");
    WRITE_STRING_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_NODE_FIELD (x);
    WRITE_CHAR_FIELD (x);
    WRITE_CHAR_FIELD (x);
    WRITE_CHAR_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
    WRITE_BOOL_FIELD (x);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2353" endline="2805">
static void x (StringInfo x, void *x) {
    if (x == x)
        x (x, "<>");
    else if (x (x, x) || x (x, x) || x (x, x))
        x (x, x);
    else if (x (x, x) || x (x, x) || x (x, x) || x (x, x)) {
        x (x, x);
    }
    else {
        x (x, '{');
        switch (x (x)) {
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        case x :
            x (x, x);
            break;
        default :
            x (x, "could not dump unrecognized node type: %d", (int) x (x));
            break;
        }
        x (x, '}');
    }
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2811" endline="2820">
char *x (void *x) {
    StringInfoData x;
    x (& x);
    x (& x, x);
    return x.x;
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="86" endline="97">
void x (StringInfo x, char x) {
    x (x);
    x->x = x;
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="103" endline="107">
void x (StringInfo x, int x) {
    x (x, x);
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="113" endline="117">
void x (StringInfo x, const char *x, int x) {
    x (x, x, x);
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="129" endline="149">
void x (StringInfo x, const char *x, int x, x x) {
    int x = x ? 4 : 0;
    char *x;
    x = x (x, x);
    if (x != x) {
        x = x (x);
        x (x, x + x, 4);
        x (x, x, x);
        x (x);
    }
    else {
        x (x, x + x, 4);
        x (x, x, x);
    }
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="161" endline="175">
void x (StringInfo x, const char *x, int x) {
    char *x;
    x = x (x, x);
    if (x != x) {
        x = x (x);
        x (x, x, x);
        x (x);
    }
    else
        x (x, x, x);
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="184" endline="199">
void x (StringInfo x, const char *x) {
    int x = x (x);
    char *x;
    x = x (x, x);
    if (x != x) {
        x = x (x);
        x (x, x, x + 1);
        x (x);
    }
    else
        x (x, x, x +1);
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="216" endline="228">
void x (StringInfo x, const char *x) {
    while (*x) {
        char x = *x++;
        if (x (x))
            x = '?';
        x (x, x);
    }
    x (x, '\0');
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="234" endline="259">
void x (StringInfo x, int x, int x) {
    unsigned char x;
    x x;
    x x;
    switch (x) {
    case 1 :
        x = (unsigned char) x;
        x (x, (char *) & x, 1);
        break;
    case 2 :
        x = x ((x) x);
        x (x, (char *) & x, 2);
        break;
    case 4 :
        x = x ((x) x);
        x (x, (char *) & x, 4);
        break;
    default :
        x (x, "unsupported integer size %d", x);
        break;
    }
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="269" endline="288">
void x (StringInfo x, x x) {
    x x;
    x = (x) (x >> 32);
    x = x (x);
    x (x, (char *) & x, 4);
    x = (x) x;
    x = x (x);
    x (x, (char *) & x, 4);
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="301" endline="314">
void x (StringInfo x, x x) {
    union {
        x x;
        x x;
    } x;
    x.x = x;
    x.x = x (x.x);
    x (x, (char *) & x.x, 4);
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="327" endline="360">
void x (StringInfo x, x x) {
    union {
        x x;
        x x;
    } x;
    x.x = x;
    x (x, x.x);
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="369" endline="377">
void x (StringInfo x) {
    (void) x (x->x, x->x, x->x);
    x (x -> x);
    x->x = x;
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="384" endline="393">
void x (StringInfo x) {
    x (x);
    x (x, '\0');
    x (x, '\0');
    x (x, '\0');
    x (x, '\0');
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="404" endline="414">
x *x (StringInfo x) {
    x *x = (x *) x->x;
    x (x -> x >= x);
    x (x, x -> x);
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="425" endline="439">
void x (char x, const char *x) {
    int x = x (x);
    char *x;
    x = x (x, x);
    if (x != x) {
        (void) x (x, x, x (x) +1);
        x (x);
        return;
    }
    (void) x (x, x, x +1);
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="446" endline="450">
void x (char x) {
    (void) x (x, x, 0);
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="457" endline="465">
int x (StringInfo x) {
    if (x->x >= x->x)
        x (x, (x (x), x ("no data left in message")));
    return (unsigned char) x->x[x->x++];
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="473" endline="501">
unsigned int x (StringInfo x, int x) {
    unsigned int x;
    unsigned char x;
    x x;
    x x;
    switch (x) {
    case 1 :
        x (x, (char *) &x, 1);
        x = x;
        break;
    case 2 :
        x (x, (char *) &x, 2);
        x = x (x);
        break;
    case 4 :
        x (x, (char *) &x, 4);
        x = x (x);
        break;
    default :
        x (x, "unsupported integer size %d", x);
        x = 0;
        break;
    }
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="511" endline="537">
x x (StringInfo x) {
    x x;
    x x;
    x x;
    x (x, (char *) & x, 4);
    x (x, (char *) & x, 4);
    x = x (x);
    x = x (x);
    x = x;
    x <<= 32;
    x |= x;
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="545" endline="556">
x x (StringInfo x) {
    union {
        x x;
        x x;
    } x;
    x.x = x (x, 4);
    return x.x;
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="564" endline="594">
x x (StringInfo x) {
    union {
        x x;
        x x;
    } x;
    x.x = x (x);
    return x.x;
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="603" endline="615">
const char *x (StringInfo x, int x) {
    const char *x;
    if (x < 0 || x > (x->x - x->x))
        x (x, (x (x), x ("insufficient data left in message")));
    x = &x->x[x->x];
    x->x += x;
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="623" endline="632">
void x (StringInfo x, char *x, int x) {
    if (x < 0 || x > (x->x - x->x))
        x (x, (x (x), x ("insufficient data left in message")));
    x (x, & x -> x [x -> x], x);
    x->x += x;
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="641" endline="665">
char *x (StringInfo x, int x, int *x) {
    char *x;
    char *x;
    if (x < 0 || x > (x->x - x->x))
        x (x, (x (x), x ("insufficient data left in message")));
    x = &x->x[x->x];
    x->x += x;
    x = x (x, x);
    if (x != x)
        *x = x (x);
    else {
        x = (char *) x (x +1);
        x (x, x, x);
        x[x] = '\0';
        *x = x;
    }
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="674" endline="695">
const char *x (StringInfo x) {
    char *x;
    int x;
    x = &x->x[x->x];
    x = x (x);
    if (x->x + x >= x->x)
        x (x, (x (x), x ("invalid string in message")));
    x->x += x + 1;
    return x (x, x);
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="701" endline="708">
void x (StringInfo x) {
    if (x->x != x->x)
        x (x, (x (x), x ("invalid message format")));
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="148" endline="184">
static Bitmapset *x (void) {
    Bitmapset *x = x;
    x ();
    x = x (&x);
    if (x == x)
        x (x, "incomplete Bitmapset structure");
    if (x != 1 || x[0] != '(')
        x (x, "unrecognized token: \"%.*s\"", x, x);
    x = x (&x);
    if (x == x)
        x (x, "incomplete Bitmapset structure");
    if (x != 1 || x[0] != 'b')
        x (x, "unrecognized token: \"%.*s\"", x, x);
    for (;;) {
        int x;
        char *x;
        x = x (&x);
        if (x == x)
            x (x, "unterminated Bitmapset structure");
        if (x == 1 && x[0] == ')')
            break;
        x = (int) x (x, &x, 10);
        if (x != x + x)
            x (x, "unrecognized integer: \"%.*s\"", x, x);
        x = x (x, x);
    }
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="190" endline="222">
static Query *x (void) {
    READ_LOCALS (x);
    x (x, x);
    x (x, x);
    READ_BOOL_FIELD (x);
    READ_NODE_FIELD (x);
    READ_INT_FIELD (x);
    READ_NODE_FIELD (x);
    READ_BOOL_FIELD (x);
    READ_BOOL_FIELD (x);
    READ_BOOL_FIELD (x);
    READ_BOOL_FIELD (x);
    READ_BOOL_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="227" endline="235">
static NotifyStmt *x (void) {
    READ_LOCALS (x);
    READ_STRING_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="240" endline="250">
static DeclareCursorStmt *x (void) {
    READ_LOCALS (x);
    READ_STRING_FIELD (x);
    READ_INT_FIELD (x);
    READ_NODE_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="255" endline="266">
static SortGroupClause *x (void) {
    READ_LOCALS (x);
    READ_UINT_FIELD (x);
    READ_OID_FIELD (x);
    READ_OID_FIELD (x);
    READ_BOOL_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="271" endline="285">
static WindowClause *x (void) {
    READ_LOCALS (x);
    READ_STRING_FIELD (x);
    READ_STRING_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_INT_FIELD (x);
    READ_UINT_FIELD (x);
    READ_BOOL_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="290" endline="302">
static RowMarkClause *x (void) {
    READ_LOCALS (x);
    READ_UINT_FIELD (x);
    READ_UINT_FIELD (x);
    READ_BOOL_FIELD (x);
    READ_BOOL_FIELD (x);
    READ_BOOL_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="307" endline="323">
static CommonTableExpr *x (void) {
    READ_LOCALS (x);
    READ_STRING_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_LOCATION_FIELD (x);
    READ_BOOL_FIELD (x);
    READ_INT_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="328" endline="342">
static SetOperationStmt *x (void) {
    READ_LOCALS (x);
    x (x, x);
    READ_BOOL_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="349" endline="358">
static Alias *x (void) {
    READ_LOCALS (x);
    READ_STRING_FIELD (x);
    READ_NODE_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="360" endline="376">
static RangeVar *x (void) {
    READ_LOCALS (x);
    x->x = x;
    READ_STRING_FIELD (x);
    READ_STRING_FIELD (x);
    x (x, x);
    READ_BOOL_FIELD (x);
    READ_NODE_FIELD (x);
    READ_LOCATION_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="378" endline="390">
static IntoClause *x (void) {
    READ_LOCALS (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    x (x, x);
    READ_STRING_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="395" endline="410">
static Var *x (void) {
    READ_LOCALS (x);
    READ_UINT_FIELD (x);
    READ_INT_FIELD (x);
    READ_OID_FIELD (x);
    READ_INT_FIELD (x);
    READ_UINT_FIELD (x);
    READ_UINT_FIELD (x);
    READ_INT_FIELD (x);
    READ_LOCATION_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="415" endline="434">
static Const *x (void) {
    READ_LOCALS (x);
    READ_OID_FIELD (x);
    READ_INT_FIELD (x);
    READ_INT_FIELD (x);
    READ_BOOL_FIELD (x);
    READ_BOOL_FIELD (x);
    READ_LOCATION_FIELD (x);
    x = x (&x);
    if (x->x)
        x = x (&x);
    else
        x->x = x (x->x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="439" endline="451">
static Param *x (void) {
    READ_LOCALS (x);
    x (x, x);
    READ_INT_FIELD (x);
    READ_OID_FIELD (x);
    READ_INT_FIELD (x);
    READ_LOCATION_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="456" endline="470">
static Aggref *x (void) {
    READ_LOCALS (x);
    READ_OID_FIELD (x);
    READ_OID_FIELD (x);
    READ_NODE_FIELD (x);
    READ_UINT_FIELD (x);
    READ_BOOL_FIELD (x);
    READ_BOOL_FIELD (x);
    READ_LOCATION_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="475" endline="489">
static WindowFunc *x (void) {
    READ_LOCALS (x);
    READ_OID_FIELD (x);
    READ_OID_FIELD (x);
    READ_NODE_FIELD (x);
    READ_UINT_FIELD (x);
    READ_BOOL_FIELD (x);
    READ_BOOL_FIELD (x);
    READ_LOCATION_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="494" endline="508">
static ArrayRef *x (void) {
    READ_LOCALS (x);
    READ_OID_FIELD (x);
    READ_OID_FIELD (x);
    READ_INT_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="513" endline="526">
static FuncExpr *x (void) {
    READ_LOCALS (x);
    READ_OID_FIELD (x);
    READ_OID_FIELD (x);
    READ_BOOL_FIELD (x);
    x (x, x);
    READ_NODE_FIELD (x);
    READ_LOCATION_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="531" endline="555">
static OpExpr *x (void) {
    READ_LOCALS (x);
    READ_OID_FIELD (x);
    READ_OID_FIELD (x);
    x->x = x;
    READ_OID_FIELD (x);
    READ_BOOL_FIELD (x);
    READ_NODE_FIELD (x);
    READ_LOCATION_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="560" endline="584">
static DistinctExpr *x (void) {
    READ_LOCALS (x);
    READ_OID_FIELD (x);
    READ_OID_FIELD (x);
    x->x = x;
    READ_OID_FIELD (x);
    READ_BOOL_FIELD (x);
    READ_NODE_FIELD (x);
    READ_LOCATION_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="589" endline="612">
static ScalarArrayOpExpr *x (void) {
    READ_LOCALS (x);
    READ_OID_FIELD (x);
    READ_OID_FIELD (x);
    x->x = x;
    READ_BOOL_FIELD (x);
    READ_NODE_FIELD (x);
    READ_LOCATION_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="617" endline="638">
static BoolExpr *x (void) {
    READ_LOCALS (x);
    x = x (&x);
    x = x (&x);
    if (x (x, "and", 3) == 0)
        x->x = x;
    else if (x (x, "or", 2) == 0)
        x->x = x;
    else if (x (x, "not", 3) == 0)
        x->x = x;
    else
        x (x, "unrecognized boolop \"%.*s\"", x, x);
    READ_NODE_FIELD (x);
    READ_LOCATION_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="643" endline="655">
static SubLink *x (void) {
    READ_LOCALS (x);
    x (x, x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_LOCATION_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="664" endline="675">
static FieldSelect *x (void) {
    READ_LOCALS (x);
    READ_NODE_FIELD (x);
    READ_INT_FIELD (x);
    READ_OID_FIELD (x);
    READ_INT_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="680" endline="691">
static FieldStore *x (void) {
    READ_LOCALS (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_OID_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="696" endline="708">
static RelabelType *x (void) {
    READ_LOCALS (x);
    READ_NODE_FIELD (x);
    READ_OID_FIELD (x);
    READ_INT_FIELD (x);
    x (x, x);
    READ_LOCATION_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="713" endline="724">
static CoerceViaIO *x (void) {
    READ_LOCALS (x);
    READ_NODE_FIELD (x);
    READ_OID_FIELD (x);
    x (x, x);
    READ_LOCATION_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="729" endline="743">
static ArrayCoerceExpr *x (void) {
    READ_LOCALS (x);
    READ_NODE_FIELD (x);
    READ_OID_FIELD (x);
    READ_OID_FIELD (x);
    READ_INT_FIELD (x);
    READ_BOOL_FIELD (x);
    x (x, x);
    READ_LOCATION_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="748" endline="759">
static ConvertRowtypeExpr *x (void) {
    READ_LOCALS (x);
    READ_NODE_FIELD (x);
    READ_OID_FIELD (x);
    x (x, x);
    READ_LOCATION_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="764" endline="776">
static CaseExpr *x (void) {
    READ_LOCALS (x);
    READ_OID_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_LOCATION_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="781" endline="791">
static CaseWhen *x (void) {
    READ_LOCALS (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_LOCATION_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="796" endline="805">
static CaseTestExpr *x (void) {
    READ_LOCALS (x);
    READ_OID_FIELD (x);
    READ_INT_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="810" endline="822">
static ArrayExpr *x (void) {
    READ_LOCALS (x);
    READ_OID_FIELD (x);
    READ_OID_FIELD (x);
    READ_NODE_FIELD (x);
    READ_BOOL_FIELD (x);
    READ_LOCATION_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="827" endline="839">
static RowExpr *x (void) {
    READ_LOCALS (x);
    READ_NODE_FIELD (x);
    READ_OID_FIELD (x);
    x (x, x);
    READ_NODE_FIELD (x);
    READ_LOCATION_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="844" endline="856">
static RowCompareExpr *x (void) {
    READ_LOCALS (x);
    x (x, x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="861" endline="871">
static CoalesceExpr *x (void) {
    READ_LOCALS (x);
    READ_OID_FIELD (x);
    READ_NODE_FIELD (x);
    READ_LOCATION_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="876" endline="887">
static MinMaxExpr *x (void) {
    READ_LOCALS (x);
    READ_OID_FIELD (x);
    x (x, x);
    READ_NODE_FIELD (x);
    READ_LOCATION_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="892" endline="908">
static XmlExpr *x (void) {
    READ_LOCALS (x);
    x (x, x);
    READ_STRING_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    x (x, x);
    READ_OID_FIELD (x);
    READ_INT_FIELD (x);
    READ_LOCATION_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="913" endline="937">
static NullIfExpr *x (void) {
    READ_LOCALS (x);
    READ_OID_FIELD (x);
    READ_OID_FIELD (x);
    x->x = x;
    READ_OID_FIELD (x);
    READ_BOOL_FIELD (x);
    READ_NODE_FIELD (x);
    READ_LOCATION_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="942" endline="951">
static NullTest *x (void) {
    READ_LOCALS (x);
    READ_NODE_FIELD (x);
    x (x, x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="956" endline="965">
static BooleanTest *x (void) {
    READ_LOCALS (x);
    READ_NODE_FIELD (x);
    x (x, x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="970" endline="982">
static CoerceToDomain *x (void) {
    READ_LOCALS (x);
    READ_NODE_FIELD (x);
    READ_OID_FIELD (x);
    READ_INT_FIELD (x);
    x (x, x);
    READ_LOCATION_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="987" endline="997">
static CoerceToDomainValue *x (void) {
    READ_LOCALS (x);
    READ_OID_FIELD (x);
    READ_INT_FIELD (x);
    READ_LOCATION_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="1002" endline="1012">
static SetToDefault *x (void) {
    READ_LOCALS (x);
    READ_OID_FIELD (x);
    READ_INT_FIELD (x);
    READ_LOCATION_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="1017" endline="1027">
static CurrentOfExpr *x (void) {
    READ_LOCALS (x);
    READ_UINT_FIELD (x);
    READ_STRING_FIELD (x);
    READ_INT_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="1032" endline="1046">
static TargetEntry *x (void) {
    READ_LOCALS (x);
    READ_NODE_FIELD (x);
    READ_INT_FIELD (x);
    READ_STRING_FIELD (x);
    READ_UINT_FIELD (x);
    READ_OID_FIELD (x);
    READ_INT_FIELD (x);
    READ_BOOL_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="1051" endline="1059">
static RangeTblRef *x (void) {
    READ_LOCALS (x);
    READ_INT_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="1064" endline="1079">
static JoinExpr *x (void) {
    READ_LOCALS (x);
    x (x, x);
    READ_BOOL_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    READ_INT_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="1084" endline="1093">
static FromExpr *x (void) {
    READ_LOCALS (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="1103" endline="1155">
static RangeTblEntry *x (void) {
    READ_LOCALS (x);
    READ_NODE_FIELD (x);
    READ_NODE_FIELD (x);
    x (x, x);
    switch (x->x) {
    case x :
    case x :
        x (x);
        break;
    case x :
        x (x);
        break;
    case x :
        x (x, x);
        READ_NODE_FIELD (x);
        break;
    case x :
        x (x);
        READ_NODE_FIELD (x);
        READ_NODE_FIELD (x);
        break;
    case x :
        x (x);
        break;
    case x :
        x (x);
        READ_UINT_FIELD (x);
        READ_BOOL_FIELD (x);
        READ_NODE_FIELD (x);
        READ_NODE_FIELD (x);
        break;
    default :
        x (x, "unrecognized RTE kind: %d", (int) x->x);
        break;
    }
    READ_BOOL_FIELD (x);
    READ_BOOL_FIELD (x);
    READ_UINT_FIELD (x);
    READ_OID_FIELD (x);
    READ_BITMAPSET_FIELD (x);
    READ_BITMAPSET_FIELD (x);
    x ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="1166" endline="1285">
Node *x (void) {
    void *x;
    x ();
    x = x (&x);
    if (x ("QUERY", 5))
        x = x ();
    else if (x ("SORTGROUPCLAUSE", 15))
        x = x ();
    else if (x ("WINDOWCLAUSE", 12))
        x = x ();
    else if (x ("ROWMARKCLAUSE", 13))
        x = x ();
    else if (x ("COMMONTABLEEXPR", 15))
        x = x ();
    else if (x ("SETOPERATIONSTMT", 16))
        x = x ();
    else if (x ("ALIAS", 5))
        x = x ();
    else if (x ("RANGEVAR", 8))
        x = x ();
    else if (x ("INTOCLAUSE", 10))
        x = x ();
    else if (x ("VAR", 3))
        x = x ();
    else if (x ("CONST", 5))
        x = x ();
    else if (x ("PARAM", 5))
        x = x ();
    else if (x ("AGGREF", 6))
        x = x ();
    else if (x ("WINDOWFUNC", 10))
        x = x ();
    else if (x ("ARRAYREF", 8))
        x = x ();
    else if (x ("FUNCEXPR", 8))
        x = x ();
    else if (x ("OPEXPR", 6))
        x = x ();
    else if (x ("DISTINCTEXPR", 12))
        x = x ();
    else if (x ("SCALARARRAYOPEXPR", 17))
        x = x ();
    else if (x ("BOOLEXPR", 8))
        x = x ();
    else if (x ("SUBLINK", 7))
        x = x ();
    else if (x ("FIELDSELECT", 11))
        x = x ();
    else if (x ("FIELDSTORE", 10))
        x = x ();
    else if (x ("RELABELTYPE", 11))
        x = x ();
    else if (x ("COERCEVIAIO", 11))
        x = x ();
    else if (x ("ARRAYCOERCEEXPR", 15))
        x = x ();
    else if (x ("CONVERTROWTYPEEXPR", 18))
        x = x ();
    else if (x ("CASE", 4))
        x = x ();
    else if (x ("WHEN", 4))
        x = x ();
    else if (x ("CASETESTEXPR", 12))
        x = x ();
    else if (x ("ARRAY", 5))
        x = x ();
    else if (x ("ROW", 3))
        x = x ();
    else if (x ("ROWCOMPARE", 10))
        x = x ();
    else if (x ("COALESCE", 8))
        x = x ();
    else if (x ("MINMAX", 6))
        x = x ();
    else if (x ("XMLEXPR", 7))
        x = x ();
    else if (x ("NULLIFEXPR", 10))
        x = x ();
    else if (x ("NULLTEST", 8))
        x = x ();
    else if (x ("BOOLEANTEST", 11))
        x = x ();
    else if (x ("COERCETODOMAIN", 14))
        x = x ();
    else if (x ("COERCETODOMAINVALUE", 19))
        x = x ();
    else if (x ("SETTODEFAULT", 12))
        x = x ();
    else if (x ("CURRENTOFEXPR", 13))
        x = x ();
    else if (x ("TARGETENTRY", 11))
        x = x ();
    else if (x ("RANGETBLREF", 11))
        x = x ();
    else if (x ("JOINEXPR", 8))
        x = x ();
    else if (x ("FROMEXPR", 8))
        x = x ();
    else if (x ("RTE", 3))
        x = x ();
    else if (x ("NOTIFY", 6))
        x = x ();
    else if (x ("DECLARECURSOR", 13))
        x = x ();
    else {
        x (x, "badly formatted node string \"%.32s\"...", x);
        x = x;
    }
    return (x *) x;
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="1295" endline="1350">
static Datum x (x x) {
    Size x, x;
    int x;
    char *x;
    Datum x;
    char *x;
    x = x (&x);
    x = x (x);
    x = x (&x);
    if (x == x || x[0] != '[')
        x (x, "expected \"[\" to start datum, but got \"%s\"; length = %lu", x ? (const char *) x : "[NULL]", (unsigned long) x);
    if (x) {
        if (x > (x) sizeof (x))
            x (x, "byval datum but length = %lu", (unsigned long) x);
        x = (x) 0;
        x = (char *) (&x);
        for (x = 0; x < (x) sizeof (x); x++) {
            x = x (&x);
            x[x] = (char) x (x);
        }
    }
    else if (x <= 0)
        x = (x) x;
    else {
        x = (char *) x (x);
        for (x = 0; x < x; x++) {
            x = x (&x);
            x[x] = (char) x (x);
        }
        x = x (x);
    }
    x = x (&x);
    if (x == x || x[0] != ']')
        x (x, "expected \"]\" to end datum, but got \"%s\"; length = %lu", x ? (const char *) x : "[NULL]", (unsigned long) x);
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/value.c.ifdefed" startline="22" endline="30">
Value *x (long x) {
    Value *x = x (x);
    x->x = x;
    x->x.x = x;
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/value.c.ifdefed" startline="37" endline="45">
Value *x (char *x) {
    Value *x = x (x);
    x->x = x;
    x->x.x = x;
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/value.c.ifdefed" startline="52" endline="60">
Value *x (char *x) {
    Value *x = x (x);
    x->x = x;
    x->x.x = x;
    return x;
}
</source>
<source file="examples/postgresql//smallpostgresql/value.c.ifdefed" startline="67" endline="75">
Value *x (char *x) {
    Value *x = x (x);
    x->x = x;
    x->x.x = x;
    return x;
}
</source>
