<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="62" endline="79">
static List *x1 (NodeTag x2) {
    List *x1;
    ListCell *x3;
    x3 = (x4 *) x5 (sizeof (*x3));
    x3->x6 = x7;
    x1 = (x8 *) x5 (sizeof (*x1));
    x1->x2 = x2;
    x1->x9 = 1;
    x1->x10 = x3;
    x1->x11 = x3;
    return x1;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="88" endline="98">
static void x1 (List *x2) {
    ListCell *x3;
    x3 = (x4 *) x5 (sizeof (*x3));
    x3->x6 = x2->x7;
    x2->x7 = x3;
    x2->x8++;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="107" endline="118">
static void x1 (List *x2) {
    ListCell *x3;
    x3 = (x4 *) x5 (sizeof (*x3));
    x3->x6 = x7;
    x2->x8->x6 = x3;
    x2->x8 = x3;
    x2->x9++;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="127" endline="140">
List *x1 (List *x2, void *x3) {
    Assert (IsPointerList (x2));
    if (x2 == x4)
        x2 = x5 (x6);
    else
        x7 (x2);
    x8 (x2->x9) = x3;
    x10 (x2);
    return x2;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="145" endline="158">
List *x1 (List *x2, int x3) {
    Assert (IsIntegerList (x2));
    if (x2 == x4)
        x2 = x5 (x6);
    else
        x7 (x2);
    x8 (x2->x9) = x3;
    x10 (x2);
    return x2;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="163" endline="176">
List *x1 (List *x2, Oid x3) {
    Assert (IsOidList (x2));
    if (x2 == x4)
        x2 = x5 (x6);
    else
        x7 (x2);
    x8 (x2->x9) = x3;
    x10 (x2);
    return x2;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="184" endline="200">
static ListCell *x1 (List *x2, ListCell *x3) {
    ListCell *x4;
    x4 = (x5 *) x6 (sizeof (*x4));
    x4->x7 = x3->x7;
    x3->x7 = x4;
    if (x2->x8 == x3)
        x2->x8 = x4;
    x2->x9++;
    return x4;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="208" endline="219">
ListCell *x1 (List *x2, ListCell *x3, void *x4) {
    ListCell *x5;
    Assert (IsPointerList (x2));
    x5 = x6 (x2, x3);
    x7 (x5) = x4;
    x8 (x2);
    return x5;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="221" endline="232">
ListCell *x1 (List *x2, ListCell *x3, int x4) {
    ListCell *x5;
    Assert (IsIntegerList (x2));
    x5 = x6 (x2, x3);
    x7 (x5) = x4;
    x8 (x2);
    return x5;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="234" endline="245">
ListCell *x1 (List *x2, ListCell *x3, Oid x4) {
    ListCell *x5;
    Assert (IsOidList (x2));
    x5 = x6 (x2, x3);
    x7 (x5) = x4;
    x8 (x2);
    return x5;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="258" endline="271">
List *x1 (void *x2, List *x3) {
    Assert (IsPointerList (x3));
    if (x3 == x4)
        x3 = x5 (x6);
    else
        x7 (x3);
    x8 (x3->x9) = x2;
    x10 (x3);
    return x3;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="276" endline="289">
List *x1 (int x2, List *x3) {
    Assert (IsIntegerList (x3));
    if (x3 == x4)
        x3 = x5 (x6);
    else
        x7 (x3);
    x8 (x3->x9) = x2;
    x10 (x3);
    return x3;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="294" endline="307">
List *x1 (Oid x2, List *x3) {
    Assert (IsOidList (x3));
    if (x3 == x4)
        x3 = x5 (x6);
    else
        x7 (x3);
    x8 (x3->x9) = x2;
    x10 (x3);
    return x3;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="320" endline="338">
List *x1 (List *x2, List *x3) {
    if (x2 == x4)
        return x3;
    if (x3 == x4)
        return x2;
    if (x2 == x3)
        x5 (x6, "cannot list_concat() a list to itself");
    x7 (x2 -> x8 == x3 -> x8);
    x2->x9 += x3->x9;
    x2->x10->x11 = x3->x12;
    x2->x10 = x3->x10;
    x13 (x2);
    return x2;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="349" endline="379">
List *x1 (List *x2, int x3) {
    ListCell *x4;
    int x5;
    if (x3 <= 0)
        return x6;
    if (x3 >= x7 (x2))
        return x2;
    x5 = 1;
    foreach (x4, x2) {
        if (x5 == x3) {
            x4->x8 = x9;
            x2->x10 = x4;
            x2->x11 = x3;
            x12 (x2);
            return x2;
        }
        x5++;
    }
    Assert (x13);
    return x2;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="385" endline="403">
static ListCell *x1 (List *x2, int x3) {
    ListCell *x4;
    x5 (x2 != x6);
    x5 (x3 >= 0);
    x5 (x3 < x2 -> x7);
    x8 (x2);
    if (x3 == x2->x7 - 1)
        return x2->x9;
    for (x4 = x2->x10; x3-- > 0; x4 = x4->x11)
        ;
    return x4;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="409" endline="414">
void *x1 (List *x2, int x3) {
    Assert (IsPointerList (x2));
    return x4 (x5 (x2, x3));
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="420" endline="425">
int x1 (List *x2, int x3) {
    Assert (IsIntegerList (x2));
    return x4 (x5 (x2, x3));
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="431" endline="436">
Oid x1 (List *x2, int x3) {
    Assert (IsOidList (x2));
    return x4 (x5 (x2, x3));
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="443" endline="458">
x1 x2 (List *x3, void *x4) {
    ListCell *x5;
    Assert (IsPointerList (x3));
    x6 (x3);
    foreach (x5, x3) {
        if (x7 (x8 (x5), x4))
            return x9;
    }
    return x10;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="464" endline="479">
x1 x2 (List *x3, void *x4) {
    ListCell *x5;
    Assert (IsPointerList (x3));
    x6 (x3);
    foreach (x5, x3) {
        if (x7 (x5) == x4)
            return x8;
    }
    return x9;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="484" endline="499">
x1 x2 (List *x3, int x4) {
    ListCell *x5;
    Assert (IsIntegerList (x3));
    x6 (x3);
    foreach (x5, x3) {
        if (x7 (x5) == x4)
            return x8;
    }
    return x9;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="504" endline="519">
x1 x2 (List *x3, Oid x4) {
    ListCell *x5;
    Assert (IsOidList (x3));
    x6 (x3);
    foreach (x5, x3) {
        if (x7 (x5) == x4)
            return x8;
    }
    return x9;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="527" endline="560">
List *x1 (List *x2, ListCell *x3, ListCell *x4) {
    x5 (x2);
    x6 (x4 != x7 ? x8 (x4) == x3 : x9 (x2) == x3);
    if (x2->x10 == 1) {
        x11 (x2);
        return x12;
    }
    x2->x10--;
    if (x4)
        x4->x13 = x3->x13;
    else
        x2->x14 = x3->x13;
    if (x2->x15 == x3)
        x2->x15 = x4;
    x16 (x3);
    return x2;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="566" endline="586">
List *x1 (List *x2, void *x3) {
    ListCell *x4;
    ListCell *x5;
    Assert (IsPointerList (x2));
    x6 (x2);
    x5 = x7;
    foreach (x4, x2) {
        if (x8 (x9 (x4), x3))
            return x10 (x2, x4, x5);
        x5 = x4;
    }
    return x2;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="589" endline="609">
List *x1 (List *x2, void *x3) {
    ListCell *x4;
    ListCell *x5;
    Assert (IsPointerList (x2));
    x6 (x2);
    x5 = x7;
    foreach (x4, x2) {
        if (x8 (x4) == x3)
            return x9 (x2, x4, x5);
        x5 = x4;
    }
    return x2;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="612" endline="632">
List *x1 (List *x2, int x3) {
    ListCell *x4;
    ListCell *x5;
    Assert (IsIntegerList (x2));
    x6 (x2);
    x5 = x7;
    foreach (x4, x2) {
        if (x8 (x4) == x3)
            return x9 (x2, x4, x5);
        x5 = x4;
    }
    return x2;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="635" endline="655">
List *x1 (List *x2, Oid x3) {
    ListCell *x4;
    ListCell *x5;
    Assert (IsOidList (x2));
    x6 (x2);
    x5 = x7;
    foreach (x4, x2) {
        if (x8 (x4) == x3)
            return x9 (x2, x4, x5);
        x5 = x4;
    }
    return x2;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="665" endline="674">
List *x1 (List *x2) {
    x3 (x2);
    if (x2 == x4)
        return x4;
    return x5 (x2, x6 (x2), x7);
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="696" endline="714">
List *x1 (List *x2, List *x3) {
    List *x4;
    ListCell *x5;
    Assert (IsPointerList (x2));
    Assert (IsPointerList (x3));
    x4 = x6 (x2);
    foreach (x5, x3) {
        if (!x7 (x4, x8 (x5)))
            x4 = x9 (x4, x8 (x5));
    }
    x10 (x4);
    return x4;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="720" endline="738">
List *x1 (List *x2, List *x3) {
    List *x4;
    ListCell *x5;
    Assert (IsPointerList (x2));
    Assert (IsPointerList (x3));
    x4 = x6 (x2);
    foreach (x5, x3) {
        if (!x7 (x4, x8 (x5)))
            x4 = x9 (x4, x8 (x5));
    }
    x10 (x4);
    return x4;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="743" endline="761">
List *x1 (List *x2, List *x3) {
    List *x4;
    ListCell *x5;
    Assert (IsIntegerList (x2));
    Assert (IsIntegerList (x3));
    x4 = x6 (x2);
    foreach (x5, x3) {
        if (!x7 (x4, x8 (x5)))
            x4 = x9 (x4, x8 (x5));
    }
    x10 (x4);
    return x4;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="766" endline="784">
List *x1 (List *x2, List *x3) {
    List *x4;
    ListCell *x5;
    Assert (IsOidList (x2));
    Assert (IsOidList (x3));
    x4 = x6 (x2);
    foreach (x5, x3) {
        if (!x7 (x4, x8 (x5)))
            x4 = x9 (x4, x8 (x5));
    }
    x10 (x4);
    return x4;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="799" endline="820">
List *x1 (List *x2, List *x3) {
    List *x4;
    ListCell *x5;
    if (x2 == x6 || x3 == x6)
        return x6;
    Assert (IsPointerList (x2));
    Assert (IsPointerList (x3));
    x4 = x6;
    foreach (x5, x2) {
        if (x7 (x3, x8 (x5)))
            x4 = x9 (x4, x8 (x5));
    }
    x10 (x4);
    return x4;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="831" endline="851">
List *x1 (List *x2, List *x3) {
    ListCell *x4;
    List *x5 = x6;
    Assert (IsPointerList (x2));
    Assert (IsPointerList (x3));
    if (x3 == x6)
        return x7 (x2);
    foreach (x4, x2) {
        if (!x8 (x3, x9 (x4)))
            x5 = x10 (x5, x9 (x4));
    }
    x11 (x5);
    return x5;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="857" endline="877">
List *x1 (List *x2, List *x3) {
    ListCell *x4;
    List *x5 = x6;
    Assert (IsPointerList (x2));
    Assert (IsPointerList (x3));
    if (x3 == x6)
        return x7 (x2);
    foreach (x4, x2) {
        if (!x8 (x3, x9 (x4)))
            x5 = x10 (x5, x9 (x4));
    }
    x11 (x5);
    return x5;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="882" endline="902">
List *x1 (List *x2, List *x3) {
    ListCell *x4;
    List *x5 = x6;
    Assert (IsIntegerList (x2));
    Assert (IsIntegerList (x3));
    if (x3 == x6)
        return x7 (x2);
    foreach (x4, x2) {
        if (!x8 (x3, x9 (x4)))
            x5 = x10 (x5, x9 (x4));
    }
    x11 (x5);
    return x5;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="907" endline="927">
List *x1 (List *x2, List *x3) {
    ListCell *x4;
    List *x5 = x6;
    Assert (IsOidList (x2));
    Assert (IsOidList (x3));
    if (x3 == x6)
        return x7 (x2);
    foreach (x4, x2) {
        if (!x8 (x3, x9 (x4)))
            x5 = x10 (x5, x9 (x4));
    }
    x11 (x5);
    return x5;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="935" endline="942">
List *x1 (List *x2, void *x3) {
    if (x4 (x2, x3))
        return x2;
    else
        return x5 (x2, x3);
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="948" endline="955">
List *x1 (List *x2, void *x3) {
    if (x4 (x2, x3))
        return x2;
    else
        return x5 (x2, x3);
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="960" endline="967">
List *x1 (List *x2, int x3) {
    if (x4 (x2, x3))
        return x2;
    else
        return x5 (x2, x3);
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="972" endline="979">
List *x1 (List *x2, Oid x3) {
    if (x4 (x2, x3))
        return x2;
    else
        return x5 (x2, x3);
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="991" endline="1007">
List *x1 (List *x2, List *x3) {
    ListCell *x4;
    Assert (IsPointerList (x2));
    Assert (IsPointerList (x3));
    foreach (x4, x3) {
        if (!x5 (x2, x6 (x4)))
            x2 = x7 (x2, x6 (x4));
    }
    x8 (x2);
    return x2;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="1013" endline="1029">
List *x1 (List *x2, List *x3) {
    ListCell *x4;
    Assert (IsPointerList (x2));
    Assert (IsPointerList (x3));
    foreach (x4, x3) {
        if (!x5 (x2, x6 (x4)))
            x2 = x7 (x2, x6 (x4));
    }
    x8 (x2);
    return x2;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="1034" endline="1050">
List *x1 (List *x2, List *x3) {
    ListCell *x4;
    Assert (IsIntegerList (x2));
    Assert (IsIntegerList (x3));
    foreach (x4, x3) {
        if (!x5 (x2, x6 (x4)))
            x2 = x7 (x2, x6 (x4));
    }
    x8 (x2);
    return x2;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="1055" endline="1071">
List *x1 (List *x2, List *x3) {
    ListCell *x4;
    Assert (IsOidList (x2));
    Assert (IsOidList (x3));
    foreach (x4, x3) {
        if (!x5 (x2, x6 (x4)))
            x2 = x7 (x2, x6 (x4));
    }
    x8 (x2);
    return x2;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="1076" endline="1096">
static void x1 (List *x2, x3 x4) {
    ListCell *x5;
    x6 (x2);
    x5 = x7 (x2);
    while (x5 != x8) {
        ListCell *x9 = x5;
        x5 = x10 (x5);
        if (x4)
            x11 (x12 (x9));
        x11 (x9);
    }
    if (x2)
        x11 (x2);
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="1106" endline="1110">
void x1 (List *x2) {
    x3 (x2, x4);
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="1120" endline="1128">
void x1 (List *x2) {
    Assert (IsPointerList (x2));
    x3 (x2, x4);
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="1133" endline="1171">
List *x1 (List *x2) {
    List *x3;
    ListCell *x4;
    ListCell *x5;
    if (x2 == x6)
        return x6;
    x3 = x7 (x2->x8);
    x3->x9 = x2->x9;
    x3->x10->x11 = x2->x10->x11;
    x4 = x3->x10;
    x5 = x2->x10->x12;
    while (x5) {
        ListCell *x13;
        x13 = (x14 *) x15 (sizeof (*x13));
        x13->x11 = x5->x11;
        x4->x12 = x13;
        x4 = x13;
        x5 = x5->x12;
    }
    x4->x12 = x16;
    x3->x17 = x4;
    x18 (x3);
    return x3;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="1176" endline="1224">
List *x1 (List *x2, int x3) {
    List *x4;
    ListCell *x5;
    ListCell *x6;
    if (x3 < 0)
        x3 = 0;
    if (x2 == x7 || x3 >= x2->x8)
        return x7;
    x4 = x9 (x2->x10);
    x4->x8 = x2->x8 - x3;
    x6 = x2->x11;
    while (x3-- > 0)
        x6 = x6->x12;
    x4->x11->x13 = x6->x13;
    x5 = x4->x11;
    x6 = x6->x12;
    while (x6) {
        ListCell *x14;
        x14 = (x15 *) x16 (sizeof (*x14));
        x14->x13 = x6->x13;
        x5->x12 = x14;
        x5 = x14;
        x6 = x6->x12;
    }
    x5->x12 = x17;
    x4->x18 = x5;
    x19 (x4);
    return x4;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="1234" endline="1238">
ListCell *x1 (List *x2) {
    return x2 ? x2->x3 : x4;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="1240" endline="1244">
ListCell *x1 (List *x2) {
    return x2 ? x2->x3 : x4;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="1246" endline="1250">
int x1 (List *x2) {
    return x2 ? x2->x3 : 0;
}
</source>
<source file="examples/postgresql//smallpostgresql/list.c.ifdefed" startline="1271" endline="1275">
int x1 (List *x2) {
    return x3 (x2);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="109" endline="139">
static void x1 (StringInfo x2, char *x3) {
    if (x3 == x4 || *x3 == '\0') {
        x5 (x2, "<>");
        return;
    }
    if (*x3 == '<' || *x3 == '\"' || x6 ((unsigned char) *x3) || ((*x3 == '+' || *x3 == '-') && (x6 ((unsigned char) x3[1]) || x3[1] == '.')))
        x7 (x2, '\\');
    while (*x3) {
        if (*x3 == ' ' || *x3 == '\n' || *x3 == '\t' || *x3 == '(' || *x3 == ')' || *x3 == '{' || *x3 == '}' || *x3 == '\\')
            x7 (x2, '\\');
        x7 (x2, * x3 ++);
    }
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="141" endline="176">
static void x1 (StringInfo x2, List *x3) {
    ListCell *x4;
    x5 (x2, '(');
    if (x6 (x3, x7))
        x5 (x2, 'i');
    else if (x6 (x3, x8))
        x5 (x2, 'o');
    foreach (x4, x3) {
        if (x6 (x3, x9)) {
            x10 (x2, x11 (x4));
            if (x12 (x4))
                x5 (x2, ' ');
        }
        else if (x6 (x3, x7))
            x13 (x2, " %d", x14 (x4));
        else if (x6 (x3, x8))
            x13 (x2, " %u", x15 (x4));
        else
            x16 (x17, "unrecognized list node type: %d", (int) x3->x18);
    }
    x5 (x2, ')');
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="184" endline="197">
static void x1 (StringInfo x2, Bitmapset *x3) {
    Bitmapset *x4;
    int x5;
    x6 (x2, '(');
    x6 (x2, 'b');
    x4 = x7 (x3);
    while ((x5 = x8 (x4)) >= 0)
        x9 (x2, " %d", x5);
    x10 (x4);
    x6 (x2, ')');
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="202" endline="232">
static void x1 (StringInfo x2, Datum x3, int x4, x5 x6) {
    Size x7, x8;
    char *x9;
    x7 = x10 (x3, x6, x4);
    if (x6) {
        x9 = (char *) (&x3);
        x11 (x2, "%u [ ", (unsigned int) x7);
        for (x8 = 0; x8 < (x12) sizeof (x13); x8++)
            x11 (x2, "%d ", (int) (x9[x8]));
        x11 (x2, "]");
    }
    else {
        x9 = (char *) x14 (x3);
        if (!x15 (x9))
            x11 (x2, "0 [ ]");
        else {
            x11 (x2, "%u [ ", (unsigned int) x7);
            for (x8 = 0; x8 < x7; x8++)
                x11 (x2, "%d ", (int) (x9[x8]));
            x11 (x2, "]");
        }
    }
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="239" endline="259">
static void x1 (StringInfo x2, PlannedStmt *x3) {
    x4 ("PLANNEDSTMT");
    x5 (x6, x7);
    WRITE_BOOL_FIELD (x8);
    WRITE_BOOL_FIELD (x9);
    WRITE_NODE_FIELD (x10);
    WRITE_NODE_FIELD (x11);
    WRITE_NODE_FIELD (x12);
    WRITE_NODE_FIELD (x13);
    WRITE_NODE_FIELD (x14);
    WRITE_NODE_FIELD (x15);
    WRITE_BITMAPSET_FIELD (x16);
    WRITE_NODE_FIELD (x17);
    WRITE_NODE_FIELD (x18);
    WRITE_NODE_FIELD (x19);
    WRITE_NODE_FIELD (x20);
    WRITE_INT_FIELD (x21);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="264" endline="278">
static void x1 (StringInfo x2, Plan *x3) {
    x4 (x5, "%.2f");
    x4 (x6, "%.2f");
    x4 (x7, "%.0f");
    WRITE_INT_FIELD (x8);
    WRITE_NODE_FIELD (x9);
    WRITE_NODE_FIELD (x10);
    WRITE_NODE_FIELD (x11);
    WRITE_NODE_FIELD (x12);
    WRITE_NODE_FIELD (x13);
    WRITE_BITMAPSET_FIELD (x14);
    WRITE_BITMAPSET_FIELD (x15);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="283" endline="289">
static void x1 (StringInfo x2, Scan *x3) {
    x4 (x2, (x5 *) x3);
    WRITE_UINT_FIELD (x6);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="294" endline="301">
static void x1 (StringInfo x2, Join *x3) {
    x4 (x2, (x5 *) x3);
    x6 (x7, x8);
    WRITE_NODE_FIELD (x9);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="304" endline="310">
static void x1 (StringInfo x2, Plan *x3) {
    x4 ("PLAN");
    x5 (x2, (x6 *) x3);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="312" endline="320">
static void x1 (StringInfo x2, Result *x3) {
    x4 ("RESULT");
    x5 (x2, (x6 *) x3);
    WRITE_NODE_FIELD (x7);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="322" endline="331">
static void x1 (StringInfo x2, Append *x3) {
    x4 ("APPEND");
    x5 (x2, (x6 *) x3);
    WRITE_NODE_FIELD (x7);
    WRITE_BOOL_FIELD (x8);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="333" endline="354">
static void x1 (StringInfo x2, RecursiveUnion *x3) {
    int x4;
    x5 ("RECURSIVEUNION");
    x6 (x2, (x7 *) x3);
    WRITE_INT_FIELD (x8);
    WRITE_INT_FIELD (x9);
    x10 (x2, " :dupColIdx");
    for (x4 = 0; x4 < x3->x9; x4++)
        x10 (x2, " %d", x3->x11[x4]);
    x10 (x2, " :dupOperators");
    for (x4 = 0; x4 < x3->x9; x4++)
        x10 (x2, " %u", x3->x12[x4]);
    WRITE_LONG_FIELD (x13);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="356" endline="364">
static void x1 (StringInfo x2, BitmapAnd *x3) {
    x4 ("BITMAPAND");
    x5 (x2, (x6 *) x3);
    WRITE_NODE_FIELD (x7);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="366" endline="374">
static void x1 (StringInfo x2, BitmapOr *x3) {
    x4 ("BITMAPOR");
    x5 (x2, (x6 *) x3);
    WRITE_NODE_FIELD (x7);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="376" endline="382">
static void x1 (StringInfo x2, Scan *x3) {
    x4 ("SCAN");
    x5 (x2, (x6 *) x3);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="384" endline="390">
static void x1 (StringInfo x2, SeqScan *x3) {
    x4 ("SEQSCAN");
    x5 (x2, (x6 *) x3);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="392" endline="403">
static void x1 (StringInfo x2, IndexScan *x3) {
    x4 ("INDEXSCAN");
    x5 (x2, (x6 *) x3);
    WRITE_OID_FIELD (x7);
    WRITE_NODE_FIELD (x8);
    WRITE_NODE_FIELD (x9);
    x10 (x11, x12);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="405" endline="415">
static void x1 (StringInfo x2, BitmapIndexScan *x3) {
    x4 ("BITMAPINDEXSCAN");
    x5 (x2, (x6 *) x3);
    WRITE_OID_FIELD (x7);
    WRITE_NODE_FIELD (x8);
    WRITE_NODE_FIELD (x9);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="417" endline="425">
static void x1 (StringInfo x2, BitmapHeapScan *x3) {
    x4 ("BITMAPHEAPSCAN");
    x5 (x2, (x6 *) x3);
    WRITE_NODE_FIELD (x7);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="427" endline="435">
static void x1 (StringInfo x2, TidScan *x3) {
    x4 ("TIDSCAN");
    x5 (x2, (x6 *) x3);
    WRITE_NODE_FIELD (x7);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="437" endline="446">
static void x1 (StringInfo x2, SubqueryScan *x3) {
    x4 ("SUBQUERYSCAN");
    x5 (x2, (x6 *) x3);
    WRITE_NODE_FIELD (x7);
    WRITE_NODE_FIELD (x8);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="448" endline="459">
static void x1 (StringInfo x2, FunctionScan *x3) {
    x4 ("FUNCTIONSCAN");
    x5 (x2, (x6 *) x3);
    WRITE_NODE_FIELD (x7);
    WRITE_NODE_FIELD (x8);
    WRITE_NODE_FIELD (x9);
    WRITE_NODE_FIELD (x10);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="461" endline="469">
static void x1 (StringInfo x2, ValuesScan *x3) {
    x4 ("VALUESSCAN");
    x5 (x2, (x6 *) x3);
    WRITE_NODE_FIELD (x7);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="471" endline="480">
static void x1 (StringInfo x2, CteScan *x3) {
    x4 ("CTESCAN");
    x5 (x2, (x6 *) x3);
    WRITE_INT_FIELD (x7);
    WRITE_INT_FIELD (x8);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="482" endline="490">
static void x1 (StringInfo x2, WorkTableScan *x3) {
    x4 ("WORKTABLESCAN");
    x5 (x2, (x6 *) x3);
    WRITE_INT_FIELD (x7);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="492" endline="498">
static void x1 (StringInfo x2, Join *x3) {
    x4 ("JOIN");
    x5 (x2, (x6 *) x3);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="500" endline="506">
static void x1 (StringInfo x2, NestLoop *x3) {
    x4 ("NESTLOOP");
    x5 (x2, (x6 *) x3);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="508" endline="533">
static void x1 (StringInfo x2, MergeJoin *x3) {
    int x4;
    int x5;
    x6 ("MERGEJOIN");
    x7 (x2, (x8 *) x3);
    WRITE_NODE_FIELD (x9);
    x4 = x10 (x3->x9);
    x11 (x2, " :mergeFamilies");
    for (x5 = 0; x5 < x4; x5++)
        x11 (x2, " %u", x3->x12[x5]);
    x11 (x2, " :mergeStrategies");
    for (x5 = 0; x5 < x4; x5++)
        x11 (x2, " %d", x3->x13[x5]);
    x11 (x2, " :mergeNullsFirst");
    for (x5 = 0; x5 < x4; x5++)
        x11 (x2, " %d", (int) x3->x14[x5]);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="535" endline="543">
static void x1 (StringInfo x2, HashJoin *x3) {
    x4 ("HASHJOIN");
    x5 (x2, (x6 *) x3);
    WRITE_NODE_FIELD (x7);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="545" endline="566">
static void x1 (StringInfo x2, Agg *x3) {
    int x4;
    x5 ("AGG");
    x6 (x2, (x7 *) x3);
    x8 (x9, x10);
    WRITE_INT_FIELD (x11);
    x12 (x2, " :grpColIdx");
    for (x4 = 0; x4 < x3->x11; x4++)
        x12 (x2, " %d", x3->x13[x4]);
    x12 (x2, " :grpOperators");
    for (x4 = 0; x4 < x3->x11; x4++)
        x12 (x2, " %u", x3->x14[x4]);
    WRITE_LONG_FIELD (x15);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="568" endline="599">
static void x1 (StringInfo x2, WindowAgg *x3) {
    int x4;
    x5 ("WINDOWAGG");
    x6 (x2, (x7 *) x3);
    WRITE_UINT_FIELD (x8);
    WRITE_INT_FIELD (x9);
    x10 (x2, " :partColIdx");
    for (x4 = 0; x4 < x3->x9; x4++)
        x10 (x2, " %d", x3->x11[x4]);
    x10 (x2, " :partOperations");
    for (x4 = 0; x4 < x3->x9; x4++)
        x10 (x2, " %u", x3->x12[x4]);
    WRITE_INT_FIELD (x13);
    x10 (x2, " :ordColIdx");
    for (x4 = 0; x4 < x3->x13; x4++)
        x10 (x2, " %d", x3->x14[x4]);
    x10 (x2, " :ordOperations");
    for (x4 = 0; x4 < x3->x13; x4++)
        x10 (x2, " %u", x3->x15[x4]);
    WRITE_INT_FIELD (x16);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="601" endline="619">
static void x1 (StringInfo x2, Group *x3) {
    int x4;
    x5 ("GROUP");
    x6 (x2, (x7 *) x3);
    WRITE_INT_FIELD (x8);
    x9 (x2, " :grpColIdx");
    for (x4 = 0; x4 < x3->x8; x4++)
        x9 (x2, " %d", x3->x10[x4]);
    x9 (x2, " :grpOperators");
    for (x4 = 0; x4 < x3->x8; x4++)
        x9 (x2, " %u", x3->x11[x4]);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="621" endline="627">
static void x1 (StringInfo x2, Material *x3) {
    x4 ("MATERIAL");
    x5 (x2, (x6 *) x3);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="629" endline="651">
static void x1 (StringInfo x2, Sort *x3) {
    int x4;
    x5 ("SORT");
    x6 (x2, (x7 *) x3);
    WRITE_INT_FIELD (x8);
    x9 (x2, " :sortColIdx");
    for (x4 = 0; x4 < x3->x8; x4++)
        x9 (x2, " %d", x3->x10[x4]);
    x9 (x2, " :sortOperators");
    for (x4 = 0; x4 < x3->x8; x4++)
        x9 (x2, " %u", x3->x11[x4]);
    x9 (x2, " :nullsFirst");
    for (x4 = 0; x4 < x3->x8; x4++)
        x9 (x2, " %s", x12 (x3->x13[x4]));
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="653" endline="671">
static void x1 (StringInfo x2, Unique *x3) {
    int x4;
    x5 ("UNIQUE");
    x6 (x2, (x7 *) x3);
    WRITE_INT_FIELD (x8);
    x9 (x2, " :uniqColIdx");
    for (x4 = 0; x4 < x3->x8; x4++)
        x9 (x2, " %d", x3->x10[x4]);
    x9 (x2, " :uniqOperators");
    for (x4 = 0; x4 < x3->x8; x4++)
        x9 (x2, " %u", x3->x11[x4]);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="673" endline="684">
static void x1 (StringInfo x2, Hash *x3) {
    x4 ("HASH");
    x5 (x2, (x6 *) x3);
    WRITE_OID_FIELD (x7);
    WRITE_INT_FIELD (x8);
    WRITE_OID_FIELD (x9);
    WRITE_INT_FIELD (x10);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="686" endline="710">
static void x1 (StringInfo x2, SetOp *x3) {
    int x4;
    x5 ("SETOP");
    x6 (x2, (x7 *) x3);
    x8 (x9, x10);
    x8 (x11, x12);
    WRITE_INT_FIELD (x13);
    x14 (x2, " :dupColIdx");
    for (x4 = 0; x4 < x3->x13; x4++)
        x14 (x2, " %d", x3->x15[x4]);
    x14 (x2, " :dupOperators");
    for (x4 = 0; x4 < x3->x13; x4++)
        x14 (x2, " %u", x3->x16[x4]);
    WRITE_INT_FIELD (x17);
    WRITE_INT_FIELD (x18);
    WRITE_LONG_FIELD (x19);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="712" endline="721">
static void x1 (StringInfo x2, Limit *x3) {
    x4 ("LIMIT");
    x5 (x2, (x6 *) x3);
    WRITE_NODE_FIELD (x7);
    WRITE_NODE_FIELD (x8);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="723" endline="732">
static void x1 (StringInfo x2, PlanInvalItem *x3) {
    x4 ("PLANINVALITEM");
    WRITE_INT_FIELD (x5);
    x6 (x2, " :tupleId (%u,%u)", x7 (& x3 -> x8), x9 (& x3 -> x8));
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="740" endline="747">
static void x1 (StringInfo x2, Alias *x3) {
    x4 ("ALIAS");
    WRITE_STRING_FIELD (x5);
    WRITE_NODE_FIELD (x6);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="749" endline="764">
static void x1 (StringInfo x2, RangeVar *x3) {
    x4 ("RANGEVAR");
    WRITE_STRING_FIELD (x5);
    WRITE_STRING_FIELD (x6);
    x7 (x8, x9);
    WRITE_BOOL_FIELD (x10);
    WRITE_NODE_FIELD (x11);
    WRITE_LOCATION_FIELD (x12);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="766" endline="776">
static void x1 (StringInfo x2, IntoClause *x3) {
    x4 ("INTOCLAUSE");
    WRITE_NODE_FIELD (x5);
    WRITE_NODE_FIELD (x6);
    WRITE_NODE_FIELD (x7);
    x8 (x9, x10);
    WRITE_STRING_FIELD (x11);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="778" endline="791">
static void x1 (StringInfo x2, Var *x3) {
    x4 ("VAR");
    WRITE_UINT_FIELD (x5);
    WRITE_INT_FIELD (x6);
    WRITE_OID_FIELD (x7);
    WRITE_INT_FIELD (x8);
    WRITE_UINT_FIELD (x9);
    WRITE_UINT_FIELD (x10);
    WRITE_INT_FIELD (x11);
    WRITE_LOCATION_FIELD (x12);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="793" endline="810">
static void x1 (StringInfo x2, Const *x3) {
    x4 ("CONST");
    WRITE_OID_FIELD (x5);
    WRITE_INT_FIELD (x6);
    WRITE_INT_FIELD (x7);
    WRITE_BOOL_FIELD (x8);
    WRITE_BOOL_FIELD (x9);
    WRITE_LOCATION_FIELD (x10);
    x11 (x2, " :constvalue ");
    if (x3->x9)
        x11 (x2, "<>");
    else
        x12 (x2, x3->x13, x3->x7, x3->x8);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="812" endline="822">
static void x1 (StringInfo x2, Param *x3) {
    x4 ("PARAM");
    x5 (x6, x7);
    WRITE_INT_FIELD (x8);
    WRITE_OID_FIELD (x9);
    WRITE_INT_FIELD (x10);
    WRITE_LOCATION_FIELD (x11);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="824" endline="836">
static void x1 (StringInfo x2, Aggref *x3) {
    x4 ("AGGREF");
    WRITE_OID_FIELD (x5);
    WRITE_OID_FIELD (x6);
    WRITE_NODE_FIELD (x7);
    WRITE_UINT_FIELD (x8);
    WRITE_BOOL_FIELD (x9);
    WRITE_BOOL_FIELD (x10);
    WRITE_LOCATION_FIELD (x11);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="838" endline="850">
static void x1 (StringInfo x2, WindowFunc *x3) {
    x4 ("WINDOWFUNC");
    WRITE_OID_FIELD (x5);
    WRITE_OID_FIELD (x6);
    WRITE_NODE_FIELD (x7);
    WRITE_UINT_FIELD (x8);
    WRITE_BOOL_FIELD (x9);
    WRITE_BOOL_FIELD (x10);
    WRITE_LOCATION_FIELD (x11);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="852" endline="864">
static void x1 (StringInfo x2, ArrayRef *x3) {
    x4 ("ARRAYREF");
    WRITE_OID_FIELD (x5);
    WRITE_OID_FIELD (x6);
    WRITE_INT_FIELD (x7);
    WRITE_NODE_FIELD (x8);
    WRITE_NODE_FIELD (x9);
    WRITE_NODE_FIELD (x10);
    WRITE_NODE_FIELD (x11);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="866" endline="877">
static void x1 (StringInfo x2, FuncExpr *x3) {
    x4 ("FUNCEXPR");
    WRITE_OID_FIELD (x5);
    WRITE_OID_FIELD (x6);
    WRITE_BOOL_FIELD (x7);
    x8 (x9, x10);
    WRITE_NODE_FIELD (x11);
    WRITE_LOCATION_FIELD (x12);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="879" endline="890">
static void x1 (StringInfo x2, OpExpr *x3) {
    x4 ("OPEXPR");
    WRITE_OID_FIELD (x5);
    WRITE_OID_FIELD (x6);
    WRITE_OID_FIELD (x7);
    WRITE_BOOL_FIELD (x8);
    WRITE_NODE_FIELD (x9);
    WRITE_LOCATION_FIELD (x10);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="892" endline="903">
static void x1 (StringInfo x2, DistinctExpr *x3) {
    x4 ("DISTINCTEXPR");
    WRITE_OID_FIELD (x5);
    WRITE_OID_FIELD (x6);
    WRITE_OID_FIELD (x7);
    WRITE_BOOL_FIELD (x8);
    WRITE_NODE_FIELD (x9);
    WRITE_LOCATION_FIELD (x10);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="905" endline="915">
static void x1 (StringInfo x2, ScalarArrayOpExpr *x3) {
    x4 ("SCALARARRAYOPEXPR");
    WRITE_OID_FIELD (x5);
    WRITE_OID_FIELD (x6);
    WRITE_BOOL_FIELD (x7);
    WRITE_NODE_FIELD (x8);
    WRITE_LOCATION_FIELD (x9);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="917" endline="942">
static void x1 (StringInfo x2, BoolExpr *x3) {
    char *x4 = x5;
    x6 ("BOOLEXPR");
    switch (x3->x7) {
    case x8 :
        x4 = "and";
        break;
    case x9 :
        x4 = "or";
        break;
    case x10 :
        x4 = "not";
        break;
    }
    x11 (x2, " :boolop ");
    x12 (x2, x4);
    WRITE_NODE_FIELD (x13);
    WRITE_LOCATION_FIELD (x14);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="944" endline="954">
static void x1 (StringInfo x2, SubLink *x3) {
    x4 ("SUBLINK");
    x5 (x6, x7);
    WRITE_NODE_FIELD (x8);
    WRITE_NODE_FIELD (x9);
    WRITE_NODE_FIELD (x10);
    WRITE_LOCATION_FIELD (x11);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="956" endline="975">
static void x1 (StringInfo x2, SubPlan *x3) {
    x4 ("SUBPLAN");
    x5 (x6, x7);
    WRITE_NODE_FIELD (x8);
    WRITE_NODE_FIELD (x9);
    WRITE_INT_FIELD (x10);
    WRITE_STRING_FIELD (x11);
    WRITE_OID_FIELD (x12);
    WRITE_INT_FIELD (x13);
    WRITE_BOOL_FIELD (x14);
    WRITE_BOOL_FIELD (x15);
    WRITE_NODE_FIELD (x16);
    WRITE_NODE_FIELD (x17);
    WRITE_NODE_FIELD (x18);
    x19 (x20, "%.2f");
    x19 (x21, "%.2f");
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="977" endline="983">
static void x1 (StringInfo x2, AlternativeSubPlan *x3) {
    x4 ("ALTERNATIVESUBPLAN");
    WRITE_NODE_FIELD (x5);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="985" endline="994">
static void x1 (StringInfo x2, FieldSelect *x3) {
    x4 ("FIELDSELECT");
    WRITE_NODE_FIELD (x5);
    WRITE_INT_FIELD (x6);
    WRITE_OID_FIELD (x7);
    WRITE_INT_FIELD (x8);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="996" endline="1005">
static void x1 (StringInfo x2, FieldStore *x3) {
    x4 ("FIELDSTORE");
    WRITE_NODE_FIELD (x5);
    WRITE_NODE_FIELD (x6);
    WRITE_NODE_FIELD (x7);
    WRITE_OID_FIELD (x8);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1007" endline="1017">
static void x1 (StringInfo x2, RelabelType *x3) {
    x4 ("RELABELTYPE");
    WRITE_NODE_FIELD (x5);
    WRITE_OID_FIELD (x6);
    WRITE_INT_FIELD (x7);
    x8 (x9, x10);
    WRITE_LOCATION_FIELD (x11);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1019" endline="1028">
static void x1 (StringInfo x2, CoerceViaIO *x3) {
    x4 ("COERCEVIAIO");
    WRITE_NODE_FIELD (x5);
    WRITE_OID_FIELD (x6);
    x7 (x8, x9);
    WRITE_LOCATION_FIELD (x10);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1030" endline="1042">
static void x1 (StringInfo x2, ArrayCoerceExpr *x3) {
    x4 ("ARRAYCOERCEEXPR");
    WRITE_NODE_FIELD (x5);
    WRITE_OID_FIELD (x6);
    WRITE_OID_FIELD (x7);
    WRITE_INT_FIELD (x8);
    WRITE_BOOL_FIELD (x9);
    x10 (x11, x12);
    WRITE_LOCATION_FIELD (x13);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1044" endline="1053">
static void x1 (StringInfo x2, ConvertRowtypeExpr *x3) {
    x4 ("CONVERTROWTYPEEXPR");
    WRITE_NODE_FIELD (x5);
    WRITE_OID_FIELD (x6);
    x7 (x8, x9);
    WRITE_LOCATION_FIELD (x10);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1055" endline="1065">
static void x1 (StringInfo x2, CaseExpr *x3) {
    x4 ("CASE");
    WRITE_OID_FIELD (x5);
    WRITE_NODE_FIELD (x6);
    WRITE_NODE_FIELD (x7);
    WRITE_NODE_FIELD (x8);
    WRITE_LOCATION_FIELD (x9);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1067" endline="1075">
static void x1 (StringInfo x2, CaseWhen *x3) {
    x4 ("WHEN");
    WRITE_NODE_FIELD (x5);
    WRITE_NODE_FIELD (x6);
    WRITE_LOCATION_FIELD (x7);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1077" endline="1084">
static void x1 (StringInfo x2, CaseTestExpr *x3) {
    x4 ("CASETESTEXPR");
    WRITE_OID_FIELD (x5);
    WRITE_INT_FIELD (x6);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1086" endline="1096">
static void x1 (StringInfo x2, ArrayExpr *x3) {
    x4 ("ARRAY");
    WRITE_OID_FIELD (x5);
    WRITE_OID_FIELD (x6);
    WRITE_NODE_FIELD (x7);
    WRITE_BOOL_FIELD (x8);
    WRITE_LOCATION_FIELD (x9);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1098" endline="1108">
static void x1 (StringInfo x2, RowExpr *x3) {
    x4 ("ROW");
    WRITE_NODE_FIELD (x5);
    WRITE_OID_FIELD (x6);
    x7 (x8, x9);
    WRITE_NODE_FIELD (x10);
    WRITE_LOCATION_FIELD (x11);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1110" endline="1120">
static void x1 (StringInfo x2, RowCompareExpr *x3) {
    x4 ("ROWCOMPARE");
    x5 (x6, x7);
    WRITE_NODE_FIELD (x8);
    WRITE_NODE_FIELD (x9);
    WRITE_NODE_FIELD (x10);
    WRITE_NODE_FIELD (x11);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1122" endline="1130">
static void x1 (StringInfo x2, CoalesceExpr *x3) {
    x4 ("COALESCE");
    WRITE_OID_FIELD (x5);
    WRITE_NODE_FIELD (x6);
    WRITE_LOCATION_FIELD (x7);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1132" endline="1141">
static void x1 (StringInfo x2, MinMaxExpr *x3) {
    x4 ("MINMAX");
    WRITE_OID_FIELD (x5);
    x6 (x7, x8);
    WRITE_NODE_FIELD (x9);
    WRITE_LOCATION_FIELD (x10);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1143" endline="1157">
static void x1 (StringInfo x2, XmlExpr *x3) {
    x4 ("XMLEXPR");
    x5 (x6, x7);
    WRITE_STRING_FIELD (x8);
    WRITE_NODE_FIELD (x9);
    WRITE_NODE_FIELD (x10);
    WRITE_NODE_FIELD (x11);
    x5 (x12, x13);
    WRITE_OID_FIELD (x14);
    WRITE_INT_FIELD (x15);
    WRITE_LOCATION_FIELD (x16);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1159" endline="1170">
static void x1 (StringInfo x2, NullIfExpr *x3) {
    x4 ("NULLIFEXPR");
    WRITE_OID_FIELD (x5);
    WRITE_OID_FIELD (x6);
    WRITE_OID_FIELD (x7);
    WRITE_BOOL_FIELD (x8);
    WRITE_NODE_FIELD (x9);
    WRITE_LOCATION_FIELD (x10);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1172" endline="1179">
static void x1 (StringInfo x2, NullTest *x3) {
    x4 ("NULLTEST");
    WRITE_NODE_FIELD (x5);
    x6 (x7, x8);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1181" endline="1188">
static void x1 (StringInfo x2, BooleanTest *x3) {
    x4 ("BOOLEANTEST");
    WRITE_NODE_FIELD (x5);
    x6 (x7, x8);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1190" endline="1200">
static void x1 (StringInfo x2, CoerceToDomain *x3) {
    x4 ("COERCETODOMAIN");
    WRITE_NODE_FIELD (x5);
    WRITE_OID_FIELD (x6);
    WRITE_INT_FIELD (x7);
    x8 (x9, x10);
    WRITE_LOCATION_FIELD (x11);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1202" endline="1210">
static void x1 (StringInfo x2, CoerceToDomainValue *x3) {
    x4 ("COERCETODOMAINVALUE");
    WRITE_OID_FIELD (x5);
    WRITE_INT_FIELD (x6);
    WRITE_LOCATION_FIELD (x7);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1212" endline="1220">
static void x1 (StringInfo x2, SetToDefault *x3) {
    x4 ("SETTODEFAULT");
    WRITE_OID_FIELD (x5);
    WRITE_INT_FIELD (x6);
    WRITE_LOCATION_FIELD (x7);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1222" endline="1230">
static void x1 (StringInfo x2, CurrentOfExpr *x3) {
    x4 ("CURRENTOFEXPR");
    WRITE_UINT_FIELD (x5);
    WRITE_STRING_FIELD (x6);
    WRITE_INT_FIELD (x7);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1232" endline="1244">
static void x1 (StringInfo x2, TargetEntry *x3) {
    x4 ("TARGETENTRY");
    WRITE_NODE_FIELD (x5);
    WRITE_INT_FIELD (x6);
    WRITE_STRING_FIELD (x7);
    WRITE_UINT_FIELD (x8);
    WRITE_OID_FIELD (x9);
    WRITE_INT_FIELD (x10);
    WRITE_BOOL_FIELD (x11);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1246" endline="1252">
static void x1 (StringInfo x2, RangeTblRef *x3) {
    x4 ("RANGETBLREF");
    WRITE_INT_FIELD (x5);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1254" endline="1267">
static void x1 (StringInfo x2, JoinExpr *x3) {
    x4 ("JOINEXPR");
    x5 (x6, x7);
    WRITE_BOOL_FIELD (x8);
    WRITE_NODE_FIELD (x9);
    WRITE_NODE_FIELD (x10);
    WRITE_NODE_FIELD (x11);
    WRITE_NODE_FIELD (x12);
    WRITE_NODE_FIELD (x13);
    WRITE_INT_FIELD (x14);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1269" endline="1276">
static void x1 (StringInfo x2, FromExpr *x3) {
    x4 ("FROMEXPR");
    WRITE_NODE_FIELD (x5);
    WRITE_NODE_FIELD (x6);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1289" endline="1296">
static void x1 (StringInfo x2, Path *x3) {
    x4 (x5, x6);
    x7 (x8, "%.2f");
    x7 (x9, "%.2f");
    WRITE_NODE_FIELD (x10);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1301" endline="1310">
static void x1 (StringInfo x2, JoinPath *x3) {
    x4 (x2, (x5 *) x3);
    x6 (x7, x8);
    WRITE_NODE_FIELD (x9);
    WRITE_NODE_FIELD (x10);
    WRITE_NODE_FIELD (x11);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1312" endline="1318">
static void x1 (StringInfo x2, Path *x3) {
    x4 ("PATH");
    x5 (x2, (x6 *) x3);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1320" endline="1335">
static void x1 (StringInfo x2, IndexPath *x3) {
    x4 ("INDEXPATH");
    x5 (x2, (x6 *) x3);
    WRITE_NODE_FIELD (x7);
    WRITE_NODE_FIELD (x8);
    WRITE_NODE_FIELD (x9);
    WRITE_BOOL_FIELD (x10);
    x11 (x12, x13);
    x14 (x15, "%.2f");
    x14 (x16, "%.4f");
    x14 (x17, "%.0f");
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1337" endline="1347">
static void x1 (StringInfo x2, BitmapHeapPath *x3) {
    x4 ("BITMAPHEAPPATH");
    x5 (x2, (x6 *) x3);
    WRITE_NODE_FIELD (x7);
    WRITE_BOOL_FIELD (x8);
    x9 (x10, "%.0f");
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1349" endline="1358">
static void x1 (StringInfo x2, BitmapAndPath *x3) {
    x4 ("BITMAPANDPATH");
    x5 (x2, (x6 *) x3);
    WRITE_NODE_FIELD (x7);
    x8 (x9, "%.4f");
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1360" endline="1369">
static void x1 (StringInfo x2, BitmapOrPath *x3) {
    x4 ("BITMAPORPATH");
    x5 (x2, (x6 *) x3);
    WRITE_NODE_FIELD (x7);
    x8 (x9, "%.4f");
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1371" endline="1379">
static void x1 (StringInfo x2, TidPath *x3) {
    x4 ("TIDPATH");
    x5 (x2, (x6 *) x3);
    WRITE_NODE_FIELD (x7);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1381" endline="1389">
static void x1 (StringInfo x2, AppendPath *x3) {
    x4 ("APPENDPATH");
    x5 (x2, (x6 *) x3);
    WRITE_NODE_FIELD (x7);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1391" endline="1399">
static void x1 (StringInfo x2, ResultPath *x3) {
    x4 ("RESULTPATH");
    x5 (x2, (x6 *) x3);
    WRITE_NODE_FIELD (x7);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1401" endline="1409">
static void x1 (StringInfo x2, MaterialPath *x3) {
    x4 ("MATERIALPATH");
    x5 (x2, (x6 *) x3);
    WRITE_NODE_FIELD (x7);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1411" endline="1423">
static void x1 (StringInfo x2, UniquePath *x3) {
    x4 ("UNIQUEPATH");
    x5 (x2, (x6 *) x3);
    WRITE_NODE_FIELD (x7);
    x8 (x9, x10);
    WRITE_NODE_FIELD (x11);
    WRITE_NODE_FIELD (x12);
    x13 (x14, "%.0f");
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1425" endline="1431">
static void x1 (StringInfo x2, NestPath *x3) {
    x4 ("NESTPATH");
    x5 (x2, (x6 *) x3);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1433" endline="1443">
static void x1 (StringInfo x2, MergePath *x3) {
    x4 ("MERGEPATH");
    x5 (x2, (x6 *) x3);
    WRITE_NODE_FIELD (x7);
    WRITE_NODE_FIELD (x8);
    WRITE_NODE_FIELD (x9);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1445" endline="1454">
static void x1 (StringInfo x2, HashPath *x3) {
    x4 ("HASHPATH");
    x5 (x2, (x6 *) x3);
    WRITE_NODE_FIELD (x7);
    WRITE_INT_FIELD (x8);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1456" endline="1471">
static void x1 (StringInfo x2, PlannerGlobal *x3) {
    x4 ("PLANNERGLOBAL");
    WRITE_NODE_FIELD (x5);
    WRITE_NODE_FIELD (x6);
    WRITE_NODE_FIELD (x7);
    WRITE_BITMAPSET_FIELD (x8);
    WRITE_NODE_FIELD (x9);
    WRITE_NODE_FIELD (x10);
    WRITE_NODE_FIELD (x11);
    WRITE_UINT_FIELD (x12);
    WRITE_BOOL_FIELD (x13);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1473" endline="1508">
static void x1 (StringInfo x2, PlannerInfo *x3) {
    x4 ("PLANNERINFO");
    WRITE_NODE_FIELD (x5);
    WRITE_NODE_FIELD (x6);
    WRITE_UINT_FIELD (x7);
    WRITE_NODE_FIELD (x8);
    WRITE_NODE_FIELD (x9);
    WRITE_NODE_FIELD (x10);
    WRITE_NODE_FIELD (x11);
    WRITE_NODE_FIELD (x12);
    WRITE_NODE_FIELD (x13);
    WRITE_NODE_FIELD (x14);
    WRITE_NODE_FIELD (x15);
    WRITE_NODE_FIELD (x16);
    WRITE_NODE_FIELD (x17);
    WRITE_NODE_FIELD (x18);
    WRITE_NODE_FIELD (x19);
    WRITE_NODE_FIELD (x20);
    WRITE_NODE_FIELD (x21);
    WRITE_NODE_FIELD (x22);
    WRITE_NODE_FIELD (x23);
    WRITE_NODE_FIELD (x24);
    WRITE_NODE_FIELD (x25);
    x26 (x27, "%.0f");
    x26 (x28, "%.4f");
    WRITE_BOOL_FIELD (x29);
    WRITE_BOOL_FIELD (x30);
    WRITE_BOOL_FIELD (x31);
    WRITE_BOOL_FIELD (x32);
    WRITE_BOOL_FIELD (x33);
    WRITE_INT_FIELD (x34);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1510" endline="1539">
static void x1 (StringInfo x2, RelOptInfo *x3) {
    x4 ("RELOPTINFO");
    x5 (x6, x7);
    WRITE_BITMAPSET_FIELD (x8);
    x9 (x10, "%.0f");
    WRITE_INT_FIELD (x11);
    WRITE_NODE_FIELD (x12);
    WRITE_NODE_FIELD (x13);
    WRITE_NODE_FIELD (x14);
    WRITE_NODE_FIELD (x15);
    WRITE_NODE_FIELD (x16);
    WRITE_UINT_FIELD (x17);
    x5 (x18, x19);
    WRITE_INT_FIELD (x20);
    WRITE_INT_FIELD (x21);
    WRITE_NODE_FIELD (x22);
    WRITE_UINT_FIELD (x23);
    x9 (x24, "%.0f");
    WRITE_NODE_FIELD (x25);
    WRITE_NODE_FIELD (x26);
    WRITE_NODE_FIELD (x27);
    WRITE_NODE_FIELD (x28);
    WRITE_BOOL_FIELD (x29);
    WRITE_BITMAPSET_FIELD (x30);
    WRITE_NODE_FIELD (x31);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1541" endline="1556">
static void x1 (StringInfo x2, IndexOptInfo *x3) {
    x4 ("INDEXOPTINFO");
    WRITE_OID_FIELD (x5);
    WRITE_UINT_FIELD (x6);
    x7 (x8, "%.0f");
    WRITE_INT_FIELD (x9);
    WRITE_NODE_FIELD (x10);
    WRITE_NODE_FIELD (x11);
    WRITE_BOOL_FIELD (x12);
    WRITE_BOOL_FIELD (x13);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1558" endline="1580">
static void x1 (StringInfo x2, EquivalenceClass *x3) {
    while (x3->x4)
        x3 = x3->x4;
    x5 ("EQUIVALENCECLASS");
    WRITE_NODE_FIELD (x6);
    WRITE_NODE_FIELD (x7);
    WRITE_NODE_FIELD (x8);
    WRITE_NODE_FIELD (x9);
    WRITE_BITMAPSET_FIELD (x10);
    WRITE_BOOL_FIELD (x11);
    WRITE_BOOL_FIELD (x12);
    WRITE_BOOL_FIELD (x13);
    WRITE_BOOL_FIELD (x14);
    WRITE_UINT_FIELD (x15);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1582" endline="1592">
static void x1 (StringInfo x2, EquivalenceMember *x3) {
    x4 ("EQUIVALENCEMEMBER");
    WRITE_NODE_FIELD (x5);
    WRITE_BITMAPSET_FIELD (x6);
    WRITE_BOOL_FIELD (x7);
    WRITE_BOOL_FIELD (x8);
    WRITE_OID_FIELD (x9);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1594" endline="1603">
static void x1 (StringInfo x2, PathKey *x3) {
    x4 ("PATHKEY");
    WRITE_NODE_FIELD (x5);
    WRITE_OID_FIELD (x6);
    WRITE_INT_FIELD (x7);
    WRITE_BOOL_FIELD (x8);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1605" endline="1632">
static void x1 (StringInfo x2, RestrictInfo *x3) {
    x4 ("RESTRICTINFO");
    WRITE_NODE_FIELD (x5);
    WRITE_BOOL_FIELD (x6);
    WRITE_BOOL_FIELD (x7);
    WRITE_BOOL_FIELD (x8);
    WRITE_BOOL_FIELD (x9);
    WRITE_BITMAPSET_FIELD (x10);
    WRITE_BITMAPSET_FIELD (x11);
    WRITE_BITMAPSET_FIELD (x12);
    WRITE_BITMAPSET_FIELD (x13);
    WRITE_BITMAPSET_FIELD (x14);
    WRITE_NODE_FIELD (x15);
    x16 (x17, "%.4f");
    x16 (x18, "%.4f");
    WRITE_NODE_FIELD (x19);
    WRITE_NODE_FIELD (x20);
    WRITE_NODE_FIELD (x21);
    WRITE_BOOL_FIELD (x22);
    WRITE_OID_FIELD (x23);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1634" endline="1642">
static void x1 (StringInfo x2, InnerIndexscanInfo *x3) {
    x4 ("INNERINDEXSCANINFO");
    WRITE_BITMAPSET_FIELD (x5);
    WRITE_BOOL_FIELD (x6);
    WRITE_NODE_FIELD (x7);
    WRITE_NODE_FIELD (x8);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1644" endline="1653">
static void x1 (StringInfo x2, PlaceHolderVar *x3) {
    x4 ("PLACEHOLDERVAR");
    WRITE_NODE_FIELD (x5);
    WRITE_BITMAPSET_FIELD (x6);
    WRITE_UINT_FIELD (x7);
    WRITE_UINT_FIELD (x8);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1655" endline="1668">
static void x1 (StringInfo x2, SpecialJoinInfo *x3) {
    x4 ("SPECIALJOININFO");
    WRITE_BITMAPSET_FIELD (x5);
    WRITE_BITMAPSET_FIELD (x6);
    WRITE_BITMAPSET_FIELD (x7);
    WRITE_BITMAPSET_FIELD (x8);
    x9 (x10, x11);
    WRITE_BOOL_FIELD (x12);
    WRITE_BOOL_FIELD (x13);
    WRITE_NODE_FIELD (x14);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1670" endline="1681">
static void x1 (StringInfo x2, AppendRelInfo *x3) {
    x4 ("APPENDRELINFO");
    WRITE_UINT_FIELD (x5);
    WRITE_UINT_FIELD (x6);
    WRITE_OID_FIELD (x7);
    WRITE_OID_FIELD (x8);
    WRITE_NODE_FIELD (x9);
    WRITE_OID_FIELD (x10);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1683" endline="1694">
static void x1 (StringInfo x2, PlaceHolderInfo *x3) {
    x4 ("PLACEHOLDERINFO");
    WRITE_UINT_FIELD (x5);
    WRITE_NODE_FIELD (x6);
    WRITE_BITMAPSET_FIELD (x7);
    WRITE_BITMAPSET_FIELD (x8);
    WRITE_BITMAPSET_FIELD (x9);
    WRITE_INT_FIELD (x10);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1696" endline="1703">
static void x1 (StringInfo x2, PlannerParamItem *x3) {
    x4 ("PLANNERPARAMITEM");
    WRITE_NODE_FIELD (x5);
    WRITE_UINT_FIELD (x6);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1711" endline="1723">
static void x1 (StringInfo x2, CreateStmt *x3) {
    x4 ("CREATESTMT");
    WRITE_NODE_FIELD (x5);
    WRITE_NODE_FIELD (x6);
    WRITE_NODE_FIELD (x7);
    WRITE_NODE_FIELD (x8);
    WRITE_NODE_FIELD (x9);
    x10 (x11, x12);
    WRITE_STRING_FIELD (x13);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1725" endline="1741">
static void x1 (StringInfo x2, IndexStmt *x3) {
    x4 ("INDEXSTMT");
    WRITE_STRING_FIELD (x5);
    WRITE_NODE_FIELD (x6);
    WRITE_STRING_FIELD (x7);
    WRITE_STRING_FIELD (x8);
    WRITE_NODE_FIELD (x9);
    WRITE_NODE_FIELD (x10);
    WRITE_NODE_FIELD (x11);
    WRITE_BOOL_FIELD (x12);
    WRITE_BOOL_FIELD (x13);
    WRITE_BOOL_FIELD (x14);
    WRITE_BOOL_FIELD (x15);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1743" endline="1749">
static void x1 (StringInfo x2, NotifyStmt *x3) {
    x4 ("NOTIFY");
    WRITE_STRING_FIELD (x5);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1751" endline="1759">
static void x1 (StringInfo x2, DeclareCursorStmt *x3) {
    x4 ("DECLARECURSOR");
    WRITE_STRING_FIELD (x5);
    WRITE_INT_FIELD (x6);
    WRITE_NODE_FIELD (x7);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1761" endline="1784">
static void x1 (StringInfo x2, SelectStmt *x3) {
    x4 ("SELECT");
    WRITE_NODE_FIELD (x5);
    WRITE_NODE_FIELD (x6);
    WRITE_NODE_FIELD (x7);
    WRITE_NODE_FIELD (x8);
    WRITE_NODE_FIELD (x9);
    WRITE_NODE_FIELD (x10);
    WRITE_NODE_FIELD (x11);
    WRITE_NODE_FIELD (x12);
    WRITE_NODE_FIELD (x13);
    WRITE_NODE_FIELD (x14);
    WRITE_NODE_FIELD (x15);
    WRITE_NODE_FIELD (x16);
    WRITE_NODE_FIELD (x17);
    WRITE_NODE_FIELD (x18);
    x19 (x20, x21);
    WRITE_BOOL_FIELD (x22);
    WRITE_NODE_FIELD (x23);
    WRITE_NODE_FIELD (x24);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1786" endline="1798">
static void x1 (StringInfo x2, FuncCall *x3) {
    x4 ("FUNCCALL");
    WRITE_NODE_FIELD (x5);
    WRITE_NODE_FIELD (x6);
    WRITE_BOOL_FIELD (x7);
    WRITE_BOOL_FIELD (x8);
    WRITE_BOOL_FIELD (x9);
    WRITE_NODE_FIELD (x10);
    WRITE_LOCATION_FIELD (x11);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1800" endline="1809">
static void x1 (StringInfo x2, DefElem *x3) {
    x4 ("DEFELEM");
    WRITE_STRING_FIELD (x5);
    WRITE_STRING_FIELD (x6);
    WRITE_NODE_FIELD (x7);
    x8 (x9, x10);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1811" endline="1818">
static void x1 (StringInfo x2, InhRelation *x3) {
    x4 ("INHRELATION");
    WRITE_NODE_FIELD (x5);
    WRITE_NODE_FIELD (x6);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1820" endline="1828">
static void x1 (StringInfo x2, LockingClause *x3) {
    x4 ("LOCKINGCLAUSE");
    WRITE_NODE_FIELD (x5);
    WRITE_BOOL_FIELD (x6);
    WRITE_BOOL_FIELD (x7);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1830" endline="1839">
static void x1 (StringInfo x2, XmlSerialize *x3) {
    x4 ("XMLSERIALIZE");
    x5 (x6, x7);
    WRITE_NODE_FIELD (x8);
    WRITE_NODE_FIELD (x9);
    WRITE_LOCATION_FIELD (x10);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1841" endline="1854">
static void x1 (StringInfo x2, ColumnDef *x3) {
    x4 ("COLUMNDEF");
    WRITE_STRING_FIELD (x5);
    WRITE_NODE_FIELD (x6);
    WRITE_INT_FIELD (x7);
    WRITE_BOOL_FIELD (x8);
    WRITE_BOOL_FIELD (x9);
    WRITE_NODE_FIELD (x10);
    WRITE_NODE_FIELD (x11);
    WRITE_NODE_FIELD (x12);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1856" endline="1869">
static void x1 (StringInfo x2, TypeName *x3) {
    x4 ("TYPENAME");
    WRITE_NODE_FIELD (x5);
    WRITE_OID_FIELD (x6);
    WRITE_BOOL_FIELD (x7);
    WRITE_BOOL_FIELD (x8);
    WRITE_NODE_FIELD (x9);
    WRITE_INT_FIELD (x10);
    WRITE_NODE_FIELD (x11);
    WRITE_LOCATION_FIELD (x12);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1871" endline="1879">
static void x1 (StringInfo x2, TypeCast *x3) {
    x4 ("TYPECAST");
    WRITE_NODE_FIELD (x5);
    WRITE_NODE_FIELD (x6);
    WRITE_LOCATION_FIELD (x7);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1881" endline="1891">
static void x1 (StringInfo x2, IndexElem *x3) {
    x4 ("INDEXELEM");
    WRITE_STRING_FIELD (x5);
    WRITE_NODE_FIELD (x6);
    WRITE_NODE_FIELD (x7);
    x8 (x9, x10);
    x8 (x11, x12);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1893" endline="1948">
static void x1 (StringInfo x2, Query *x3) {
    x4 ("QUERY");
    x5 (x6, x7);
    x5 (x8, x9);
    WRITE_BOOL_FIELD (x10);
    if (x3->x11) {
        switch (x12 (x3->x11)) {
        case x13 :
        case x14 :
        case x15 :
        case x16 :
            x17 (x11);
            break;
        default :
            x18 (x2, " :utilityStmt ?");
            break;
        }
    }
    else
        x18 (x2, " :utilityStmt <>");
    WRITE_INT_FIELD (x19);
    WRITE_NODE_FIELD (x20);
    WRITE_BOOL_FIELD (x21);
    WRITE_BOOL_FIELD (x22);
    WRITE_BOOL_FIELD (x23);
    WRITE_BOOL_FIELD (x24);
    WRITE_BOOL_FIELD (x25);
    WRITE_NODE_FIELD (x26);
    WRITE_NODE_FIELD (x27);
    WRITE_NODE_FIELD (x28);
    WRITE_NODE_FIELD (x29);
    WRITE_NODE_FIELD (x30);
    WRITE_NODE_FIELD (x31);
    WRITE_NODE_FIELD (x32);
    WRITE_NODE_FIELD (x33);
    WRITE_NODE_FIELD (x34);
    WRITE_NODE_FIELD (x35);
    WRITE_NODE_FIELD (x36);
    WRITE_NODE_FIELD (x37);
    WRITE_NODE_FIELD (x38);
    WRITE_NODE_FIELD (x39);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1950" endline="1959">
static void x1 (StringInfo x2, SortGroupClause *x3) {
    x4 ("SORTGROUPCLAUSE");
    WRITE_UINT_FIELD (x5);
    WRITE_OID_FIELD (x6);
    WRITE_OID_FIELD (x7);
    WRITE_BOOL_FIELD (x8);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1961" endline="1973">
static void x1 (StringInfo x2, WindowClause *x3) {
    x4 ("WINDOWCLAUSE");
    WRITE_STRING_FIELD (x5);
    WRITE_STRING_FIELD (x6);
    WRITE_NODE_FIELD (x7);
    WRITE_NODE_FIELD (x8);
    WRITE_INT_FIELD (x9);
    WRITE_UINT_FIELD (x10);
    WRITE_BOOL_FIELD (x11);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1975" endline="1985">
static void x1 (StringInfo x2, RowMarkClause *x3) {
    x4 ("ROWMARKCLAUSE");
    WRITE_UINT_FIELD (x5);
    WRITE_UINT_FIELD (x6);
    WRITE_BOOL_FIELD (x7);
    WRITE_BOOL_FIELD (x8);
    WRITE_BOOL_FIELD (x9);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1987" endline="1995">
static void x1 (StringInfo x2, WithClause *x3) {
    x4 ("WITHCLAUSE");
    WRITE_NODE_FIELD (x5);
    WRITE_BOOL_FIELD (x6);
    WRITE_LOCATION_FIELD (x7);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1997" endline="2011">
static void x1 (StringInfo x2, CommonTableExpr *x3) {
    x4 ("COMMONTABLEEXPR");
    WRITE_STRING_FIELD (x5);
    WRITE_NODE_FIELD (x6);
    WRITE_NODE_FIELD (x7);
    WRITE_LOCATION_FIELD (x8);
    WRITE_BOOL_FIELD (x9);
    WRITE_INT_FIELD (x10);
    WRITE_NODE_FIELD (x11);
    WRITE_NODE_FIELD (x12);
    WRITE_NODE_FIELD (x13);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2013" endline="2025">
static void x1 (StringInfo x2, SetOperationStmt *x3) {
    x4 ("SETOPERATIONSTMT");
    x5 (x6, x7);
    WRITE_BOOL_FIELD (x8);
    WRITE_NODE_FIELD (x9);
    WRITE_NODE_FIELD (x10);
    WRITE_NODE_FIELD (x11);
    WRITE_NODE_FIELD (x12);
    WRITE_NODE_FIELD (x13);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2027" endline="2076">
static void x1 (StringInfo x2, RangeTblEntry *x3) {
    x4 ("RTE");
    WRITE_NODE_FIELD (x5);
    WRITE_NODE_FIELD (x6);
    x7 (x8, x9);
    switch (x3->x8) {
    case x10 :
    case x11 :
        x12 (x13);
        break;
    case x14 :
        x15 (x16);
        break;
    case x17 :
        x7 (x18, x19);
        WRITE_NODE_FIELD (x20);
        break;
    case x21 :
        x15 (x22);
        WRITE_NODE_FIELD (x23);
        WRITE_NODE_FIELD (x24);
        break;
    case x25 :
        x15 (x26);
        break;
    case x27 :
        x28 (x29);
        WRITE_UINT_FIELD (x30);
        WRITE_BOOL_FIELD (x31);
        WRITE_NODE_FIELD (x32);
        WRITE_NODE_FIELD (x33);
        break;
    default :
        x34 (x35, "unrecognized RTE kind: %d", (int) x3->x8);
        break;
    }
    WRITE_BOOL_FIELD (x36);
    WRITE_BOOL_FIELD (x37);
    WRITE_UINT_FIELD (x38);
    WRITE_OID_FIELD (x39);
    WRITE_BITMAPSET_FIELD (x40);
    WRITE_BITMAPSET_FIELD (x41);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2078" endline="2132">
static void x1 (StringInfo x2, A_Expr *x3) {
    x4 ("AEXPR");
    switch (x3->x5) {
    case x6 :
        x7 (x2, " ");
        WRITE_NODE_FIELD (x8);
        break;
    case x9 :
        x7 (x2, " AND");
        break;
    case x10 :
        x7 (x2, " OR");
        break;
    case x11 :
        x7 (x2, " NOT");
        break;
    case x12 :
        x7 (x2, " ");
        WRITE_NODE_FIELD (x8);
        x7 (x2, " ANY ");
        break;
    case x13 :
        x7 (x2, " ");
        WRITE_NODE_FIELD (x8);
        x7 (x2, " ALL ");
        break;
    case x14 :
        x7 (x2, " DISTINCT ");
        WRITE_NODE_FIELD (x8);
        break;
    case x15 :
        x7 (x2, " NULLIF ");
        WRITE_NODE_FIELD (x8);
        break;
    case x16 :
        x7 (x2, " OF ");
        WRITE_NODE_FIELD (x8);
        break;
    case x17 :
        x7 (x2, " IN ");
        WRITE_NODE_FIELD (x8);
        break;
    default :
        x7 (x2, " ??");
        break;
    }
    WRITE_NODE_FIELD (x18);
    WRITE_NODE_FIELD (x19);
    WRITE_LOCATION_FIELD (x20);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2134" endline="2167">
static void x1 (StringInfo x2, Value *x3) {
    switch (x3->x4) {
    case x5 :
        x6 (x2, "%ld", x3->x7.x8);
        break;
    case x9 :
        x10 (x2, x3->x7.x2);
        break;
    case x11 :
        x12 (x2, '"');
        x13 (x2, x3 -> x7.x2);
        x12 (x2, '"');
        break;
    case x14 :
        x10 (x2, x3->x7.x2);
        break;
    case x15 :
        x10 (x2, "NULL");
        break;
    default :
        x16 (x17, "unrecognized node type: %d", (int) x3->x4);
        break;
    }
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2169" endline="2176">
static void x1 (StringInfo x2, ColumnRef *x3) {
    x4 ("COLUMNREF");
    WRITE_NODE_FIELD (x5);
    WRITE_LOCATION_FIELD (x6);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2178" endline="2185">
static void x1 (StringInfo x2, ParamRef *x3) {
    x4 ("PARAMREF");
    WRITE_INT_FIELD (x5);
    WRITE_LOCATION_FIELD (x6);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2187" endline="2195">
static void x1 (StringInfo x2, A_Const *x3) {
    x4 ("A_CONST");
    x5 (x2, " :val ");
    x6 (x2, & (x3 -> x7));
    WRITE_LOCATION_FIELD (x8);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2197" endline="2201">
static void x1 (StringInfo x2, A_Star *x3) {
    x4 ("A_STAR");
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2203" endline="2210">
static void x1 (StringInfo x2, A_Indices *x3) {
    x4 ("A_INDICES");
    WRITE_NODE_FIELD (x5);
    WRITE_NODE_FIELD (x6);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2212" endline="2219">
static void x1 (StringInfo x2, A_Indirection *x3) {
    x4 ("A_INDIRECTION");
    WRITE_NODE_FIELD (x5);
    WRITE_NODE_FIELD (x6);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2221" endline="2228">
static void x1 (StringInfo x2, A_ArrayExpr *x3) {
    x4 ("A_ARRAYEXPR");
    WRITE_NODE_FIELD (x5);
    WRITE_LOCATION_FIELD (x6);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2230" endline="2239">
static void x1 (StringInfo x2, ResTarget *x3) {
    x4 ("RESTARGET");
    WRITE_STRING_FIELD (x5);
    WRITE_NODE_FIELD (x6);
    WRITE_NODE_FIELD (x7);
    WRITE_LOCATION_FIELD (x8);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2241" endline="2251">
static void x1 (StringInfo x2, SortBy *x3) {
    x4 ("SORTBY");
    WRITE_NODE_FIELD (x3);
    x5 (x6, x7);
    x5 (x8, x9);
    WRITE_NODE_FIELD (x10);
    WRITE_LOCATION_FIELD (x11);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2253" endline="2264">
static void x1 (StringInfo x2, WindowDef *x3) {
    x4 ("WINDOWDEF");
    WRITE_STRING_FIELD (x5);
    WRITE_STRING_FIELD (x6);
    WRITE_NODE_FIELD (x7);
    WRITE_NODE_FIELD (x8);
    WRITE_INT_FIELD (x9);
    WRITE_LOCATION_FIELD (x10);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2266" endline="2273">
static void x1 (StringInfo x2, RangeSubselect *x3) {
    x4 ("RANGESUBSELECT");
    WRITE_NODE_FIELD (x5);
    WRITE_NODE_FIELD (x6);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2275" endline="2283">
static void x1 (StringInfo x2, RangeFunction *x3) {
    x4 ("RANGEFUNCTION");
    WRITE_NODE_FIELD (x5);
    WRITE_NODE_FIELD (x6);
    WRITE_NODE_FIELD (x7);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2285" endline="2329">
static void x1 (StringInfo x2, Constraint *x3) {
    x4 ("CONSTRAINT");
    WRITE_STRING_FIELD (x5);
    x6 (x2, " :contype ");
    switch (x3->x7) {
    case x8 :
        x6 (x2, "PRIMARY_KEY");
        WRITE_NODE_FIELD (x9);
        WRITE_NODE_FIELD (x10);
        WRITE_STRING_FIELD (x11);
        break;
    case x12 :
        x6 (x2, "UNIQUE");
        WRITE_NODE_FIELD (x9);
        WRITE_NODE_FIELD (x10);
        WRITE_STRING_FIELD (x11);
        break;
    case x13 :
        x6 (x2, "CHECK");
        WRITE_NODE_FIELD (x14);
        WRITE_STRING_FIELD (x15);
        break;
    case x16 :
        x6 (x2, "DEFAULT");
        WRITE_NODE_FIELD (x14);
        WRITE_STRING_FIELD (x15);
        break;
    case x17 :
        x6 (x2, "NOT_NULL");
        break;
    default :
        x6 (x2, "<unrecognized_constraint>");
        break;
    }
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2331" endline="2346">
static void x1 (StringInfo x2, FkConstraint *x3) {
    x4 ("FKCONSTRAINT");
    WRITE_STRING_FIELD (x5);
    WRITE_NODE_FIELD (x6);
    WRITE_NODE_FIELD (x7);
    WRITE_NODE_FIELD (x8);
    WRITE_CHAR_FIELD (x9);
    WRITE_CHAR_FIELD (x10);
    WRITE_CHAR_FIELD (x11);
    WRITE_BOOL_FIELD (x12);
    WRITE_BOOL_FIELD (x13);
    WRITE_BOOL_FIELD (x14);
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2353" endline="2805">
static void x1 (StringInfo x2, void *x3) {
    if (x3 == x4)
        x5 (x2, "<>");
    else if (x6 (x3, x7) || x6 (x3, x8) || x6 (x3, x9))
        x10 (x2, x3);
    else if (x6 (x3, x11) || x6 (x3, x12) || x6 (x3, x13) || x6 (x3, x14)) {
        x15 (x2, x3);
    }
    else {
        x16 (x2, '{');
        switch (x17 (x3)) {
        case x18 :
            x19 (x2, x3);
            break;
        case x20 :
            x21 (x2, x3);
            break;
        case x22 :
            x23 (x2, x3);
            break;
        case x24 :
            x25 (x2, x3);
            break;
        case x26 :
            x27 (x2, x3);
            break;
        case x28 :
            x29 (x2, x3);
            break;
        case x30 :
            x31 (x2, x3);
            break;
        case x32 :
            x33 (x2, x3);
            break;
        case x34 :
            x35 (x2, x3);
            break;
        case x36 :
            x37 (x2, x3);
            break;
        case x38 :
            x39 (x2, x3);
            break;
        case x40 :
            x41 (x2, x3);
            break;
        case x42 :
            x43 (x2, x3);
            break;
        case x44 :
            x45 (x2, x3);
            break;
        case x46 :
            x47 (x2, x3);
            break;
        case x48 :
            x49 (x2, x3);
            break;
        case x50 :
            x51 (x2, x3);
            break;
        case x52 :
            x53 (x2, x3);
            break;
        case x54 :
            x55 (x2, x3);
            break;
        case x56 :
            x57 (x2, x3);
            break;
        case x58 :
            x59 (x2, x3);
            break;
        case x60 :
            x61 (x2, x3);
            break;
        case x62 :
            x63 (x2, x3);
            break;
        case x64 :
            x65 (x2, x3);
            break;
        case x66 :
            x67 (x2, x3);
            break;
        case x68 :
            x69 (x2, x3);
            break;
        case x70 :
            x71 (x2, x3);
            break;
        case x72 :
            x73 (x2, x3);
            break;
        case x74 :
            x75 (x2, x3);
            break;
        case x76 :
            x77 (x2, x3);
            break;
        case x78 :
            x79 (x2, x3);
            break;
        case x80 :
            x81 (x2, x3);
            break;
        case x82 :
            x83 (x2, x3);
            break;
        case x84 :
            x85 (x2, x3);
            break;
        case x86 :
            x87 (x2, x3);
            break;
        case x88 :
            x89 (x2, x3);
            break;
        case x90 :
            x91 (x2, x3);
            break;
        case x92 :
            x93 (x2, x3);
            break;
        case x94 :
            x95 (x2, x3);
            break;
        case x96 :
            x97 (x2, x3);
            break;
        case x98 :
            x99 (x2, x3);
            break;
        case x100 :
            x101 (x2, x3);
            break;
        case x102 :
            x103 (x2, x3);
            break;
        case x104 :
            x105 (x2, x3);
            break;
        case x106 :
            x107 (x2, x3);
            break;
        case x108 :
            x109 (x2, x3);
            break;
        case x110 :
            x111 (x2, x3);
            break;
        case x112 :
            x113 (x2, x3);
            break;
        case x114 :
            x115 (x2, x3);
            break;
        case x116 :
            x117 (x2, x3);
            break;
        case x118 :
            x119 (x2, x3);
            break;
        case x120 :
            x121 (x2, x3);
            break;
        case x122 :
            x123 (x2, x3);
            break;
        case x124 :
            x125 (x2, x3);
            break;
        case x126 :
            x127 (x2, x3);
            break;
        case x128 :
            x129 (x2, x3);
            break;
        case x130 :
            x131 (x2, x3);
            break;
        case x132 :
            x133 (x2, x3);
            break;
        case x134 :
            x135 (x2, x3);
            break;
        case x136 :
            x137 (x2, x3);
            break;
        case x138 :
            x139 (x2, x3);
            break;
        case x140 :
            x141 (x2, x3);
            break;
        case x142 :
            x143 (x2, x3);
            break;
        case x144 :
            x145 (x2, x3);
            break;
        case x146 :
            x147 (x2, x3);
            break;
        case x148 :
            x149 (x2, x3);
            break;
        case x150 :
            x151 (x2, x3);
            break;
        case x152 :
            x153 (x2, x3);
            break;
        case x154 :
            x155 (x2, x3);
            break;
        case x156 :
            x157 (x2, x3);
            break;
        case x158 :
            x159 (x2, x3);
            break;
        case x160 :
            x161 (x2, x3);
            break;
        case x162 :
            x163 (x2, x3);
            break;
        case x164 :
            x165 (x2, x3);
            break;
        case x166 :
            x167 (x2, x3);
            break;
        case x168 :
            x169 (x2, x3);
            break;
        case x170 :
            x171 (x2, x3);
            break;
        case x172 :
            x173 (x2, x3);
            break;
        case x174 :
            x175 (x2, x3);
            break;
        case x176 :
            x177 (x2, x3);
            break;
        case x178 :
            x179 (x2, x3);
            break;
        case x180 :
            x181 (x2, x3);
            break;
        case x182 :
            x183 (x2, x3);
            break;
        case x184 :
            x185 (x2, x3);
            break;
        case x186 :
            x187 (x2, x3);
            break;
        case x188 :
            x189 (x2, x3);
            break;
        case x190 :
            x191 (x2, x3);
            break;
        case x192 :
            x193 (x2, x3);
            break;
        case x194 :
            x195 (x2, x3);
            break;
        case x196 :
            x197 (x2, x3);
            break;
        case x198 :
            x199 (x2, x3);
            break;
        case x200 :
            x201 (x2, x3);
            break;
        case x202 :
            x203 (x2, x3);
            break;
        case x204 :
            x205 (x2, x3);
            break;
        case x206 :
            x207 (x2, x3);
            break;
        case x208 :
            x209 (x2, x3);
            break;
        case x210 :
            x211 (x2, x3);
            break;
        case x212 :
            x213 (x2, x3);
            break;
        case x214 :
            x215 (x2, x3);
            break;
        case x216 :
            x217 (x2, x3);
            break;
        case x218 :
            x219 (x2, x3);
            break;
        case x220 :
            x221 (x2, x3);
            break;
        case x222 :
            x223 (x2, x3);
            break;
        case x224 :
            x225 (x2, x3);
            break;
        case x226 :
            x227 (x2, x3);
            break;
        case x228 :
            x229 (x2, x3);
            break;
        case x230 :
            x231 (x2, x3);
            break;
        case x232 :
            x233 (x2, x3);
            break;
        case x234 :
            x235 (x2, x3);
            break;
        case x236 :
            x237 (x2, x3);
            break;
        case x238 :
            x239 (x2, x3);
            break;
        case x240 :
            x241 (x2, x3);
            break;
        case x242 :
            x243 (x2, x3);
            break;
        case x244 :
            x245 (x2, x3);
            break;
        case x246 :
            x247 (x2, x3);
            break;
        case x248 :
            x249 (x2, x3);
            break;
        case x250 :
            x251 (x2, x3);
            break;
        case x252 :
            x253 (x2, x3);
            break;
        case x254 :
            x255 (x2, x3);
            break;
        case x256 :
            x257 (x2, x3);
            break;
        case x258 :
            x259 (x2, x3);
            break;
        case x260 :
            x261 (x2, x3);
            break;
        case x262 :
            x263 (x2, x3);
            break;
        case x264 :
            x265 (x2, x3);
            break;
        case x266 :
            x267 (x2, x3);
            break;
        case x268 :
            x269 (x2, x3);
            break;
        case x270 :
            x271 (x2, x3);
            break;
        case x272 :
            x273 (x2, x3);
            break;
        case x274 :
            x275 (x2, x3);
            break;
        case x276 :
            x277 (x2, x3);
            break;
        case x278 :
            x279 (x2, x3);
            break;
        case x280 :
            x281 (x2, x3);
            break;
        case x282 :
            x283 (x2, x3);
            break;
        case x284 :
            x285 (x2, x3);
            break;
        case x286 :
            x287 (x2, x3);
            break;
        case x288 :
            x289 (x2, x3);
            break;
        case x290 :
            x291 (x2, x3);
            break;
        case x292 :
            x293 (x2, x3);
            break;
        case x294 :
            x295 (x2, x3);
            break;
        default :
            x296 (x297, "could not dump unrecognized node type: %d", (int) x17 (x3));
            break;
        }
        x16 (x2, '}');
    }
}
</source>
<source file="examples/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2811" endline="2820">
char *x1 (void *x2) {
    StringInfoData x3;
    x4 (& x3);
    x5 (& x3, x2);
    return x3.x6;
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="86" endline="97">
void x1 (StringInfo x2, char x3) {
    x4 (x2);
    x2->x5 = x3;
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="103" endline="107">
void x1 (StringInfo x2, int x3) {
    x4 (x2, x3);
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="113" endline="117">
void x1 (StringInfo x2, const char *x3, int x4) {
    x5 (x2, x3, x4);
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="129" endline="149">
void x1 (StringInfo x2, const char *x3, int x4, x5 x6) {
    int x7 = x6 ? 4 : 0;
    char *x8;
    x8 = x9 (x3, x4);
    if (x8 != x3) {
        x4 = x10 (x8);
        x11 (x2, x4 + x7, 4);
        x12 (x2, x8, x4);
        x13 (x8);
    }
    else {
        x11 (x2, x4 + x7, 4);
        x12 (x2, x3, x4);
    }
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="161" endline="175">
void x1 (StringInfo x2, const char *x3, int x4) {
    char *x5;
    x5 = x6 (x3, x4);
    if (x5 != x3) {
        x4 = x7 (x5);
        x8 (x2, x5, x4);
        x9 (x5);
    }
    else
        x8 (x2, x3, x4);
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="184" endline="199">
void x1 (StringInfo x2, const char *x3) {
    int x4 = x5 (x3);
    char *x6;
    x6 = x7 (x3, x4);
    if (x6 != x3) {
        x4 = x5 (x6);
        x8 (x2, x6, x4 + 1);
        x9 (x6);
    }
    else
        x8 (x2, x3, x4 +1);
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="216" endline="228">
void x1 (StringInfo x2, const char *x3) {
    while (*x3) {
        char x4 = *x3++;
        if (x5 (x4))
            x4 = '?';
        x6 (x2, x4);
    }
    x7 (x2, '\0');
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="234" endline="259">
void x1 (StringInfo x2, int x3, int x4) {
    unsigned char x5;
    x6 x7;
    x8 x9;
    switch (x4) {
    case 1 :
        x5 = (unsigned char) x3;
        x10 (x2, (char *) & x5, 1);
        break;
    case 2 :
        x7 = x11 ((x6) x3);
        x10 (x2, (char *) & x7, 2);
        break;
    case 4 :
        x9 = x12 ((x8) x3);
        x10 (x2, (char *) & x9, 4);
        break;
    default :
        x13 (x14, "unsupported integer size %d", x4);
        break;
    }
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="269" endline="288">
void x1 (StringInfo x2, x3 x4) {
    x5 x6;
    x6 = (x5) (x4 >> 32);
    x6 = x7 (x6);
    x8 (x2, (char *) & x6, 4);
    x6 = (x5) x4;
    x6 = x7 (x6);
    x8 (x2, (char *) & x6, 4);
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="301" endline="314">
void x1 (StringInfo x2, x3 x4) {
    union {
        x3 x4;
        x5 x6;
    } x7;
    x7.x4 = x4;
    x7.x6 = x8 (x7.x6);
    x9 (x2, (char *) & x7.x6, 4);
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="327" endline="360">
void x1 (StringInfo x2, x3 x4) {
    union {
        x3 x4;
        x5 x6;
    } x7;
    x7.x4 = x4;
    x8 (x2, x7.x6);
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="369" endline="377">
void x1 (StringInfo x2) {
    (void) x3 (x2->x4, x2->x5, x2->x6);
    x7 (x2 -> x5);
    x2->x5 = x8;
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="384" endline="393">
void x1 (StringInfo x2) {
    x3 (x2);
    x4 (x2, '\0');
    x4 (x2, '\0');
    x4 (x2, '\0');
    x4 (x2, '\0');
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="404" endline="414">
x1 *x2 (StringInfo x3) {
    x1 *x4 = (x1 *) x3->x5;
    x6 (x3 -> x7 >= x8);
    x9 (x4, x3 -> x7);
    return x4;
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="425" endline="439">
void x1 (char x2, const char *x3) {
    int x4 = x5 (x3);
    char *x6;
    x6 = x7 (x3, x4);
    if (x6 != x3) {
        (void) x8 (x2, x6, x5 (x6) +1);
        x9 (x6);
        return;
    }
    (void) x8 (x2, x3, x4 +1);
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="446" endline="450">
void x1 (char x2) {
    (void) x3 (x2, x4, 0);
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="457" endline="465">
int x1 (StringInfo x2) {
    if (x2->x3 >= x2->x4)
        x5 (x6, (x7 (x8), x9 ("no data left in message")));
    return (unsigned char) x2->x10[x2->x3++];
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="473" endline="501">
unsigned int x1 (StringInfo x2, int x3) {
    unsigned int x4;
    unsigned char x5;
    x6 x7;
    x8 x9;
    switch (x3) {
    case 1 :
        x10 (x2, (char *) &x5, 1);
        x4 = x5;
        break;
    case 2 :
        x10 (x2, (char *) &x7, 2);
        x4 = x11 (x7);
        break;
    case 4 :
        x10 (x2, (char *) &x9, 4);
        x4 = x12 (x9);
        break;
    default :
        x13 (x14, "unsupported integer size %d", x3);
        x4 = 0;
        break;
    }
    return x4;
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="511" endline="537">
x1 x2 (StringInfo x3) {
    x1 x4;
    x5 x6;
    x5 x7;
    x8 (x3, (char *) & x6, 4);
    x8 (x3, (char *) & x7, 4);
    x6 = x9 (x6);
    x7 = x9 (x7);
    x4 = x6;
    x4 <<= 32;
    x4 |= x7;
    return x4;
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="545" endline="556">
x1 x2 (StringInfo x3) {
    union {
        x1 x4;
        x5 x6;
    } x7;
    x7.x6 = x8 (x3, 4);
    return x7.x4;
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="564" endline="594">
x1 x2 (StringInfo x3) {
    union {
        x1 x4;
        x5 x6;
    } x7;
    x7.x6 = x8 (x3);
    return x7.x4;
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="603" endline="615">
const char *x1 (StringInfo x2, int x3) {
    const char *x4;
    if (x3 < 0 || x3 > (x2->x5 - x2->x6))
        x7 (x8, (x9 (x10), x11 ("insufficient data left in message")));
    x4 = &x2->x12[x2->x6];
    x2->x6 += x3;
    return x4;
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="623" endline="632">
void x1 (StringInfo x2, char *x3, int x4) {
    if (x4 < 0 || x4 > (x2->x5 - x2->x6))
        x7 (x8, (x9 (x10), x11 ("insufficient data left in message")));
    x12 (x3, & x2 -> x13 [x2 -> x6], x4);
    x2->x6 += x4;
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="641" endline="665">
char *x1 (StringInfo x2, int x3, int *x4) {
    char *x5;
    char *x6;
    if (x3 < 0 || x3 > (x2->x7 - x2->x8))
        x9 (x10, (x11 (x12), x13 ("insufficient data left in message")));
    x5 = &x2->x14[x2->x8];
    x2->x8 += x3;
    x6 = x15 (x5, x3);
    if (x6 != x5)
        *x4 = x16 (x6);
    else {
        x6 = (char *) x17 (x3 +1);
        x18 (x6, x5, x3);
        x6[x3] = '\0';
        *x4 = x3;
    }
    return x6;
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="674" endline="695">
const char *x1 (StringInfo x2) {
    char *x3;
    int x4;
    x3 = &x2->x5[x2->x6];
    x4 = x7 (x3);
    if (x2->x6 + x4 >= x2->x8)
        x9 (x10, (x11 (x12), x13 ("invalid string in message")));
    x2->x6 += x4 + 1;
    return x14 (x3, x4);
}
</source>
<source file="examples/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="701" endline="708">
void x1 (StringInfo x2) {
    if (x2->x3 != x2->x4)
        x5 (x6, (x7 (x8), x9 ("invalid message format")));
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="148" endline="184">
static Bitmapset *x1 (void) {
    Bitmapset *x2 = x3;
    x4 ();
    x5 = x6 (&x7);
    if (x5 == x3)
        x8 (x9, "incomplete Bitmapset structure");
    if (x7 != 1 || x5[0] != '(')
        x8 (x9, "unrecognized token: \"%.*s\"", x7, x5);
    x5 = x6 (&x7);
    if (x5 == x3)
        x8 (x9, "incomplete Bitmapset structure");
    if (x7 != 1 || x5[0] != 'b')
        x8 (x9, "unrecognized token: \"%.*s\"", x7, x5);
    for (;;) {
        int x10;
        char *x11;
        x5 = x6 (&x7);
        if (x5 == x3)
            x8 (x9, "unterminated Bitmapset structure");
        if (x7 == 1 && x5[0] == ')')
            break;
        x10 = (int) x12 (x5, &x11, 10);
        if (x11 != x5 + x7)
            x8 (x9, "unrecognized integer: \"%.*s\"", x7, x5);
        x2 = x13 (x2, x10);
    }
    return x2;
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="190" endline="222">
static Query *x1 (void) {
    READ_LOCALS (x2);
    x3 (x4, x5);
    x3 (x6, x7);
    READ_BOOL_FIELD (x8);
    READ_NODE_FIELD (x9);
    READ_INT_FIELD (x10);
    READ_NODE_FIELD (x11);
    READ_BOOL_FIELD (x12);
    READ_BOOL_FIELD (x13);
    READ_BOOL_FIELD (x14);
    READ_BOOL_FIELD (x15);
    READ_BOOL_FIELD (x16);
    READ_NODE_FIELD (x17);
    READ_NODE_FIELD (x18);
    READ_NODE_FIELD (x19);
    READ_NODE_FIELD (x20);
    READ_NODE_FIELD (x21);
    READ_NODE_FIELD (x22);
    READ_NODE_FIELD (x23);
    READ_NODE_FIELD (x24);
    READ_NODE_FIELD (x25);
    READ_NODE_FIELD (x26);
    READ_NODE_FIELD (x27);
    READ_NODE_FIELD (x28);
    READ_NODE_FIELD (x29);
    READ_NODE_FIELD (x30);
    x31 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="227" endline="235">
static NotifyStmt *x1 (void) {
    READ_LOCALS (x2);
    READ_STRING_FIELD (x3);
    x4 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="240" endline="250">
static DeclareCursorStmt *x1 (void) {
    READ_LOCALS (x2);
    READ_STRING_FIELD (x3);
    READ_INT_FIELD (x4);
    READ_NODE_FIELD (x5);
    x6 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="255" endline="266">
static SortGroupClause *x1 (void) {
    READ_LOCALS (x2);
    READ_UINT_FIELD (x3);
    READ_OID_FIELD (x4);
    READ_OID_FIELD (x5);
    READ_BOOL_FIELD (x6);
    x7 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="271" endline="285">
static WindowClause *x1 (void) {
    READ_LOCALS (x2);
    READ_STRING_FIELD (x3);
    READ_STRING_FIELD (x4);
    READ_NODE_FIELD (x5);
    READ_NODE_FIELD (x6);
    READ_INT_FIELD (x7);
    READ_UINT_FIELD (x8);
    READ_BOOL_FIELD (x9);
    x10 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="290" endline="302">
static RowMarkClause *x1 (void) {
    READ_LOCALS (x2);
    READ_UINT_FIELD (x3);
    READ_UINT_FIELD (x4);
    READ_BOOL_FIELD (x5);
    READ_BOOL_FIELD (x6);
    READ_BOOL_FIELD (x7);
    x8 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="307" endline="323">
static CommonTableExpr *x1 (void) {
    READ_LOCALS (x2);
    READ_STRING_FIELD (x3);
    READ_NODE_FIELD (x4);
    READ_NODE_FIELD (x5);
    READ_LOCATION_FIELD (x6);
    READ_BOOL_FIELD (x7);
    READ_INT_FIELD (x8);
    READ_NODE_FIELD (x9);
    READ_NODE_FIELD (x10);
    READ_NODE_FIELD (x11);
    x12 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="328" endline="342">
static SetOperationStmt *x1 (void) {
    READ_LOCALS (x2);
    x3 (x4, x5);
    READ_BOOL_FIELD (x6);
    READ_NODE_FIELD (x7);
    READ_NODE_FIELD (x8);
    READ_NODE_FIELD (x9);
    READ_NODE_FIELD (x10);
    READ_NODE_FIELD (x11);
    x12 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="349" endline="358">
static Alias *x1 (void) {
    READ_LOCALS (x2);
    READ_STRING_FIELD (x3);
    READ_NODE_FIELD (x4);
    x5 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="360" endline="376">
static RangeVar *x1 (void) {
    READ_LOCALS (x2);
    x3->x4 = x5;
    READ_STRING_FIELD (x6);
    READ_STRING_FIELD (x7);
    x8 (x9, x10);
    READ_BOOL_FIELD (x11);
    READ_NODE_FIELD (x12);
    READ_LOCATION_FIELD (x13);
    x14 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="378" endline="390">
static IntoClause *x1 (void) {
    READ_LOCALS (x2);
    READ_NODE_FIELD (x3);
    READ_NODE_FIELD (x4);
    READ_NODE_FIELD (x5);
    x6 (x7, x8);
    READ_STRING_FIELD (x9);
    x10 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="395" endline="410">
static Var *x1 (void) {
    READ_LOCALS (x2);
    READ_UINT_FIELD (x3);
    READ_INT_FIELD (x4);
    READ_OID_FIELD (x5);
    READ_INT_FIELD (x6);
    READ_UINT_FIELD (x7);
    READ_UINT_FIELD (x8);
    READ_INT_FIELD (x9);
    READ_LOCATION_FIELD (x10);
    x11 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="415" endline="434">
static Const *x1 (void) {
    READ_LOCALS (x2);
    READ_OID_FIELD (x3);
    READ_INT_FIELD (x4);
    READ_INT_FIELD (x5);
    READ_BOOL_FIELD (x6);
    READ_BOOL_FIELD (x7);
    READ_LOCATION_FIELD (x8);
    x9 = x10 (&x11);
    if (x12->x7)
        x9 = x10 (&x11);
    else
        x12->x13 = x14 (x12->x6);
    x15 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="439" endline="451">
static Param *x1 (void) {
    READ_LOCALS (x2);
    x3 (x4, x5);
    READ_INT_FIELD (x6);
    READ_OID_FIELD (x7);
    READ_INT_FIELD (x8);
    READ_LOCATION_FIELD (x9);
    x10 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="456" endline="470">
static Aggref *x1 (void) {
    READ_LOCALS (x2);
    READ_OID_FIELD (x3);
    READ_OID_FIELD (x4);
    READ_NODE_FIELD (x5);
    READ_UINT_FIELD (x6);
    READ_BOOL_FIELD (x7);
    READ_BOOL_FIELD (x8);
    READ_LOCATION_FIELD (x9);
    x10 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="475" endline="489">
static WindowFunc *x1 (void) {
    READ_LOCALS (x2);
    READ_OID_FIELD (x3);
    READ_OID_FIELD (x4);
    READ_NODE_FIELD (x5);
    READ_UINT_FIELD (x6);
    READ_BOOL_FIELD (x7);
    READ_BOOL_FIELD (x8);
    READ_LOCATION_FIELD (x9);
    x10 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="494" endline="508">
static ArrayRef *x1 (void) {
    READ_LOCALS (x2);
    READ_OID_FIELD (x3);
    READ_OID_FIELD (x4);
    READ_INT_FIELD (x5);
    READ_NODE_FIELD (x6);
    READ_NODE_FIELD (x7);
    READ_NODE_FIELD (x8);
    READ_NODE_FIELD (x9);
    x10 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="513" endline="526">
static FuncExpr *x1 (void) {
    READ_LOCALS (x2);
    READ_OID_FIELD (x3);
    READ_OID_FIELD (x4);
    READ_BOOL_FIELD (x5);
    x6 (x7, x8);
    READ_NODE_FIELD (x9);
    READ_LOCATION_FIELD (x10);
    x11 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="531" endline="555">
static OpExpr *x1 (void) {
    READ_LOCALS (x2);
    READ_OID_FIELD (x3);
    READ_OID_FIELD (x4);
    x5->x4 = x6;
    READ_OID_FIELD (x7);
    READ_BOOL_FIELD (x8);
    READ_NODE_FIELD (x9);
    READ_LOCATION_FIELD (x10);
    x11 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="560" endline="584">
static DistinctExpr *x1 (void) {
    READ_LOCALS (x2);
    READ_OID_FIELD (x3);
    READ_OID_FIELD (x4);
    x5->x4 = x6;
    READ_OID_FIELD (x7);
    READ_BOOL_FIELD (x8);
    READ_NODE_FIELD (x9);
    READ_LOCATION_FIELD (x10);
    x11 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="589" endline="612">
static ScalarArrayOpExpr *x1 (void) {
    READ_LOCALS (x2);
    READ_OID_FIELD (x3);
    READ_OID_FIELD (x4);
    x5->x4 = x6;
    READ_BOOL_FIELD (x7);
    READ_NODE_FIELD (x8);
    READ_LOCATION_FIELD (x9);
    x10 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="617" endline="638">
static BoolExpr *x1 (void) {
    READ_LOCALS (x2);
    x3 = x4 (&x5);
    x3 = x4 (&x5);
    if (x6 (x3, "and", 3) == 0)
        x7->x8 = x9;
    else if (x6 (x3, "or", 2) == 0)
        x7->x8 = x10;
    else if (x6 (x3, "not", 3) == 0)
        x7->x8 = x11;
    else
        x12 (x13, "unrecognized boolop \"%.*s\"", x5, x3);
    READ_NODE_FIELD (x14);
    READ_LOCATION_FIELD (x15);
    x16 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="643" endline="655">
static SubLink *x1 (void) {
    READ_LOCALS (x2);
    x3 (x4, x5);
    READ_NODE_FIELD (x6);
    READ_NODE_FIELD (x7);
    READ_NODE_FIELD (x8);
    READ_LOCATION_FIELD (x9);
    x10 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="664" endline="675">
static FieldSelect *x1 (void) {
    READ_LOCALS (x2);
    READ_NODE_FIELD (x3);
    READ_INT_FIELD (x4);
    READ_OID_FIELD (x5);
    READ_INT_FIELD (x6);
    x7 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="680" endline="691">
static FieldStore *x1 (void) {
    READ_LOCALS (x2);
    READ_NODE_FIELD (x3);
    READ_NODE_FIELD (x4);
    READ_NODE_FIELD (x5);
    READ_OID_FIELD (x6);
    x7 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="696" endline="708">
static RelabelType *x1 (void) {
    READ_LOCALS (x2);
    READ_NODE_FIELD (x3);
    READ_OID_FIELD (x4);
    READ_INT_FIELD (x5);
    x6 (x7, x8);
    READ_LOCATION_FIELD (x9);
    x10 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="713" endline="724">
static CoerceViaIO *x1 (void) {
    READ_LOCALS (x2);
    READ_NODE_FIELD (x3);
    READ_OID_FIELD (x4);
    x5 (x6, x7);
    READ_LOCATION_FIELD (x8);
    x9 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="729" endline="743">
static ArrayCoerceExpr *x1 (void) {
    READ_LOCALS (x2);
    READ_NODE_FIELD (x3);
    READ_OID_FIELD (x4);
    READ_OID_FIELD (x5);
    READ_INT_FIELD (x6);
    READ_BOOL_FIELD (x7);
    x8 (x9, x10);
    READ_LOCATION_FIELD (x11);
    x12 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="748" endline="759">
static ConvertRowtypeExpr *x1 (void) {
    READ_LOCALS (x2);
    READ_NODE_FIELD (x3);
    READ_OID_FIELD (x4);
    x5 (x6, x7);
    READ_LOCATION_FIELD (x8);
    x9 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="764" endline="776">
static CaseExpr *x1 (void) {
    READ_LOCALS (x2);
    READ_OID_FIELD (x3);
    READ_NODE_FIELD (x4);
    READ_NODE_FIELD (x5);
    READ_NODE_FIELD (x6);
    READ_LOCATION_FIELD (x7);
    x8 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="781" endline="791">
static CaseWhen *x1 (void) {
    READ_LOCALS (x2);
    READ_NODE_FIELD (x3);
    READ_NODE_FIELD (x4);
    READ_LOCATION_FIELD (x5);
    x6 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="796" endline="805">
static CaseTestExpr *x1 (void) {
    READ_LOCALS (x2);
    READ_OID_FIELD (x3);
    READ_INT_FIELD (x4);
    x5 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="810" endline="822">
static ArrayExpr *x1 (void) {
    READ_LOCALS (x2);
    READ_OID_FIELD (x3);
    READ_OID_FIELD (x4);
    READ_NODE_FIELD (x5);
    READ_BOOL_FIELD (x6);
    READ_LOCATION_FIELD (x7);
    x8 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="827" endline="839">
static RowExpr *x1 (void) {
    READ_LOCALS (x2);
    READ_NODE_FIELD (x3);
    READ_OID_FIELD (x4);
    x5 (x6, x7);
    READ_NODE_FIELD (x8);
    READ_LOCATION_FIELD (x9);
    x10 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="844" endline="856">
static RowCompareExpr *x1 (void) {
    READ_LOCALS (x2);
    x3 (x4, x5);
    READ_NODE_FIELD (x6);
    READ_NODE_FIELD (x7);
    READ_NODE_FIELD (x8);
    READ_NODE_FIELD (x9);
    x10 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="861" endline="871">
static CoalesceExpr *x1 (void) {
    READ_LOCALS (x2);
    READ_OID_FIELD (x3);
    READ_NODE_FIELD (x4);
    READ_LOCATION_FIELD (x5);
    x6 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="876" endline="887">
static MinMaxExpr *x1 (void) {
    READ_LOCALS (x2);
    READ_OID_FIELD (x3);
    x4 (x5, x6);
    READ_NODE_FIELD (x7);
    READ_LOCATION_FIELD (x8);
    x9 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="892" endline="908">
static XmlExpr *x1 (void) {
    READ_LOCALS (x2);
    x3 (x4, x5);
    READ_STRING_FIELD (x6);
    READ_NODE_FIELD (x7);
    READ_NODE_FIELD (x8);
    READ_NODE_FIELD (x9);
    x3 (x10, x11);
    READ_OID_FIELD (x12);
    READ_INT_FIELD (x13);
    READ_LOCATION_FIELD (x14);
    x15 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="913" endline="937">
static NullIfExpr *x1 (void) {
    READ_LOCALS (x2);
    READ_OID_FIELD (x3);
    READ_OID_FIELD (x4);
    x5->x4 = x6;
    READ_OID_FIELD (x7);
    READ_BOOL_FIELD (x8);
    READ_NODE_FIELD (x9);
    READ_LOCATION_FIELD (x10);
    x11 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="942" endline="951">
static NullTest *x1 (void) {
    READ_LOCALS (x2);
    READ_NODE_FIELD (x3);
    x4 (x5, x6);
    x7 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="956" endline="965">
static BooleanTest *x1 (void) {
    READ_LOCALS (x2);
    READ_NODE_FIELD (x3);
    x4 (x5, x6);
    x7 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="970" endline="982">
static CoerceToDomain *x1 (void) {
    READ_LOCALS (x2);
    READ_NODE_FIELD (x3);
    READ_OID_FIELD (x4);
    READ_INT_FIELD (x5);
    x6 (x7, x8);
    READ_LOCATION_FIELD (x9);
    x10 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="987" endline="997">
static CoerceToDomainValue *x1 (void) {
    READ_LOCALS (x2);
    READ_OID_FIELD (x3);
    READ_INT_FIELD (x4);
    READ_LOCATION_FIELD (x5);
    x6 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="1002" endline="1012">
static SetToDefault *x1 (void) {
    READ_LOCALS (x2);
    READ_OID_FIELD (x3);
    READ_INT_FIELD (x4);
    READ_LOCATION_FIELD (x5);
    x6 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="1017" endline="1027">
static CurrentOfExpr *x1 (void) {
    READ_LOCALS (x2);
    READ_UINT_FIELD (x3);
    READ_STRING_FIELD (x4);
    READ_INT_FIELD (x5);
    x6 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="1032" endline="1046">
static TargetEntry *x1 (void) {
    READ_LOCALS (x2);
    READ_NODE_FIELD (x3);
    READ_INT_FIELD (x4);
    READ_STRING_FIELD (x5);
    READ_UINT_FIELD (x6);
    READ_OID_FIELD (x7);
    READ_INT_FIELD (x8);
    READ_BOOL_FIELD (x9);
    x10 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="1051" endline="1059">
static RangeTblRef *x1 (void) {
    READ_LOCALS (x2);
    READ_INT_FIELD (x3);
    x4 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="1064" endline="1079">
static JoinExpr *x1 (void) {
    READ_LOCALS (x2);
    x3 (x4, x5);
    READ_BOOL_FIELD (x6);
    READ_NODE_FIELD (x7);
    READ_NODE_FIELD (x8);
    READ_NODE_FIELD (x9);
    READ_NODE_FIELD (x10);
    READ_NODE_FIELD (x11);
    READ_INT_FIELD (x12);
    x13 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="1084" endline="1093">
static FromExpr *x1 (void) {
    READ_LOCALS (x2);
    READ_NODE_FIELD (x3);
    READ_NODE_FIELD (x4);
    x5 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="1103" endline="1155">
static RangeTblEntry *x1 (void) {
    READ_LOCALS (x2);
    READ_NODE_FIELD (x3);
    READ_NODE_FIELD (x4);
    x5 (x6, x7);
    switch (x8->x6) {
    case x9 :
    case x10 :
        x11 (x12);
        break;
    case x13 :
        x14 (x15);
        break;
    case x16 :
        x5 (x17, x18);
        READ_NODE_FIELD (x19);
        break;
    case x20 :
        x14 (x21);
        READ_NODE_FIELD (x22);
        READ_NODE_FIELD (x23);
        break;
    case x24 :
        x14 (x25);
        break;
    case x26 :
        x27 (x28);
        READ_UINT_FIELD (x29);
        READ_BOOL_FIELD (x30);
        READ_NODE_FIELD (x31);
        READ_NODE_FIELD (x32);
        break;
    default :
        x33 (x34, "unrecognized RTE kind: %d", (int) x8->x6);
        break;
    }
    READ_BOOL_FIELD (x35);
    READ_BOOL_FIELD (x36);
    READ_UINT_FIELD (x37);
    READ_OID_FIELD (x38);
    READ_BITMAPSET_FIELD (x39);
    READ_BITMAPSET_FIELD (x40);
    x41 ();
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="1166" endline="1285">
Node *x1 (void) {
    void *x2;
    x3 ();
    x4 = x5 (&x6);
    if (x7 ("QUERY", 5))
        x2 = x8 ();
    else if (x7 ("SORTGROUPCLAUSE", 15))
        x2 = x9 ();
    else if (x7 ("WINDOWCLAUSE", 12))
        x2 = x10 ();
    else if (x7 ("ROWMARKCLAUSE", 13))
        x2 = x11 ();
    else if (x7 ("COMMONTABLEEXPR", 15))
        x2 = x12 ();
    else if (x7 ("SETOPERATIONSTMT", 16))
        x2 = x13 ();
    else if (x7 ("ALIAS", 5))
        x2 = x14 ();
    else if (x7 ("RANGEVAR", 8))
        x2 = x15 ();
    else if (x7 ("INTOCLAUSE", 10))
        x2 = x16 ();
    else if (x7 ("VAR", 3))
        x2 = x17 ();
    else if (x7 ("CONST", 5))
        x2 = x18 ();
    else if (x7 ("PARAM", 5))
        x2 = x19 ();
    else if (x7 ("AGGREF", 6))
        x2 = x20 ();
    else if (x7 ("WINDOWFUNC", 10))
        x2 = x21 ();
    else if (x7 ("ARRAYREF", 8))
        x2 = x22 ();
    else if (x7 ("FUNCEXPR", 8))
        x2 = x23 ();
    else if (x7 ("OPEXPR", 6))
        x2 = x24 ();
    else if (x7 ("DISTINCTEXPR", 12))
        x2 = x25 ();
    else if (x7 ("SCALARARRAYOPEXPR", 17))
        x2 = x26 ();
    else if (x7 ("BOOLEXPR", 8))
        x2 = x27 ();
    else if (x7 ("SUBLINK", 7))
        x2 = x28 ();
    else if (x7 ("FIELDSELECT", 11))
        x2 = x29 ();
    else if (x7 ("FIELDSTORE", 10))
        x2 = x30 ();
    else if (x7 ("RELABELTYPE", 11))
        x2 = x31 ();
    else if (x7 ("COERCEVIAIO", 11))
        x2 = x32 ();
    else if (x7 ("ARRAYCOERCEEXPR", 15))
        x2 = x33 ();
    else if (x7 ("CONVERTROWTYPEEXPR", 18))
        x2 = x34 ();
    else if (x7 ("CASE", 4))
        x2 = x35 ();
    else if (x7 ("WHEN", 4))
        x2 = x36 ();
    else if (x7 ("CASETESTEXPR", 12))
        x2 = x37 ();
    else if (x7 ("ARRAY", 5))
        x2 = x38 ();
    else if (x7 ("ROW", 3))
        x2 = x39 ();
    else if (x7 ("ROWCOMPARE", 10))
        x2 = x40 ();
    else if (x7 ("COALESCE", 8))
        x2 = x41 ();
    else if (x7 ("MINMAX", 6))
        x2 = x42 ();
    else if (x7 ("XMLEXPR", 7))
        x2 = x43 ();
    else if (x7 ("NULLIFEXPR", 10))
        x2 = x44 ();
    else if (x7 ("NULLTEST", 8))
        x2 = x45 ();
    else if (x7 ("BOOLEANTEST", 11))
        x2 = x46 ();
    else if (x7 ("COERCETODOMAIN", 14))
        x2 = x47 ();
    else if (x7 ("COERCETODOMAINVALUE", 19))
        x2 = x48 ();
    else if (x7 ("SETTODEFAULT", 12))
        x2 = x49 ();
    else if (x7 ("CURRENTOFEXPR", 13))
        x2 = x50 ();
    else if (x7 ("TARGETENTRY", 11))
        x2 = x51 ();
    else if (x7 ("RANGETBLREF", 11))
        x2 = x52 ();
    else if (x7 ("JOINEXPR", 8))
        x2 = x53 ();
    else if (x7 ("FROMEXPR", 8))
        x2 = x54 ();
    else if (x7 ("RTE", 3))
        x2 = x55 ();
    else if (x7 ("NOTIFY", 6))
        x2 = x56 ();
    else if (x7 ("DECLARECURSOR", 13))
        x2 = x57 ();
    else {
        x58 (x59, "badly formatted node string \"%.32s\"...", x4);
        x2 = x60;
    }
    return (x61 *) x2;
}
</source>
<source file="examples/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="1295" endline="1350">
static Datum x1 (x2 x3) {
    Size x4, x5;
    int x6;
    char *x7;
    Datum x8;
    char *x9;
    x7 = x10 (&x6);
    x4 = x11 (x7);
    x7 = x10 (&x6);
    if (x7 == x12 || x7[0] != '[')
        x13 (x14, "expected \"[\" to start datum, but got \"%s\"; length = %lu", x7 ? (const char *) x7 : "[NULL]", (unsigned long) x4);
    if (x3) {
        if (x4 > (x15) sizeof (x16))
            x13 (x14, "byval datum but length = %lu", (unsigned long) x4);
        x8 = (x16) 0;
        x9 = (char *) (&x8);
        for (x5 = 0; x5 < (x15) sizeof (x16); x5++) {
            x7 = x10 (&x6);
            x9[x5] = (char) x17 (x7);
        }
    }
    else if (x4 <= 0)
        x8 = (x16) x12;
    else {
        x9 = (char *) x18 (x4);
        for (x5 = 0; x5 < x4; x5++) {
            x7 = x10 (&x6);
            x9[x5] = (char) x17 (x7);
        }
        x8 = x19 (x9);
    }
    x7 = x10 (&x6);
    if (x7 == x12 || x7[0] != ']')
        x13 (x14, "expected \"]\" to end datum, but got \"%s\"; length = %lu", x7 ? (const char *) x7 : "[NULL]", (unsigned long) x4);
    return x8;
}
</source>
<source file="examples/postgresql//smallpostgresql/value.c.ifdefed" startline="22" endline="30">
Value *x1 (long x2) {
    Value *x3 = x4 (x5);
    x3->x6 = x7;
    x3->x8.x9 = x2;
    return x3;
}
</source>
<source file="examples/postgresql//smallpostgresql/value.c.ifdefed" startline="37" endline="45">
Value *x1 (char *x2) {
    Value *x3 = x4 (x5);
    x3->x6 = x7;
    x3->x8.x9 = x2;
    return x3;
}
</source>
<source file="examples/postgresql//smallpostgresql/value.c.ifdefed" startline="52" endline="60">
Value *x1 (char *x2) {
    Value *x3 = x4 (x5);
    x3->x6 = x7;
    x3->x8.x2 = x2;
    return x3;
}
</source>
<source file="examples/postgresql//smallpostgresql/value.c.ifdefed" startline="67" endline="75">
Value *x1 (char *x2) {
    Value *x3 = x4 (x5);
    x3->x6 = x7;
    x3->x8.x2 = x2;
    return x3;
}
</source>
