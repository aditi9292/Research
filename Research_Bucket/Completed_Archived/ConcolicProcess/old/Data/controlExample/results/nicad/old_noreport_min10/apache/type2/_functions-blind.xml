<source file="examples/apache//smallApache/http_core.c.ifdefed" startline="47" endline="57">
static const char *x (x *x, void *x, const char *x) {
    const char *x = x (x, x | x);
    if (x != x) {
        return x;
    }
    x->x->x = x (x (x));
    return x;
}
</source>
<source file="examples/apache//smallApache/http_core.c.ifdefed" startline="59" endline="77">
static const char *x (x *x, void *x, const char *x) {
    const char *x = x (x, x | x);
    if (x != x) {
        return x;
    }
    if (!x (x, "off") || !x (x, "0")) {
        x->x->x = 0;
    }
    else {
        x->x->x = 1;
    }
    return x;
}
</source>
<source file="examples/apache//smallApache/http_core.c.ifdefed" startline="79" endline="89">
static const char *x (x *x, void *x, const char *x) {
    const char *x = x (x, x | x);
    if (x != x) {
        return x;
    }
    x->x->x = x (x);
    return x;
}
</source>
<source file="examples/apache//smallApache/http_core.c.ifdefed" startline="102" endline="113">
static const char *x (const x *x) {
    if (x->x->x && (x (x->x->x, "https") == 0))
        return "https";
    return "http";
}
</source>
<source file="examples/apache//smallApache/http_core.c.ifdefed" startline="115" endline="122">
static x x (const x *x) {
    if (x->x->x && (x (x->x->x, "https") == 0))
        return x;
    return x;
}
</source>
<source file="examples/apache//smallApache/http_core.c.ifdefed" startline="124" endline="170">
static int x (x *x) {
    x *x;
    x *x = x->x;
    if (x->x) {
        return x (x);
    }
    x (x -> x == x);
    while (x->x == x) {
        x (x -> x, x, x);
        if ((x = x (x))) {
            x->x = x;
            x (x -> x, x, x);
            if (x->x == x)
                x (x);
            if (x)
                x (x->x, x);
            if (x->x != x || x->x || x ()) {
                x->x = x;
            }
            else if (!x->x) {
                x->x = x;
            }
            x (x -> x);
        }
        else {
            x->x = x;
        }
    }
    return x;
}
</source>
<source file="examples/apache//smallApache/http_core.c.ifdefed" startline="172" endline="213">
static int x (x *x) {
    x *x;
    x *x = x;
    x (x -> x, x, x);
    while ((x = x (x)) != x) {
        x->x = x;
        x (x -> x, x, x);
        if (x->x == x)
            x (x);
        if (x)
            x (x->x, x);
        if (x->x != x || x->x)
            break;
        x (x -> x, x, x);
        x (x -> x);
        if (x ())
            break;
        if (!x) {
            x = x (x->x, &x);
        }
        x (x, x, 1);
        x (x, x -> x -> x);
    }
    return x;
}
</source>
<source file="examples/apache//smallApache/http_core.c.ifdefed" startline="215" endline="229">
static int x (x *x) {
    if (!x->x && !x->x) {
        x (x, x, x, x -> x);
        x (x, x, x, x -> x);
        x (x, x, x, x -> x);
        x (x, x, x, x -> x);
    }
    return x;
}
</source>
<source file="examples/apache//smallApache/http_core.c.ifdefed" startline="231" endline="238">
static int x (x *x) {
    if ((x->x == x) && x->x && (x->x[0] == '*') && (x->x[1] == '\0')) {
        return x;
    }
    return x;
}
</source>
<source file="examples/apache//smallApache/http_core.c.ifdefed" startline="240" endline="278">
static void x (x *x) {
    int x = 0;
    if (x (x, &x) == x && x == 1) {
        x (x, x, x, x);
    }
    else {
        x (x, x, x, x);
    }
    x (x, x, x, x);
    x (x, x, x, x);
    x (x, x, x, x);
    x (x, x, x, x);
    x (x, x, x, x);
    x = x ("HTTP_IN", x, x, x);
    x = x ("HTTP_HEADER", x, x, x);
    x = x ("CHUNK", x, x, x);
    x = x ("HTTP_OUTERROR", x, x, x);
    x = x ("BYTERANGE", x, x, x);
    x (x);
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="51" endline="257">
static int x (x *x, int x) {
    x x;
    const char *x;
    x *x;
    x *x;
    x *x;
    x *x;
    x *x;
    x *x;
    if (x->x != x) {
        return x;
    }
    x = (x *) x (x->x->x, &x);
    if (!(x = x (x, x, x->x))) {
        return x;
    }
    x = (x *) x (x->x, &x);
    if (!x) {
        x = x (x->x, sizeof (x));
        x (x -> x, & x, x);
    }
    x->x = x;
    x = x (x->x, "Authorization");
    if (x) {
        return x;
    }
    x = x (x);
    if (x != x) {
        if (x == x) {
            if (!x) {
                if (x->x) {
                    x (x, x, x, x -> x, "Adding CACHE_SAVE_SUBREQ filter for %s", x -> x);
                    x (x, x, x, x -> x);
                }
                else {
                    x (x, x, x, x -> x, "Adding CACHE_SAVE filter for %s", x -> x);
                    x (x, x, x, x -> x);
                }
                x (x, x, x, x -> x, "Adding CACHE_REMOVE_URL filter for %s", x -> x);
                x->x = x (x, x, x, x->x);
            }
            else {
                if (x->x) {
                    x (x, x, x, x -> x, "Restoring request headers for %s", x -> x);
                    x->x = x->x;
                }
                x (x -> x, & x, x);
            }
        }
        else {
            x (x, x, x, x -> x, "cache: error returned while checking for cached " "file by %s cache", x -> x);
        }
        return x;
    }
    if (x) {
        if (x->x) {
            x (x, x, x, x -> x, "Restoring request headers.");
            x->x = x->x;
        }
        x (x -> x, & x, x);
    }
    x = x (x);
    if (x != x) {
        if (x) {
            return x;
        }
        return x;
    }
    if (x) {
        return x;
    }
    x (x);
    if (x->x) {
        x = x;
    }
    else {
        x = x;
    }
    x (x, x, x, x -> x);
    x = x->x;
    while (x && (x->x != x)) {
        x (x);
        x = x->x;
    }
    x = x (x->x, x->x->x);
    x = x (x->x, x);
    if (x != x) {
        if (x != x) {
            x (x, x, x, x -> x, "cache: error returned while trying to return %s " "cached data", x -> x);
        }
        return x;
    }
    return x;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="265" endline="299">
static int x (x *x, x *x) {
    x *x = x->x;
    x *x;
    x = (x *) x (x->x, &x);
    if (!x) {
        x (x, x, 0, x -> x, "CACHE_OUT enabled unexpectedly");
        x (x);
        return x (x->x, x);
    }
    x (x, x, x, x -> x, "cache: running CACHE_OUT filter");
    x->x = x->x->x->x.x;
    x->x->x (x->x, x->x, x);
    x (x);
    x (x, x, x, x -> x, "cache: serving %s", x -> x);
    return x (x->x, x);
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="318" endline="869">
static int x (x *x, x *x) {
    int x = !x;
    x *x = x->x;
    x *x;
    x *x;
    const char *x, *x;
    const char *x, *x, *x, *x;
    x x, x, x, x;
    x x;
    x *x = x;
    char *x;
    x *x;
    x = (x *) x (x->x->x, &x);
    x = (x *) x (x->x, &x);
    if (!x) {
        x = x (x->x, sizeof (x));
        x (x -> x, & x, x);
    }
    x = x;
    x = x->x;
    if (x->x) {
        return x;
    }
    if (x->x) {
        x = x->x->x (x->x, x, x);
        if (x != x) {
            x (x, x, x, x -> x, "cache: Cache provider's store_body failed!");
            x (x);
        }
        return x (x->x, x);
    }
    x = x (x->x, "Expires");
    if (x == x) {
        x = x (x->x, "Expires");
    }
    if (x != x) {
        if (x == (x = x (x))) {
            x = x;
        }
    }
    else {
        x = x;
    }
    x = x (x->x, "Last-Modified");
    if (x == x) {
        x = x (x->x, "Last-Modified");
    }
    if (x != x) {
        x = x (x);
        if (x == x) {
            x = x;
        }
    }
    else {
        x = x;
    }
    x = x (x->x, "Etag");
    if (x == x) {
        x = x (x->x, "Etag");
    }
    x = x (x->x, "Cache-Control");
    if (x == x) {
        x = x (x->x, "Cache-Control");
    }
    if (x->x != x && x->x != x && x->x != x && x->x != x && x->x != x) {
        if (x != x || x != x) {
        }
        else {
            x = x (x, "Response status %d", x->x);
        }
    }
    if (x) {
    }
    else if (x != x && x == x) {
        x = x (x, "Broken expires header: ", x, x);
    }
    else if (x != x && x < x->x) {
        x = "Expires header already expired, not cacheable";
    }
    else if (!x->x && x->x.x && x == x && !x (x, x, "max-age", x)) {
        x = "Query string present but no explicit expiration time";
    }
    else if (x->x == x && !x->x && !x->x) {
        x = "HTTP Status 304 Not Modified";
    }
    else if (x->x == x && x == x && x == x && (x == x) && (x->x == 0)) {
        x = "No Last-Modified, Etag, or Expires headers";
    }
    else if (x->x && !x->x) {
        x = "HTTP HEAD request";
    }
    else if (!x->x && x (x, x, "no-store", x)) {
        x = "Cache-Control: no-store present";
    }
    else if (!x->x && x (x, x, "private", x)) {
        x = "Cache-Control: private present";
    }
    else if (x (x->x, "Authorization") != x && !(x (x, x, "s-maxage", x) || x (x, x, "must-revalidate", x) || x (x, x, "public", x))) {
        x = "Authorization required";
    }
    else if (x (x, x (x->x, "Vary"), "*", x)) {
        x = "Vary header contains '*'";
    }
    else if (x (x->x, "no-cache") != x) {
        x = "environment variable 'no-cache' is set";
    }
    else if (x->x) {
        x = "r->no_cache present";
    }
    if (x) {
        x (x, x, 0, x -> x, "cache: %s not cached. Reason: %s", x -> x, x);
        x (x);
        return x (x->x, x);
    }
    x->x = 1;
    x = x (x->x, "Content-Length");
    if (x == x) {
        x = x (x->x, "Content-Length");
    }
    if (x) {
        char *x;
        if (x (&x, x, &x, 10) || *x || x < 0) {
            x = x;
        }
    }
    if (!x) {
        x *x;
        int x = 0;
        int x = 0;
        x = 0;
        for (x = x (x); x != x (x); x = x (x)) {
            if (x (x)) {
                x = 1;
                break;
            }
            if (x (x)) {
                x = 1;
                continue;
            }
            if (x->x == (x) -1) {
                break;
            }
            x += x->x;
        }
        if (!x) {
            x = -1;
        }
    }
    if (x->x) {
        if (x->x == x) {
            x->x = x->x;
            x = &x->x->x->x;
            x = x;
        }
        else if (!x->x) {
            x->x->x (x->x);
            x->x = x;
            x->x = x->x;
        }
    }
    if (!x->x && !x->x) {
        x = x (x, x);
        x = x (x->x, sizeof (x));
        x->x = x->x;
    }
    if (x != x) {
        x (x);
        return x (x->x, x);
    }
    x (x, x, 0, x -> x, "cache: Caching url: %s", x -> x);
    x (x, x, 0, x -> x, "cache: Removing CACHE_REMOVE_URL filter.");
    x (x -> x);
    x = x (x->x, "Date");
    if (x == x) {
        x = x (x->x, "Date");
    }
    if (x != x) {
        x->x = x (x);
    }
    else {
        x->x = x;
    }
    x = x ();
    if (x->x == x) {
        x->x = x;
    }
    x = x->x;
    x->x = x;
    x->x = x->x;
    if (x != x && x > x) {
        x = x;
        x = x;
        x (x, x, 0, x -> x, "cache: Last modified is in the future, " "replacing with now");
    }
    if (x == x) {
        char *x;
        if (x (x->x, x, "max-age", &x) && x != x) {
            x x;
            x = 0;
            x = x (x);
            if (x) {
                x = x->x;
            }
            else {
                x = x * x;
            }
            if (x > x->x) {
                x = x->x;
            }
            x = x + x;
        }
        else if ((x != x) && (x < x)) {
            x x = (x) ((x - x) * x->x);
            if (x > x->x) {
                x = x->x;
            }
            x = x + x;
        }
        else {
            x = x + x->x;
        }
    }
    x->x = x;
    if (x->x) {
        x->x = x->x;
        x->x = x;
        x->x = x (x->x, x->x, x->x);
        x->x = x (x->x, x->x, x->x);
        x (x -> x);
        x (x -> x, x, 1);
    }
    x = x->x->x (x->x, x, x);
    if (x->x) {
        x *x;
        x *x;
        int x;
        x = x (x->x, x->x->x);
        x->x = x->x;
        x = x (x);
        if (x != x) {
            x->x = x;
            x = x (x->x);
            x (x, x);
        }
        else {
            x->x->x (x->x, x->x, x);
        }
        x->x = 1;
        if (x != x) {
            x (x, x, x, x -> x, "cache: updating headers with store_headers failed. " "Removing cached url.");
            x = x->x->x (x->x, x->x);
            if (x != x) {
                x (x, x, x, x -> x, "cache: attempt to remove url from cache unsuccessful.");
            }
        }
        return x (x->x, x);
    }
    if (x != x) {
        x (x, x, x, x -> x, "cache: store_headers failed");
        x (x);
        return x (x->x, x);
    }
    x = x->x->x (x->x, x, x);
    if (x != x) {
        x (x, x, x, x -> x, "cache: store_body failed");
        x (x);
    }
    return x (x->x, x);
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="892" endline="917">
static int x (x *x, x *x) {
    x *x = x->x;
    x *x;
    x = (x *) x->x;
    if (!x) {
        x (x, x, 0, x -> x, "cache: CACHE_REMOVE_URL enabled unexpectedly");
        x (x);
        return x (x->x, x);
    }
    x (x, x -> x);
    x (x);
    return x (x->x, x);
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="922" endline="957">
static void *x (x *x, x *x) {
    x *x = x (x, sizeof (x));
    x->x = x (x, 10, sizeof (struct x));
    x->x = x (x, 10, sizeof (struct x));
    x->x = x;
    x->x = 0;
    x->x = x;
    x->x = 0;
    x->x = x;
    x->x = 0;
    x->x = 0;
    x->x = 0;
    x->x = 0;
    x->x = 0;
    x->x = 0;
    x->x = 0;
    x->x = 0;
    x->x = 0;
    x->x = x (x, 10, sizeof (char *));
    x->x = x;
    x->x = 0;
    x->x = 0;
    x->x = x (x, 10, sizeof (char *));
    x->x = x;
    return x;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="959" endline="1010">
static void *x (x *x, void *x, void *x) {
    x *x = x (x, sizeof (x));
    x *x = (x *) x;
    x *x = (x *) x;
    x->x = x (x, x->x, x->x);
    x->x = x (x, x->x, x->x);
    x->x = (x->x == 0) ? x->x : x->x;
    x->x = (x->x == 0) ? x->x : x->x;
    x->x = (x->x == 0) ? x->x : x->x;
    x->x = (x->x == 0) ? x->x : x->x;
    x->x = (x->x == 0) ? x->x : x->x;
    x->x = (x->x == 0) ? x->x : x->x;
    x->x = (x->x == 0) ? x->x : x->x;
    x->x = (x->x == x) ? x->x : x->x;
    x->x = (x->x == 0) ? x->x : x->x;
    x->x = (x->x == x) ? x->x : x->x;
    return x;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="1011" endline="1023">
static const char *x (x *x, void *x, int x) {
    x *x;
    x = (x *) x (x->x->x, &x);
    x->x = x;
    x->x = 1;
    return x;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="1025" endline="1036">
static const char *x (x *x, void *x, int x) {
    x *x;
    x = (x *) x (x->x->x, &x);
    x->x = x;
    x->x = 1;
    return x;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="1038" endline="1049">
static const char *x (x *x, void *x, int x) {
    x *x;
    x = (x *) x (x->x->x, &x);
    x->x = x;
    x->x = 1;
    return x;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="1051" endline="1062">
static const char *x (x *x, void *x, int x) {
    x *x;
    x = (x *) x (x->x->x, &x);
    x->x = x;
    x->x = 1;
    return x;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="1064" endline="1090">
static const char *x (x *x, void *x, const char *x) {
    x *x;
    char **x;
    x = (x *) x (x->x->x, &x);
    if (!x (x, "None", 4)) {
        x->x->x = 0;
    }
    else {
        if ((x->x == x) || (x->x->x)) {
            x = (char **) x (x->x);
            (*x) = (char *) x;
        }
    }
    x->x = x;
    return x;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="1092" endline="1118">
static const char *x (x *x, void *x, const char *x) {
    x *x;
    char **x;
    x = (x *) x (x->x->x, &x);
    if (!x (x, "None", 4)) {
        x->x->x = 0;
    }
    else {
        if ((x->x == x) || (x->x->x)) {
            x = (char **) x (x->x);
            (*x) = (char *) x;
        }
    }
    x->x = x;
    return x;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="1120" endline="1148">
static const char *x (x *x, void *x, const char *x, const char *x) {
    x *x;
    struct x *x;
    if (*x == '/') {
        return x (x->x, "provider (%s) starts with a '/'.  Are url and provider switched?", x);
    }
    x = (x *) x (x->x->x, &x);
    x = x (x->x);
    x->x = x;
    if (x (x->x, x, &(x->x))) {
        return x;
    }
    if (x->x.x) {
        x->x = x (x->x.x);
    }
    else {
        x->x = 1;
        x->x.x = "/";
    }
    return x;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="1150" endline="1170">
static const char *x (x *x, void *x, const char *x) {
    x *x;
    struct x *x;
    x = (x *) x (x->x->x, &x);
    x = x (x->x);
    if (x (x->x, x, &(x->x))) {
        return x;
    }
    if (x->x.x) {
        x->x = x (x->x.x);
    }
    else {
        x->x = 1;
        x->x.x = "/";
    }
    return x;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="1172" endline="1183">
static const char *x (x *x, void *x, const char *x) {
    x *x;
    x = (x *) x (x->x->x, &x);
    x->x = (x) (x (x) * x);
    x->x = 1;
    return x;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="1185" endline="1196">
static const char *x (x *x, void *x, const char *x) {
    x *x;
    x = (x *) x (x->x->x, &x);
    x->x = (x) (x (x) * x);
    x->x = 1;
    return x;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="1198" endline="1213">
static const char *x (x *x, void *x, const char *x) {
    x *x;
    double x;
    x = (x *) x (x->x->x, &x);
    if (x (x, "%lg", &x) != 1) {
        return "CacheLastModifiedFactor value must be a float";
    }
    x->x = x;
    x->x = 1;
    return x;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="1215" endline="1226">
static const char *x (x *x, void *x, int x) {
    x *x;
    x = (x *) x (x->x->x, &x);
    x->x = x;
    x->x = 1;
    return x;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="1228" endline="1239">
static int x (x *x, x *x, x *x, x *x) {
    x = x (x);
    if (!x) {
        x = x;
    }
    return x;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="1290" endline="1358">
static void x (x *x) {
    x (x, x, x, x);
    x = x ("CACHE_SAVE", x, x, x +1);
    x = x ("CACHE_SAVE_SUBREQ", x, x, x -1);
    x = x ("CACHE_OUT", x, x, x +1);
    x = x ("CACHE_OUT_SUBREQ", x, x, x -1);
    x = x ("CACHE_REMOVE_URL", x, x, x);
    x (x, x, x, x);
}
</source>
<source file="examples/apache//smallApache/mod_file_cache.c.ifdefed" startline="119" endline="125">
static void *x (x *x, x *x) {
    x *x = x (x, sizeof (*x));
    x->x = x (x);
    return x;
}
</source>
<source file="examples/apache//smallApache/mod_file_cache.c.ifdefed" startline="127" endline="206">
static void x (x *x, const char *x, int x) {
    x *x;
    x *x;
    x x;
    x *x = x;
    x x;
    const char *x;
    x = x (x->x, x);
    if (!x) {
        x (x, x, x, x -> x, "mod_file_cache: invalid file path " "%s, skipping", x);
        return;
    }
    if ((x = x (&x.x, x, x, x->x)) != x) {
        x (x, x, x, x -> x, "mod_file_cache: unable to stat(%s), skipping", x);
        return;
    }
    if (x.x.x != x) {
        x (x, x, 0, x -> x, "mod_file_cache: %s isn't a regular file, skipping", x);
        return;
    }
    if (x.x.x > x) {
        x (x, x, 0, x -> x, "mod_file_cache: %s is too large to cache, skipping", x);
        return;
    }
    x = x (&x, x, x | x | x, x, x->x);
    if (x != x) {
        x (x, x, x, x -> x, "mod_file_cache: unable to open(%s, O_RDONLY), skipping", x);
        return;
    }
    x (x);
    x = x (x->x, sizeof (x));
    x->x = x.x;
    x->x = x;
    x (x -> x, x -> x.x);
    x (x -> x, sizeof x -> x, "%" x, x -> x.x);
    x = x (x->x->x, &x);
    x (x -> x, x -> x, x (x -> x), x);
}
</source>
<source file="examples/apache//smallApache/mod_file_cache.c.ifdefed" startline="208" endline="218">
static const char *x (x *x, void *x, const char *x) {
    x (x, x, 0, x -> x, "mod_file_cache: unable to cache file: %s. Sendfile is not supported on this OS", x);
    return x;
}
</source>
<source file="examples/apache//smallApache/mod_file_cache.c.ifdefed" startline="219" endline="229">
static const char *x (x *x, void *x, const char *x) {
    x (x, x, 0, x -> x, "mod_file_cache: unable to cache file: %s. MMAP is not supported by this OS", x);
    return x;
}
</source>
<source file="examples/apache//smallApache/mod_file_cache.c.ifdefed" startline="231" endline="236">
static int x (x *x, x *x, x *x, x *x) {
    return x;
}
</source>
<source file="examples/apache//smallApache/mod_file_cache.c.ifdefed" startline="241" endline="270">
static int x (x *x) {
    x *x;
    x *x;
    int x;
    x = x (x->x->x, &x);
    if (!x (x->x)) {
        return x;
    }
    x = x (x);
    if (x != x || !x->x) {
        return x;
    }
    x = (x *) x (x->x, x->x, x);
    if (x == x)
        return x;
    x (x -> x, & x, x);
    x->x = x->x;
    return x;
}
</source>
<source file="examples/apache//smallApache/mod_file_cache.c.ifdefed" startline="272" endline="291">
static int x (x *x, x *x) {
    return x;
}
</source>
<source file="examples/apache//smallApache/mod_file_cache.c.ifdefed" startline="293" endline="310">
static int x (x *x, x *x) {
    return x;
}
</source>
<source file="examples/apache//smallApache/mod_file_cache.c.ifdefed" startline="312" endline="384">
static int x (x *x) {
    x *x;
    int x;
    int x = x;
    if (x (x->x, "*/*")) {
        return x;
    }
    if (x->x != x)
        return x;
    x = x (x->x, &x);
    if (x == x) {
        return x;
    }
    x->x |= (x << x);
    if ((x = x (x)) != x)
        return x;
    x (x, x -> x.x);
    {
        x x;
        char *x;
        x = x (x, x->x);
        if (x == x->x.x)
            x = x->x;
        else {
            x = x (x->x, x);
            x (x, x);
        }
        x (x -> x, "Last-Modified", x);
    }
    x (x);
    if ((x = x (x)) != x) {
        return x;
    }
    x->x = x->x.x;
    x (x -> x, "Content-Length", x -> x);
    if (!x->x) {
        if (x->x == x)
            x = x (x, x);
        else
            x = x (x, x);
    }
    return x;
}
</source>
<source file="examples/apache//smallApache/mod_file_cache.c.ifdefed" startline="395" endline="406">
static void x (x *x) {
    x (x, x, x, x);
    x (x, x, x, x);
    x (x, x, x, x);
}
</source>
