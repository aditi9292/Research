<clones>
<systeminfo processor="nicad3" system="_" granularity="unctions" threshold="50%" minlines="3" maxlines="2500"/>
<cloneinfo npcs="289" npairs="145"/>
<runinfo ncompares="28382" cputime="7"/>

<clone nlines="29" similarity="65">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="1176" endline="1224" pcid="51">
List *
list_copy_tail(List *oldlist, int nskip)
{
	List	   *newlist;
	ListCell   *newlist_prev;
	ListCell   *oldlist_cur;

	if (nskip < 0)
		nskip = 0;				/* would it be better to elog? */

	if (oldlist == NIL || nskip >= oldlist->length)
		return NIL;

	newlist = new_list(oldlist->type);
	newlist->length = oldlist->length - nskip;

	/*
	 * Skip over the unwanted elements.
	 */
	oldlist_cur = oldlist->head;
	while (nskip-- > 0)
		oldlist_cur = oldlist_cur->next;

	/*
	 * Copy over the data in the first remaining cell; new_list() has already
	 * allocated the head cell itself
	 */
	newlist->head->data = oldlist_cur->data;

	newlist_prev = newlist->head;
	oldlist_cur = oldlist_cur->next;
	while (oldlist_cur)
	{
		ListCell   *newlist_cur;

		newlist_cur = (ListCell *) palloc(sizeof(*newlist_cur));
		newlist_cur->data = oldlist_cur->data;
		newlist_prev->next = newlist_cur;

		newlist_prev = newlist_cur;
		oldlist_cur = oldlist_cur->next;
	}

	newlist_prev->next = NULL;
	newlist->tail = newlist_prev;

	check_list_invariants(newlist);
	return newlist;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="1133" endline="1171" pcid="50">
List *
list_copy(List *oldlist)
{
	List	   *newlist;
	ListCell   *newlist_prev;
	ListCell   *oldlist_cur;

	if (oldlist == NIL)
		return NIL;

	newlist = new_list(oldlist->type);
	newlist->length = oldlist->length;

	/*
	 * Copy over the data in the first cell; new_list() has already allocated
	 * the head cell itself
	 */
	newlist->head->data = oldlist->head->data;

	newlist_prev = newlist->head;
	oldlist_cur = oldlist->head->next;
	while (oldlist_cur)
	{
		ListCell   *newlist_cur;

		newlist_cur = (ListCell *) palloc(sizeof(*newlist_cur));
		newlist_cur->data = oldlist_cur->data;
		newlist_prev->next = newlist_cur;

		newlist_prev = newlist_cur;
		oldlist_cur = oldlist_cur->next;
	}

	newlist_prev->next = NULL;
	newlist->tail = newlist_prev;

	check_list_invariants(newlist);
	return newlist;
}
</source>
</clone>

<clone nlines="25" similarity="60">
<source file="examples2/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="473" endline="501" pcid="224">
unsigned int
pq_getmsgint(StringInfo msg, int b)
{
	unsigned int result;
	unsigned char n8;
	uint16		n16;
	uint32		n32;

	switch (b)
	{
		case 1:
			pq_copymsgbytes(msg, (char *) &n8, 1);
			result = n8;
			break;
		case 2:
			pq_copymsgbytes(msg, (char *) &n16, 2);
			result = ntohs(n16);
			break;
		case 4:
			pq_copymsgbytes(msg, (char *) &n32, 4);
			result = ntohl(n32);
			break;
		default:
			elog(ERROR, "unsupported integer size %d", b);
			result = 0;			/* keep compiler quiet */
			break;
	}
	return result;
}
</source>
<source file="examples2/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="234" endline="259" pcid="214">
void
pq_sendint(StringInfo buf, int i, int b)
{
	unsigned char n8;
	uint16		n16;
	uint32		n32;

	switch (b)
	{
		case 1:
			n8 = (unsigned char) i;
			appendBinaryStringInfo(buf, (char *) &n8, 1);
			break;
		case 2:
			n16 = htons((uint16) i);
			appendBinaryStringInfo(buf, (char *) &n16, 2);
			break;
		case 4:
			n32 = htonl((uint32) i);
			appendBinaryStringInfo(buf, (char *) &n32, 4);
			break;
		default:
			elog(ERROR, "unsupported integer size %d", b);
			break;
	}
}
</source>
</clone>

<clone nlines="17" similarity="64">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="686" endline="710" pcid="92">
static void
_outSetOp(StringInfo str, SetOp *node)
{
	int			i;

	WRITE_NODE_TYPE("SETOP");

	_outPlanInfo(str, (Plan *) node);

	WRITE_ENUM_FIELD(cmd, SetOpCmd);
	WRITE_ENUM_FIELD(strategy, SetOpStrategy);
	WRITE_INT_FIELD(numCols);

	appendStringInfo(str, " :dupColIdx");
	for (i = 0; i < node->numCols; i++)
		appendStringInfo(str, " %d", node->dupColIdx[i]);

	appendStringInfo(str, " :dupOperators");
	for (i = 0; i < node->numCols; i++)
		appendStringInfo(str, " %u", node->dupOperators[i]);

	WRITE_INT_FIELD(flagColIdx);
	WRITE_INT_FIELD(firstFlag);
	WRITE_LONG_FIELD(numGroups);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="333" endline="354" pcid="67">
static void
_outRecursiveUnion(StringInfo str, RecursiveUnion *node)
{
	int			i;

	WRITE_NODE_TYPE("RECURSIVEUNION");

	_outPlanInfo(str, (Plan *) node);

	WRITE_INT_FIELD(wtParam);
	WRITE_INT_FIELD(numCols);

	appendStringInfo(str, " :dupColIdx");
	for (i = 0; i < node->numCols; i++)
		appendStringInfo(str, " %d", node->dupColIdx[i]);

	appendStringInfo(str, " :dupOperators");
	for (i = 0; i < node->numCols; i++)
		appendStringInfo(str, " %u", node->dupOperators[i]);

	WRITE_LONG_FIELD(numGroups);
}
</source>
</clone>

<clone nlines="15" similarity="60">
<source file="examples2/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="129" endline="149" pcid="210">
void
pq_sendcountedtext(StringInfo buf, const char *str, int slen,
				   bool countincludesself)
{
	int			extra = countincludesself ? 4 : 0;
	char	   *p;

	p = pg_server_to_client(str, slen);
	if (p != str)				/* actual conversion has been done? */
	{
		slen = strlen(p);
		pq_sendint(buf, slen + extra, 4);
		appendBinaryStringInfo(buf, p, slen);
		pfree(p);
	}
	else
	{
		pq_sendint(buf, slen + extra, 4);
		appendBinaryStringInfo(buf, str, slen);
	}
}
</source>
<source file="examples2/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="161" endline="175" pcid="211">
void
pq_sendtext(StringInfo buf, const char *str, int slen)
{
	char	   *p;

	p = pg_server_to_client(str, slen);
	if (p != str)				/* actual conversion has been done? */
	{
		slen = strlen(p);
		appendBinaryStringInfo(buf, p, slen);
		pfree(p);
	}
	else
		appendBinaryStringInfo(buf, str, slen);
}
</source>
</clone>

<clone nlines="15" similarity="60">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="799" endline="820" pcid="34">
List *
list_intersection(List *list1, List *list2)
{
	List	   *result;
	ListCell   *cell;

	if (list1 == NIL || list2 == NIL)
		return NIL;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	result = NIL;
	foreach(cell, list1)
	{
		if (list_member(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="857" endline="877" pcid="36">
List *
list_difference_ptr(List *list1, List *list2)
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member_ptr(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
</clone>

<clone nlines="15" similarity="60">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="799" endline="820" pcid="34">
List *
list_intersection(List *list1, List *list2)
{
	List	   *result;
	ListCell   *cell;

	if (list1 == NIL || list2 == NIL)
		return NIL;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	result = NIL;
	foreach(cell, list1)
	{
		if (list_member(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="831" endline="851" pcid="35">
List *
list_difference(List *list1, List *list2)
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
</clone>

<clone nlines="15" similarity="60">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="799" endline="820" pcid="34">
List *
list_intersection(List *list1, List *list2)
{
	List	   *result;
	ListCell   *cell;

	if (list1 == NIL || list2 == NIL)
		return NIL;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	result = NIL;
	foreach(cell, list1)
	{
		if (list_member(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="720" endline="738" pcid="31">
List *
list_union_ptr(List *list1, List *list2)
{
	List	   *result;
	ListCell   *cell;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	result = list_copy(list1);
	foreach(cell, list2)
	{
		if (!list_member_ptr(result, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
</clone>

<clone nlines="15" similarity="60">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="799" endline="820" pcid="34">
List *
list_intersection(List *list1, List *list2)
{
	List	   *result;
	ListCell   *cell;

	if (list1 == NIL || list2 == NIL)
		return NIL;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	result = NIL;
	foreach(cell, list1)
	{
		if (list_member(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="696" endline="714" pcid="30">
List *
list_union(List *list1, List *list2)
{
	List	   *result;
	ListCell   *cell;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	result = list_copy(list1);
	foreach(cell, list2)
	{
		if (!list_member(result, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
</clone>

<clone nlines="14" similarity="64">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="882" endline="902" pcid="37">
List *
list_difference_int(List *list1, List *list2)
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsIntegerList(list1));
	Assert(IsIntegerList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member_int(list2, lfirst_int(cell)))
			result = lappend_int(result, lfirst_int(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="907" endline="927" pcid="38">
List *
list_difference_oid(List *list1, List *list2)
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsOidList(list1));
	Assert(IsOidList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member_oid(list2, lfirst_oid(cell)))
			result = lappend_oid(result, lfirst_oid(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
</clone>

<clone nlines="14" similarity="64">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="882" endline="902" pcid="37">
List *
list_difference_int(List *list1, List *list2)
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsIntegerList(list1));
	Assert(IsIntegerList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member_int(list2, lfirst_int(cell)))
			result = lappend_int(result, lfirst_int(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="857" endline="877" pcid="36">
List *
list_difference_ptr(List *list1, List *list2)
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member_ptr(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
</clone>

<clone nlines="14" similarity="64">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="882" endline="902" pcid="37">
List *
list_difference_int(List *list1, List *list2)
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsIntegerList(list1));
	Assert(IsIntegerList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member_int(list2, lfirst_int(cell)))
			result = lappend_int(result, lfirst_int(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="831" endline="851" pcid="35">
List *
list_difference(List *list1, List *list2)
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
</clone>

<clone nlines="14" similarity="57">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="882" endline="902" pcid="37">
List *
list_difference_int(List *list1, List *list2)
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsIntegerList(list1));
	Assert(IsIntegerList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member_int(list2, lfirst_int(cell)))
			result = lappend_int(result, lfirst_int(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="743" endline="761" pcid="32">
List *
list_union_int(List *list1, List *list2)
{
	List	   *result;
	ListCell   *cell;

	Assert(IsIntegerList(list1));
	Assert(IsIntegerList(list2));

	result = list_copy(list1);
	foreach(cell, list2)
	{
		if (!list_member_int(result, lfirst_int(cell)))
			result = lappend_int(result, lfirst_int(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
</clone>

<clone nlines="14" similarity="64">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="907" endline="927" pcid="38">
List *
list_difference_oid(List *list1, List *list2)
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsOidList(list1));
	Assert(IsOidList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member_oid(list2, lfirst_oid(cell)))
			result = lappend_oid(result, lfirst_oid(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="857" endline="877" pcid="36">
List *
list_difference_ptr(List *list1, List *list2)
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member_ptr(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
</clone>

<clone nlines="14" similarity="64">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="907" endline="927" pcid="38">
List *
list_difference_oid(List *list1, List *list2)
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsOidList(list1));
	Assert(IsOidList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member_oid(list2, lfirst_oid(cell)))
			result = lappend_oid(result, lfirst_oid(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="831" endline="851" pcid="35">
List *
list_difference(List *list1, List *list2)
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
</clone>

<clone nlines="14" similarity="57">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="907" endline="927" pcid="38">
List *
list_difference_oid(List *list1, List *list2)
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsOidList(list1));
	Assert(IsOidList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member_oid(list2, lfirst_oid(cell)))
			result = lappend_oid(result, lfirst_oid(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="766" endline="784" pcid="33">
List *
list_union_oid(List *list1, List *list2)
{
	List	   *result;
	ListCell   *cell;

	Assert(IsOidList(list1));
	Assert(IsOidList(list2));

	result = list_copy(list1);
	foreach(cell, list2)
	{
		if (!list_member_oid(result, lfirst_oid(cell)))
			result = lappend_oid(result, lfirst_oid(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
</clone>

<clone nlines="14" similarity="85">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="857" endline="877" pcid="36">
List *
list_difference_ptr(List *list1, List *list2)
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member_ptr(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="831" endline="851" pcid="35">
List *
list_difference(List *list1, List *list2)
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
</clone>

<clone nlines="14" similarity="57">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="857" endline="877" pcid="36">
List *
list_difference_ptr(List *list1, List *list2)
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member_ptr(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="720" endline="738" pcid="31">
List *
list_union_ptr(List *list1, List *list2)
{
	List	   *result;
	ListCell   *cell;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	result = list_copy(list1);
	foreach(cell, list2)
	{
		if (!list_member_ptr(result, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
</clone>

<clone nlines="14" similarity="57">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="857" endline="877" pcid="36">
List *
list_difference_ptr(List *list1, List *list2)
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member_ptr(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="696" endline="714" pcid="30">
List *
list_union(List *list1, List *list2)
{
	List	   *result;
	ListCell   *cell;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	result = list_copy(list1);
	foreach(cell, list2)
	{
		if (!list_member(result, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
</clone>

<clone nlines="14" similarity="57">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="831" endline="851" pcid="35">
List *
list_difference(List *list1, List *list2)
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="720" endline="738" pcid="31">
List *
list_union_ptr(List *list1, List *list2)
{
	List	   *result;
	ListCell   *cell;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	result = list_copy(list1);
	foreach(cell, list2)
	{
		if (!list_member_ptr(result, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
</clone>

<clone nlines="14" similarity="57">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="831" endline="851" pcid="35">
List *
list_difference(List *list1, List *list2)
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="696" endline="714" pcid="30">
List *
list_union(List *list1, List *list2)
{
	List	   *result;
	ListCell   *cell;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	result = list_copy(list1);
	foreach(cell, list2)
	{
		if (!list_member(result, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
</clone>

<clone nlines="14" similarity="50">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="333" endline="354" pcid="67">
static void
_outRecursiveUnion(StringInfo str, RecursiveUnion *node)
{
	int			i;

	WRITE_NODE_TYPE("RECURSIVEUNION");

	_outPlanInfo(str, (Plan *) node);

	WRITE_INT_FIELD(wtParam);
	WRITE_INT_FIELD(numCols);

	appendStringInfo(str, " :dupColIdx");
	for (i = 0; i < node->numCols; i++)
		appendStringInfo(str, " %d", node->dupColIdx[i]);

	appendStringInfo(str, " :dupOperators");
	for (i = 0; i < node->numCols; i++)
		appendStringInfo(str, " %u", node->dupOperators[i]);

	WRITE_LONG_FIELD(numGroups);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="545" endline="566" pcid="85">
static void
_outAgg(StringInfo str, Agg *node)
{
	int			i;

	WRITE_NODE_TYPE("AGG");

	_outPlanInfo(str, (Plan *) node);

	WRITE_ENUM_FIELD(aggstrategy, AggStrategy);
	WRITE_INT_FIELD(numCols);

	appendStringInfo(str, " :grpColIdx");
	for (i = 0; i < node->numCols; i++)
		appendStringInfo(str, " %d", node->grpColIdx[i]);

	appendStringInfo(str, " :grpOperators");
	for (i = 0; i < node->numCols; i++)
		appendStringInfo(str, " %u", node->grpOperators[i]);

	WRITE_LONG_FIELD(numGroups);
}
</source>
</clone>

<clone nlines="14" similarity="71">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="545" endline="566" pcid="85">
static void
_outAgg(StringInfo str, Agg *node)
{
	int			i;

	WRITE_NODE_TYPE("AGG");

	_outPlanInfo(str, (Plan *) node);

	WRITE_ENUM_FIELD(aggstrategy, AggStrategy);
	WRITE_INT_FIELD(numCols);

	appendStringInfo(str, " :grpColIdx");
	for (i = 0; i < node->numCols; i++)
		appendStringInfo(str, " %d", node->grpColIdx[i]);

	appendStringInfo(str, " :grpOperators");
	for (i = 0; i < node->numCols; i++)
		appendStringInfo(str, " %u", node->grpOperators[i]);

	WRITE_LONG_FIELD(numGroups);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="601" endline="619" pcid="87">
static void
_outGroup(StringInfo str, Group *node)
{
	int			i;

	WRITE_NODE_TYPE("GROUP");

	_outPlanInfo(str, (Plan *) node);

	WRITE_INT_FIELD(numCols);

	appendStringInfo(str, " :grpColIdx");
	for (i = 0; i < node->numCols; i++)
		appendStringInfo(str, " %d", node->grpColIdx[i]);

	appendStringInfo(str, " :grpOperators");
	for (i = 0; i < node->numCols; i++)
		appendStringInfo(str, " %u", node->grpOperators[i]);
}
</source>
</clone>

<clone nlines="13" similarity="84">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="720" endline="738" pcid="31">
List *
list_union_ptr(List *list1, List *list2)
{
	List	   *result;
	ListCell   *cell;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	result = list_copy(list1);
	foreach(cell, list2)
	{
		if (!list_member_ptr(result, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="696" endline="714" pcid="30">
List *
list_union(List *list1, List *list2)
{
	List	   *result;
	ListCell   *cell;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	result = list_copy(list1);
	foreach(cell, list2)
	{
		if (!list_member(result, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
</clone>

<clone nlines="13" similarity="61">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="720" endline="738" pcid="31">
List *
list_union_ptr(List *list1, List *list2)
{
	List	   *result;
	ListCell   *cell;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	result = list_copy(list1);
	foreach(cell, list2)
	{
		if (!list_member_ptr(result, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="743" endline="761" pcid="32">
List *
list_union_int(List *list1, List *list2)
{
	List	   *result;
	ListCell   *cell;

	Assert(IsIntegerList(list1));
	Assert(IsIntegerList(list2));

	result = list_copy(list1);
	foreach(cell, list2)
	{
		if (!list_member_int(result, lfirst_int(cell)))
			result = lappend_int(result, lfirst_int(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
</clone>

<clone nlines="13" similarity="61">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="720" endline="738" pcid="31">
List *
list_union_ptr(List *list1, List *list2)
{
	List	   *result;
	ListCell   *cell;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	result = list_copy(list1);
	foreach(cell, list2)
	{
		if (!list_member_ptr(result, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="766" endline="784" pcid="33">
List *
list_union_oid(List *list1, List *list2)
{
	List	   *result;
	ListCell   *cell;

	Assert(IsOidList(list1));
	Assert(IsOidList(list2));

	result = list_copy(list1);
	foreach(cell, list2)
	{
		if (!list_member_oid(result, lfirst_oid(cell)))
			result = lappend_oid(result, lfirst_oid(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
</clone>

<clone nlines="13" similarity="61">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="696" endline="714" pcid="30">
List *
list_union(List *list1, List *list2)
{
	List	   *result;
	ListCell   *cell;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	result = list_copy(list1);
	foreach(cell, list2)
	{
		if (!list_member(result, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="743" endline="761" pcid="32">
List *
list_union_int(List *list1, List *list2)
{
	List	   *result;
	ListCell   *cell;

	Assert(IsIntegerList(list1));
	Assert(IsIntegerList(list2));

	result = list_copy(list1);
	foreach(cell, list2)
	{
		if (!list_member_int(result, lfirst_int(cell)))
			result = lappend_int(result, lfirst_int(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
</clone>

<clone nlines="13" similarity="61">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="696" endline="714" pcid="30">
List *
list_union(List *list1, List *list2)
{
	List	   *result;
	ListCell   *cell;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	result = list_copy(list1);
	foreach(cell, list2)
	{
		if (!list_member(result, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="766" endline="784" pcid="33">
List *
list_union_oid(List *list1, List *list2)
{
	List	   *result;
	ListCell   *cell;

	Assert(IsOidList(list1));
	Assert(IsOidList(list2));

	result = list_copy(list1);
	foreach(cell, list2)
	{
		if (!list_member_oid(result, lfirst_oid(cell)))
			result = lappend_oid(result, lfirst_oid(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
</clone>

<clone nlines="13" similarity="61">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="743" endline="761" pcid="32">
List *
list_union_int(List *list1, List *list2)
{
	List	   *result;
	ListCell   *cell;

	Assert(IsIntegerList(list1));
	Assert(IsIntegerList(list2));

	result = list_copy(list1);
	foreach(cell, list2)
	{
		if (!list_member_int(result, lfirst_int(cell)))
			result = lappend_int(result, lfirst_int(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="766" endline="784" pcid="33">
List *
list_union_oid(List *list1, List *list2)
{
	List	   *result;
	ListCell   *cell;

	Assert(IsOidList(list1));
	Assert(IsOidList(list2));

	result = list_copy(list1);
	foreach(cell, list2)
	{
		if (!list_member_oid(result, lfirst_oid(cell)))
			result = lappend_oid(result, lfirst_oid(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
</clone>

<clone nlines="13" similarity="76">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="635" endline="655" pcid="28">
List *
list_delete_oid(List *list, Oid datum)
{
	ListCell   *cell;
	ListCell   *prev;

	Assert(IsOidList(list));
	check_list_invariants(list);

	prev = NULL;
	foreach(cell, list)
	{
		if (lfirst_oid(cell) == datum)
			return list_delete_cell(list, cell, prev);

		prev = cell;
	}

	/* Didn't find a match: return the list unmodified */
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="612" endline="632" pcid="27">
List *
list_delete_int(List *list, int datum)
{
	ListCell   *cell;
	ListCell   *prev;

	Assert(IsIntegerList(list));
	check_list_invariants(list);

	prev = NULL;
	foreach(cell, list)
	{
		if (lfirst_int(cell) == datum)
			return list_delete_cell(list, cell, prev);

		prev = cell;
	}

	/* Didn't find a match: return the list unmodified */
	return list;
}
</source>
</clone>

<clone nlines="13" similarity="76">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="635" endline="655" pcid="28">
List *
list_delete_oid(List *list, Oid datum)
{
	ListCell   *cell;
	ListCell   *prev;

	Assert(IsOidList(list));
	check_list_invariants(list);

	prev = NULL;
	foreach(cell, list)
	{
		if (lfirst_oid(cell) == datum)
			return list_delete_cell(list, cell, prev);

		prev = cell;
	}

	/* Didn't find a match: return the list unmodified */
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="589" endline="609" pcid="26">
List *
list_delete_ptr(List *list, void *datum)
{
	ListCell   *cell;
	ListCell   *prev;

	Assert(IsPointerList(list));
	check_list_invariants(list);

	prev = NULL;
	foreach(cell, list)
	{
		if (lfirst(cell) == datum)
			return list_delete_cell(list, cell, prev);

		prev = cell;
	}

	/* Didn't find a match: return the list unmodified */
	return list;
}
</source>
</clone>

<clone nlines="13" similarity="76">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="635" endline="655" pcid="28">
List *
list_delete_oid(List *list, Oid datum)
{
	ListCell   *cell;
	ListCell   *prev;

	Assert(IsOidList(list));
	check_list_invariants(list);

	prev = NULL;
	foreach(cell, list)
	{
		if (lfirst_oid(cell) == datum)
			return list_delete_cell(list, cell, prev);

		prev = cell;
	}

	/* Didn't find a match: return the list unmodified */
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="566" endline="586" pcid="25">
List *
list_delete(List *list, void *datum)
{
	ListCell   *cell;
	ListCell   *prev;

	Assert(IsPointerList(list));
	check_list_invariants(list);

	prev = NULL;
	foreach(cell, list)
	{
		if (equal(lfirst(cell), datum))
			return list_delete_cell(list, cell, prev);

		prev = cell;
	}

	/* Didn't find a match: return the list unmodified */
	return list;
}
</source>
</clone>

<clone nlines="13" similarity="53">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="635" endline="655" pcid="28">
List *
list_delete_oid(List *list, Oid datum)
{
	ListCell   *cell;
	ListCell   *prev;

	Assert(IsOidList(list));
	check_list_invariants(list);

	prev = NULL;
	foreach(cell, list)
	{
		if (lfirst_oid(cell) == datum)
			return list_delete_cell(list, cell, prev);

		prev = cell;
	}

	/* Didn't find a match: return the list unmodified */
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="504" endline="519" pcid="23">
bool
list_member_oid(List *list, Oid datum)
{
	ListCell   *cell;

	Assert(IsOidList(list));
	check_list_invariants(list);

	foreach(cell, list)
	{
		if (lfirst_oid(cell) == datum)
			return true;
	}

	return false;
}
</source>
</clone>

<clone nlines="13" similarity="76">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="612" endline="632" pcid="27">
List *
list_delete_int(List *list, int datum)
{
	ListCell   *cell;
	ListCell   *prev;

	Assert(IsIntegerList(list));
	check_list_invariants(list);

	prev = NULL;
	foreach(cell, list)
	{
		if (lfirst_int(cell) == datum)
			return list_delete_cell(list, cell, prev);

		prev = cell;
	}

	/* Didn't find a match: return the list unmodified */
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="589" endline="609" pcid="26">
List *
list_delete_ptr(List *list, void *datum)
{
	ListCell   *cell;
	ListCell   *prev;

	Assert(IsPointerList(list));
	check_list_invariants(list);

	prev = NULL;
	foreach(cell, list)
	{
		if (lfirst(cell) == datum)
			return list_delete_cell(list, cell, prev);

		prev = cell;
	}

	/* Didn't find a match: return the list unmodified */
	return list;
}
</source>
</clone>

<clone nlines="13" similarity="76">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="612" endline="632" pcid="27">
List *
list_delete_int(List *list, int datum)
{
	ListCell   *cell;
	ListCell   *prev;

	Assert(IsIntegerList(list));
	check_list_invariants(list);

	prev = NULL;
	foreach(cell, list)
	{
		if (lfirst_int(cell) == datum)
			return list_delete_cell(list, cell, prev);

		prev = cell;
	}

	/* Didn't find a match: return the list unmodified */
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="566" endline="586" pcid="25">
List *
list_delete(List *list, void *datum)
{
	ListCell   *cell;
	ListCell   *prev;

	Assert(IsPointerList(list));
	check_list_invariants(list);

	prev = NULL;
	foreach(cell, list)
	{
		if (equal(lfirst(cell), datum))
			return list_delete_cell(list, cell, prev);

		prev = cell;
	}

	/* Didn't find a match: return the list unmodified */
	return list;
}
</source>
</clone>

<clone nlines="13" similarity="53">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="612" endline="632" pcid="27">
List *
list_delete_int(List *list, int datum)
{
	ListCell   *cell;
	ListCell   *prev;

	Assert(IsIntegerList(list));
	check_list_invariants(list);

	prev = NULL;
	foreach(cell, list)
	{
		if (lfirst_int(cell) == datum)
			return list_delete_cell(list, cell, prev);

		prev = cell;
	}

	/* Didn't find a match: return the list unmodified */
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="484" endline="499" pcid="22">
bool
list_member_int(List *list, int datum)
{
	ListCell   *cell;

	Assert(IsIntegerList(list));
	check_list_invariants(list);

	foreach(cell, list)
	{
		if (lfirst_int(cell) == datum)
			return true;
	}

	return false;
}
</source>
</clone>

<clone nlines="13" similarity="84">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="589" endline="609" pcid="26">
List *
list_delete_ptr(List *list, void *datum)
{
	ListCell   *cell;
	ListCell   *prev;

	Assert(IsPointerList(list));
	check_list_invariants(list);

	prev = NULL;
	foreach(cell, list)
	{
		if (lfirst(cell) == datum)
			return list_delete_cell(list, cell, prev);

		prev = cell;
	}

	/* Didn't find a match: return the list unmodified */
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="566" endline="586" pcid="25">
List *
list_delete(List *list, void *datum)
{
	ListCell   *cell;
	ListCell   *prev;

	Assert(IsPointerList(list));
	check_list_invariants(list);

	prev = NULL;
	foreach(cell, list)
	{
		if (equal(lfirst(cell), datum))
			return list_delete_cell(list, cell, prev);

		prev = cell;
	}

	/* Didn't find a match: return the list unmodified */
	return list;
}
</source>
</clone>

<clone nlines="13" similarity="53">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="589" endline="609" pcid="26">
List *
list_delete_ptr(List *list, void *datum)
{
	ListCell   *cell;
	ListCell   *prev;

	Assert(IsPointerList(list));
	check_list_invariants(list);

	prev = NULL;
	foreach(cell, list)
	{
		if (lfirst(cell) == datum)
			return list_delete_cell(list, cell, prev);

		prev = cell;
	}

	/* Didn't find a match: return the list unmodified */
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="464" endline="479" pcid="21">
bool
list_member_ptr(List *list, void *datum)
{
	ListCell   *cell;

	Assert(IsPointerList(list));
	check_list_invariants(list);

	foreach(cell, list)
	{
		if (lfirst(cell) == datum)
			return true;
	}

	return false;
}
</source>
</clone>

<clone nlines="13" similarity="53">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="566" endline="586" pcid="25">
List *
list_delete(List *list, void *datum)
{
	ListCell   *cell;
	ListCell   *prev;

	Assert(IsPointerList(list));
	check_list_invariants(list);

	prev = NULL;
	foreach(cell, list)
	{
		if (equal(lfirst(cell), datum))
			return list_delete_cell(list, cell, prev);

		prev = cell;
	}

	/* Didn't find a match: return the list unmodified */
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="443" endline="458" pcid="20">
bool
list_member(List *list, void *datum)
{
	ListCell   *cell;

	Assert(IsPointerList(list));
	check_list_invariants(list);

	foreach(cell, list)
	{
		if (equal(lfirst(cell), datum))
			return true;
	}

	return false;
}
</source>
</clone>

<clone nlines="12" similarity="50">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="601" endline="619" pcid="87">
static void
_outGroup(StringInfo str, Group *node)
{
	int			i;

	WRITE_NODE_TYPE("GROUP");

	_outPlanInfo(str, (Plan *) node);

	WRITE_INT_FIELD(numCols);

	appendStringInfo(str, " :grpColIdx");
	for (i = 0; i < node->numCols; i++)
		appendStringInfo(str, " %d", node->grpColIdx[i]);

	appendStringInfo(str, " :grpOperators");
	for (i = 0; i < node->numCols; i++)
		appendStringInfo(str, " %u", node->grpOperators[i]);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="653" endline="671" pcid="90">
static void
_outUnique(StringInfo str, Unique *node)
{
	int			i;

	WRITE_NODE_TYPE("UNIQUE");

	_outPlanInfo(str, (Plan *) node);

	WRITE_INT_FIELD(numCols);

	appendStringInfo(str, " :uniqColIdx");
	for (i = 0; i < node->numCols; i++)
		appendStringInfo(str, " %d", node->uniqColIdx[i]);

	appendStringInfo(str, " :uniqOperators");
	for (i = 0; i < node->numCols; i++)
		appendStringInfo(str, " %u", node->uniqOperators[i]);
}
</source>
</clone>

<clone nlines="12" similarity="66">
<source file="examples2/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="184" endline="199" pcid="212">
void
pq_sendstring(StringInfo buf, const char *str)
{
	int			slen = strlen(str);
	char	   *p;

	p = pg_server_to_client(str, slen);
	if (p != str)				/* actual conversion has been done? */
	{
		slen = strlen(p);
		appendBinaryStringInfo(buf, p, slen + 1);
		pfree(p);
	}
	else
		appendBinaryStringInfo(buf, str, slen + 1);
}
</source>
<source file="examples2/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="161" endline="175" pcid="211">
void
pq_sendtext(StringInfo buf, const char *str, int slen)
{
	char	   *p;

	p = pg_server_to_client(str, slen);
	if (p != str)				/* actual conversion has been done? */
	{
		slen = strlen(p);
		appendBinaryStringInfo(buf, p, slen);
		pfree(p);
	}
	else
		appendBinaryStringInfo(buf, str, slen);
}
</source>
</clone>

<clone nlines="12" similarity="58">
<source file="examples2/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="184" endline="199" pcid="212">
void
pq_sendstring(StringInfo buf, const char *str)
{
	int			slen = strlen(str);
	char	   *p;

	p = pg_server_to_client(str, slen);
	if (p != str)				/* actual conversion has been done? */
	{
		slen = strlen(p);
		appendBinaryStringInfo(buf, p, slen + 1);
		pfree(p);
	}
	else
		appendBinaryStringInfo(buf, str, slen + 1);
}
</source>
<source file="examples2/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="425" endline="439" pcid="221">
void
pq_puttextmessage(char msgtype, const char *str)
{
	int			slen = strlen(str);
	char	   *p;

	p = pg_server_to_client(str, slen);
	if (p != str)				/* actual conversion has been done? */
	{
		(void) pq_putmessage(msgtype, p, strlen(p) + 1);
		pfree(p);
		return;
	}
	(void) pq_putmessage(msgtype, str, slen + 1);
}
</source>
</clone>

<clone nlines="11" similarity="54">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="729" endline="743" pcid="261">
static ArrayCoerceExpr *
_readArrayCoerceExpr(void)
{
	READ_LOCALS(ArrayCoerceExpr);

	READ_NODE_FIELD(arg);
	READ_OID_FIELD(elemfuncid);
	READ_OID_FIELD(resulttype);
	READ_INT_FIELD(resulttypmod);
	READ_BOOL_FIELD(isExplicit);
	READ_ENUM_FIELD(coerceformat, CoercionForm);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="970" endline="982" pcid="275">
static CoerceToDomain *
_readCoerceToDomain(void)
{
	READ_LOCALS(CoerceToDomain);

	READ_NODE_FIELD(arg);
	READ_OID_FIELD(resulttype);
	READ_INT_FIELD(resulttypmod);
	READ_ENUM_FIELD(coercionformat, CoercionForm);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
</clone>

<clone nlines="11" similarity="54">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="729" endline="743" pcid="261">
static ArrayCoerceExpr *
_readArrayCoerceExpr(void)
{
	READ_LOCALS(ArrayCoerceExpr);

	READ_NODE_FIELD(arg);
	READ_OID_FIELD(elemfuncid);
	READ_OID_FIELD(resulttype);
	READ_INT_FIELD(resulttypmod);
	READ_BOOL_FIELD(isExplicit);
	READ_ENUM_FIELD(coerceformat, CoercionForm);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="696" endline="708" pcid="259">
static RelabelType *
_readRelabelType(void)
{
	READ_LOCALS(RelabelType);

	READ_NODE_FIELD(arg);
	READ_OID_FIELD(resulttype);
	READ_INT_FIELD(resulttypmod);
	READ_ENUM_FIELD(relabelformat, CoercionForm);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
</clone>

<clone nlines="11" similarity="54">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="729" endline="743" pcid="261">
static ArrayCoerceExpr *
_readArrayCoerceExpr(void)
{
	READ_LOCALS(ArrayCoerceExpr);

	READ_NODE_FIELD(arg);
	READ_OID_FIELD(elemfuncid);
	READ_OID_FIELD(resulttype);
	READ_INT_FIELD(resulttypmod);
	READ_BOOL_FIELD(isExplicit);
	READ_ENUM_FIELD(coerceformat, CoercionForm);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="713" endline="724" pcid="260">
static CoerceViaIO *
_readCoerceViaIO(void)
{
	READ_LOCALS(CoerceViaIO);

	READ_NODE_FIELD(arg);
	READ_OID_FIELD(resulttype);
	READ_ENUM_FIELD(coerceformat, CoercionForm);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
</clone>

<clone nlines="11" similarity="54">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="1055" endline="1071" pcid="46">
List *
list_concat_unique_oid(List *list1, List *list2)
{
	ListCell   *cell;

	Assert(IsOidList(list1));
	Assert(IsOidList(list2));

	foreach(cell, list2)
	{
		if (!list_member_oid(list1, lfirst_oid(cell)))
			list1 = lappend_oid(list1, lfirst_oid(cell));
	}

	check_list_invariants(list1);
	return list1;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="991" endline="1007" pcid="43">
List *
list_concat_unique(List *list1, List *list2)
{
	ListCell   *cell;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	foreach(cell, list2)
	{
		if (!list_member(list1, lfirst(cell)))
			list1 = lappend(list1, lfirst(cell));
	}

	check_list_invariants(list1);
	return list1;
}
</source>
</clone>

<clone nlines="11" similarity="54">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="1055" endline="1071" pcid="46">
List *
list_concat_unique_oid(List *list1, List *list2)
{
	ListCell   *cell;

	Assert(IsOidList(list1));
	Assert(IsOidList(list2));

	foreach(cell, list2)
	{
		if (!list_member_oid(list1, lfirst_oid(cell)))
			list1 = lappend_oid(list1, lfirst_oid(cell));
	}

	check_list_invariants(list1);
	return list1;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="1013" endline="1029" pcid="44">
List *
list_concat_unique_ptr(List *list1, List *list2)
{
	ListCell   *cell;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	foreach(cell, list2)
	{
		if (!list_member_ptr(list1, lfirst(cell)))
			list1 = lappend(list1, lfirst(cell));
	}

	check_list_invariants(list1);
	return list1;
}
</source>
</clone>

<clone nlines="11" similarity="54">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="1055" endline="1071" pcid="46">
List *
list_concat_unique_oid(List *list1, List *list2)
{
	ListCell   *cell;

	Assert(IsOidList(list1));
	Assert(IsOidList(list2));

	foreach(cell, list2)
	{
		if (!list_member_oid(list1, lfirst_oid(cell)))
			list1 = lappend_oid(list1, lfirst_oid(cell));
	}

	check_list_invariants(list1);
	return list1;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="1034" endline="1050" pcid="45">
List *
list_concat_unique_int(List *list1, List *list2)
{
	ListCell   *cell;

	Assert(IsIntegerList(list1));
	Assert(IsIntegerList(list2));

	foreach(cell, list2)
	{
		if (!list_member_int(list1, lfirst_int(cell)))
			list1 = lappend_int(list1, lfirst_int(cell));
	}

	check_list_invariants(list1);
	return list1;
}
</source>
</clone>

<clone nlines="11" similarity="54">
<source file="examples2/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="161" endline="175" pcid="211">
void
pq_sendtext(StringInfo buf, const char *str, int slen)
{
	char	   *p;

	p = pg_server_to_client(str, slen);
	if (p != str)				/* actual conversion has been done? */
	{
		slen = strlen(p);
		appendBinaryStringInfo(buf, p, slen);
		pfree(p);
	}
	else
		appendBinaryStringInfo(buf, str, slen);
}
</source>
<source file="examples2/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="425" endline="439" pcid="221">
void
pq_puttextmessage(char msgtype, const char *str)
{
	int			slen = strlen(str);
	char	   *p;

	p = pg_server_to_client(str, slen);
	if (p != str)				/* actual conversion has been done? */
	{
		(void) pq_putmessage(msgtype, p, strlen(p) + 1);
		pfree(p);
		return;
	}
	(void) pq_putmessage(msgtype, str, slen + 1);
}
</source>
</clone>

<clone nlines="11" similarity="81">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="991" endline="1007" pcid="43">
List *
list_concat_unique(List *list1, List *list2)
{
	ListCell   *cell;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	foreach(cell, list2)
	{
		if (!list_member(list1, lfirst(cell)))
			list1 = lappend(list1, lfirst(cell));
	}

	check_list_invariants(list1);
	return list1;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="1013" endline="1029" pcid="44">
List *
list_concat_unique_ptr(List *list1, List *list2)
{
	ListCell   *cell;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	foreach(cell, list2)
	{
		if (!list_member_ptr(list1, lfirst(cell)))
			list1 = lappend(list1, lfirst(cell));
	}

	check_list_invariants(list1);
	return list1;
}
</source>
</clone>

<clone nlines="11" similarity="54">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="991" endline="1007" pcid="43">
List *
list_concat_unique(List *list1, List *list2)
{
	ListCell   *cell;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	foreach(cell, list2)
	{
		if (!list_member(list1, lfirst(cell)))
			list1 = lappend(list1, lfirst(cell));
	}

	check_list_invariants(list1);
	return list1;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="1034" endline="1050" pcid="45">
List *
list_concat_unique_int(List *list1, List *list2)
{
	ListCell   *cell;

	Assert(IsIntegerList(list1));
	Assert(IsIntegerList(list2));

	foreach(cell, list2)
	{
		if (!list_member_int(list1, lfirst_int(cell)))
			list1 = lappend_int(list1, lfirst_int(cell));
	}

	check_list_invariants(list1);
	return list1;
}
</source>
</clone>

<clone nlines="11" similarity="54">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="1013" endline="1029" pcid="44">
List *
list_concat_unique_ptr(List *list1, List *list2)
{
	ListCell   *cell;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	foreach(cell, list2)
	{
		if (!list_member_ptr(list1, lfirst(cell)))
			list1 = lappend(list1, lfirst(cell));
	}

	check_list_invariants(list1);
	return list1;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="1034" endline="1050" pcid="45">
List *
list_concat_unique_int(List *list1, List *list2)
{
	ListCell   *cell;

	Assert(IsIntegerList(list1));
	Assert(IsIntegerList(list2));

	foreach(cell, list2)
	{
		if (!list_member_int(list1, lfirst_int(cell)))
			list1 = lappend_int(list1, lfirst_int(cell));
	}

	check_list_invariants(list1);
	return list1;
}
</source>
</clone>

<clone nlines="11" similarity="81">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="560" endline="584" pcid="253">
static DistinctExpr *
_readDistinctExpr(void)
{
	READ_LOCALS(DistinctExpr);

	READ_OID_FIELD(opno);
	READ_OID_FIELD(opfuncid);

	/*
	 * The opfuncid is stored in the textual format primarily for debugging
	 * and documentation reasons.  We want to always read it as zero to force
	 * it to be re-looked-up in the pg_operator entry.	This ensures that
	 * stored rules don't have hidden dependencies on operators' functions.
	 * (We don't currently support an ALTER OPERATOR command, but might
	 * someday.)
	 */
	local_node->opfuncid = InvalidOid;

	READ_OID_FIELD(opresulttype);
	READ_BOOL_FIELD(opretset);
	READ_NODE_FIELD(args);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="531" endline="555" pcid="252">
static OpExpr *
_readOpExpr(void)
{
	READ_LOCALS(OpExpr);

	READ_OID_FIELD(opno);
	READ_OID_FIELD(opfuncid);

	/*
	 * The opfuncid is stored in the textual format primarily for debugging
	 * and documentation reasons.  We want to always read it as zero to force
	 * it to be re-looked-up in the pg_operator entry.	This ensures that
	 * stored rules don't have hidden dependencies on operators' functions.
	 * (We don't currently support an ALTER OPERATOR command, but might
	 * someday.)
	 */
	local_node->opfuncid = InvalidOid;

	READ_OID_FIELD(opresulttype);
	READ_BOOL_FIELD(opretset);
	READ_NODE_FIELD(args);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
</clone>

<clone nlines="11" similarity="81">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="560" endline="584" pcid="253">
static DistinctExpr *
_readDistinctExpr(void)
{
	READ_LOCALS(DistinctExpr);

	READ_OID_FIELD(opno);
	READ_OID_FIELD(opfuncid);

	/*
	 * The opfuncid is stored in the textual format primarily for debugging
	 * and documentation reasons.  We want to always read it as zero to force
	 * it to be re-looked-up in the pg_operator entry.	This ensures that
	 * stored rules don't have hidden dependencies on operators' functions.
	 * (We don't currently support an ALTER OPERATOR command, but might
	 * someday.)
	 */
	local_node->opfuncid = InvalidOid;

	READ_OID_FIELD(opresulttype);
	READ_BOOL_FIELD(opretset);
	READ_NODE_FIELD(args);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="913" endline="937" pcid="272">
static NullIfExpr *
_readNullIfExpr(void)
{
	READ_LOCALS(NullIfExpr);

	READ_OID_FIELD(opno);
	READ_OID_FIELD(opfuncid);

	/*
	 * The opfuncid is stored in the textual format primarily for debugging
	 * and documentation reasons.  We want to always read it as zero to force
	 * it to be re-looked-up in the pg_operator entry.	This ensures that
	 * stored rules don't have hidden dependencies on operators' functions.
	 * (We don't currently support an ALTER OPERATOR command, but might
	 * someday.)
	 */
	local_node->opfuncid = InvalidOid;

	READ_OID_FIELD(opresulttype);
	READ_BOOL_FIELD(opretset);
	READ_NODE_FIELD(args);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
</clone>

<clone nlines="11" similarity="63">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="560" endline="584" pcid="253">
static DistinctExpr *
_readDistinctExpr(void)
{
	READ_LOCALS(DistinctExpr);

	READ_OID_FIELD(opno);
	READ_OID_FIELD(opfuncid);

	/*
	 * The opfuncid is stored in the textual format primarily for debugging
	 * and documentation reasons.  We want to always read it as zero to force
	 * it to be re-looked-up in the pg_operator entry.	This ensures that
	 * stored rules don't have hidden dependencies on operators' functions.
	 * (We don't currently support an ALTER OPERATOR command, but might
	 * someday.)
	 */
	local_node->opfuncid = InvalidOid;

	READ_OID_FIELD(opresulttype);
	READ_BOOL_FIELD(opretset);
	READ_NODE_FIELD(args);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="589" endline="612" pcid="254">
static ScalarArrayOpExpr *
_readScalarArrayOpExpr(void)
{
	READ_LOCALS(ScalarArrayOpExpr);

	READ_OID_FIELD(opno);
	READ_OID_FIELD(opfuncid);

	/*
	 * The opfuncid is stored in the textual format primarily for debugging
	 * and documentation reasons.  We want to always read it as zero to force
	 * it to be re-looked-up in the pg_operator entry.	This ensures that
	 * stored rules don't have hidden dependencies on operators' functions.
	 * (We don't currently support an ALTER OPERATOR command, but might
	 * someday.)
	 */
	local_node->opfuncid = InvalidOid;

	READ_BOOL_FIELD(useOr);
	READ_NODE_FIELD(args);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
</clone>

<clone nlines="11" similarity="81">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="531" endline="555" pcid="252">
static OpExpr *
_readOpExpr(void)
{
	READ_LOCALS(OpExpr);

	READ_OID_FIELD(opno);
	READ_OID_FIELD(opfuncid);

	/*
	 * The opfuncid is stored in the textual format primarily for debugging
	 * and documentation reasons.  We want to always read it as zero to force
	 * it to be re-looked-up in the pg_operator entry.	This ensures that
	 * stored rules don't have hidden dependencies on operators' functions.
	 * (We don't currently support an ALTER OPERATOR command, but might
	 * someday.)
	 */
	local_node->opfuncid = InvalidOid;

	READ_OID_FIELD(opresulttype);
	READ_BOOL_FIELD(opretset);
	READ_NODE_FIELD(args);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="913" endline="937" pcid="272">
static NullIfExpr *
_readNullIfExpr(void)
{
	READ_LOCALS(NullIfExpr);

	READ_OID_FIELD(opno);
	READ_OID_FIELD(opfuncid);

	/*
	 * The opfuncid is stored in the textual format primarily for debugging
	 * and documentation reasons.  We want to always read it as zero to force
	 * it to be re-looked-up in the pg_operator entry.	This ensures that
	 * stored rules don't have hidden dependencies on operators' functions.
	 * (We don't currently support an ALTER OPERATOR command, but might
	 * someday.)
	 */
	local_node->opfuncid = InvalidOid;

	READ_OID_FIELD(opresulttype);
	READ_BOOL_FIELD(opretset);
	READ_NODE_FIELD(args);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
</clone>

<clone nlines="11" similarity="63">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="531" endline="555" pcid="252">
static OpExpr *
_readOpExpr(void)
{
	READ_LOCALS(OpExpr);

	READ_OID_FIELD(opno);
	READ_OID_FIELD(opfuncid);

	/*
	 * The opfuncid is stored in the textual format primarily for debugging
	 * and documentation reasons.  We want to always read it as zero to force
	 * it to be re-looked-up in the pg_operator entry.	This ensures that
	 * stored rules don't have hidden dependencies on operators' functions.
	 * (We don't currently support an ALTER OPERATOR command, but might
	 * someday.)
	 */
	local_node->opfuncid = InvalidOid;

	READ_OID_FIELD(opresulttype);
	READ_BOOL_FIELD(opretset);
	READ_NODE_FIELD(args);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="589" endline="612" pcid="254">
static ScalarArrayOpExpr *
_readScalarArrayOpExpr(void)
{
	READ_LOCALS(ScalarArrayOpExpr);

	READ_OID_FIELD(opno);
	READ_OID_FIELD(opfuncid);

	/*
	 * The opfuncid is stored in the textual format primarily for debugging
	 * and documentation reasons.  We want to always read it as zero to force
	 * it to be re-looked-up in the pg_operator entry.	This ensures that
	 * stored rules don't have hidden dependencies on operators' functions.
	 * (We don't currently support an ALTER OPERATOR command, but might
	 * someday.)
	 */
	local_node->opfuncid = InvalidOid;

	READ_BOOL_FIELD(useOr);
	READ_NODE_FIELD(args);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
</clone>

<clone nlines="11" similarity="63">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="913" endline="937" pcid="272">
static NullIfExpr *
_readNullIfExpr(void)
{
	READ_LOCALS(NullIfExpr);

	READ_OID_FIELD(opno);
	READ_OID_FIELD(opfuncid);

	/*
	 * The opfuncid is stored in the textual format primarily for debugging
	 * and documentation reasons.  We want to always read it as zero to force
	 * it to be re-looked-up in the pg_operator entry.	This ensures that
	 * stored rules don't have hidden dependencies on operators' functions.
	 * (We don't currently support an ALTER OPERATOR command, but might
	 * someday.)
	 */
	local_node->opfuncid = InvalidOid;

	READ_OID_FIELD(opresulttype);
	READ_BOOL_FIELD(opretset);
	READ_NODE_FIELD(args);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="589" endline="612" pcid="254">
static ScalarArrayOpExpr *
_readScalarArrayOpExpr(void)
{
	READ_LOCALS(ScalarArrayOpExpr);

	READ_OID_FIELD(opno);
	READ_OID_FIELD(opfuncid);

	/*
	 * The opfuncid is stored in the textual format primarily for debugging
	 * and documentation reasons.  We want to always read it as zero to force
	 * it to be re-looked-up in the pg_operator entry.	This ensures that
	 * stored rules don't have hidden dependencies on operators' functions.
	 * (We don't currently support an ALTER OPERATOR command, but might
	 * someday.)
	 */
	local_node->opfuncid = InvalidOid;

	READ_BOOL_FIELD(useOr);
	READ_NODE_FIELD(args);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
</clone>

<clone nlines="10" similarity="60">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="127" endline="140" pcid="4">
List *
lappend(List *list, void *datum)
{
	Assert(IsPointerList(list));

	if (list == NIL)
		list = new_list(T_List);
	else
		new_tail_cell(list);

	lfirst(list->tail) = datum;
	check_list_invariants(list);
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="163" endline="176" pcid="6">
List *
lappend_oid(List *list, Oid datum)
{
	Assert(IsOidList(list));

	if (list == NIL)
		list = new_list(T_OidList);
	else
		new_tail_cell(list);

	lfirst_oid(list->tail) = datum;
	check_list_invariants(list);
	return list;
}
</source>
</clone>

<clone nlines="10" similarity="70">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="127" endline="140" pcid="4">
List *
lappend(List *list, void *datum)
{
	Assert(IsPointerList(list));

	if (list == NIL)
		list = new_list(T_List);
	else
		new_tail_cell(list);

	lfirst(list->tail) = datum;
	check_list_invariants(list);
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="258" endline="271" pcid="11">
List *
lcons(void *datum, List *list)
{
	Assert(IsPointerList(list));

	if (list == NIL)
		list = new_list(T_List);
	else
		new_head_cell(list);

	lfirst(list->head) = datum;
	check_list_invariants(list);
	return list;
}
</source>
</clone>

<clone nlines="10" similarity="60">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="127" endline="140" pcid="4">
List *
lappend(List *list, void *datum)
{
	Assert(IsPointerList(list));

	if (list == NIL)
		list = new_list(T_List);
	else
		new_tail_cell(list);

	lfirst(list->tail) = datum;
	check_list_invariants(list);
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="145" endline="158" pcid="5">
List *
lappend_int(List *list, int datum)
{
	Assert(IsIntegerList(list));

	if (list == NIL)
		list = new_list(T_IntList);
	else
		new_tail_cell(list);

	lfirst_int(list->tail) = datum;
	check_list_invariants(list);
	return list;
}
</source>
</clone>

<clone nlines="10" similarity="50">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="127" endline="140" pcid="4">
List *
lappend(List *list, void *datum)
{
	Assert(IsPointerList(list));

	if (list == NIL)
		list = new_list(T_List);
	else
		new_tail_cell(list);

	lfirst(list->tail) = datum;
	check_list_invariants(list);
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="294" endline="307" pcid="13">
List *
lcons_oid(Oid datum, List *list)
{
	Assert(IsOidList(list));

	if (list == NIL)
		list = new_list(T_OidList);
	else
		new_head_cell(list);

	lfirst_oid(list->head) = datum;
	check_list_invariants(list);
	return list;
}
</source>
</clone>

<clone nlines="10" similarity="50">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="127" endline="140" pcid="4">
List *
lappend(List *list, void *datum)
{
	Assert(IsPointerList(list));

	if (list == NIL)
		list = new_list(T_List);
	else
		new_tail_cell(list);

	lfirst(list->tail) = datum;
	check_list_invariants(list);
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="276" endline="289" pcid="12">
List *
lcons_int(int datum, List *list)
{
	Assert(IsIntegerList(list));

	if (list == NIL)
		list = new_list(T_IntList);
	else
		new_head_cell(list);

	lfirst_int(list->head) = datum;
	check_list_invariants(list);
	return list;
}
</source>
</clone>

<clone nlines="10" similarity="50">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="163" endline="176" pcid="6">
List *
lappend_oid(List *list, Oid datum)
{
	Assert(IsOidList(list));

	if (list == NIL)
		list = new_list(T_OidList);
	else
		new_tail_cell(list);

	lfirst_oid(list->tail) = datum;
	check_list_invariants(list);
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="258" endline="271" pcid="11">
List *
lcons(void *datum, List *list)
{
	Assert(IsPointerList(list));

	if (list == NIL)
		list = new_list(T_List);
	else
		new_head_cell(list);

	lfirst(list->head) = datum;
	check_list_invariants(list);
	return list;
}
</source>
</clone>

<clone nlines="10" similarity="60">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="163" endline="176" pcid="6">
List *
lappend_oid(List *list, Oid datum)
{
	Assert(IsOidList(list));

	if (list == NIL)
		list = new_list(T_OidList);
	else
		new_tail_cell(list);

	lfirst_oid(list->tail) = datum;
	check_list_invariants(list);
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="145" endline="158" pcid="5">
List *
lappend_int(List *list, int datum)
{
	Assert(IsIntegerList(list));

	if (list == NIL)
		list = new_list(T_IntList);
	else
		new_tail_cell(list);

	lfirst_int(list->tail) = datum;
	check_list_invariants(list);
	return list;
}
</source>
</clone>

<clone nlines="10" similarity="70">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="163" endline="176" pcid="6">
List *
lappend_oid(List *list, Oid datum)
{
	Assert(IsOidList(list));

	if (list == NIL)
		list = new_list(T_OidList);
	else
		new_tail_cell(list);

	lfirst_oid(list->tail) = datum;
	check_list_invariants(list);
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="294" endline="307" pcid="13">
List *
lcons_oid(Oid datum, List *list)
{
	Assert(IsOidList(list));

	if (list == NIL)
		list = new_list(T_OidList);
	else
		new_head_cell(list);

	lfirst_oid(list->head) = datum;
	check_list_invariants(list);
	return list;
}
</source>
</clone>

<clone nlines="10" similarity="50">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="163" endline="176" pcid="6">
List *
lappend_oid(List *list, Oid datum)
{
	Assert(IsOidList(list));

	if (list == NIL)
		list = new_list(T_OidList);
	else
		new_tail_cell(list);

	lfirst_oid(list->tail) = datum;
	check_list_invariants(list);
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="276" endline="289" pcid="12">
List *
lcons_int(int datum, List *list)
{
	Assert(IsIntegerList(list));

	if (list == NIL)
		list = new_list(T_IntList);
	else
		new_head_cell(list);

	lfirst_int(list->head) = datum;
	check_list_invariants(list);
	return list;
}
</source>
</clone>

<clone nlines="10" similarity="70">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="484" endline="499" pcid="22">
bool
list_member_int(List *list, int datum)
{
	ListCell   *cell;

	Assert(IsIntegerList(list));
	check_list_invariants(list);

	foreach(cell, list)
	{
		if (lfirst_int(cell) == datum)
			return true;
	}

	return false;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="504" endline="519" pcid="23">
bool
list_member_oid(List *list, Oid datum)
{
	ListCell   *cell;

	Assert(IsOidList(list));
	check_list_invariants(list);

	foreach(cell, list)
	{
		if (lfirst_oid(cell) == datum)
			return true;
	}

	return false;
}
</source>
</clone>

<clone nlines="10" similarity="70">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="484" endline="499" pcid="22">
bool
list_member_int(List *list, int datum)
{
	ListCell   *cell;

	Assert(IsIntegerList(list));
	check_list_invariants(list);

	foreach(cell, list)
	{
		if (lfirst_int(cell) == datum)
			return true;
	}

	return false;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="464" endline="479" pcid="21">
bool
list_member_ptr(List *list, void *datum)
{
	ListCell   *cell;

	Assert(IsPointerList(list));
	check_list_invariants(list);

	foreach(cell, list)
	{
		if (lfirst(cell) == datum)
			return true;
	}

	return false;
}
</source>
</clone>

<clone nlines="10" similarity="70">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="484" endline="499" pcid="22">
bool
list_member_int(List *list, int datum)
{
	ListCell   *cell;

	Assert(IsIntegerList(list));
	check_list_invariants(list);

	foreach(cell, list)
	{
		if (lfirst_int(cell) == datum)
			return true;
	}

	return false;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="443" endline="458" pcid="20">
bool
list_member(List *list, void *datum)
{
	ListCell   *cell;

	Assert(IsPointerList(list));
	check_list_invariants(list);

	foreach(cell, list)
	{
		if (equal(lfirst(cell), datum))
			return true;
	}

	return false;
}
</source>
</clone>

<clone nlines="10" similarity="50">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="258" endline="271" pcid="11">
List *
lcons(void *datum, List *list)
{
	Assert(IsPointerList(list));

	if (list == NIL)
		list = new_list(T_List);
	else
		new_head_cell(list);

	lfirst(list->head) = datum;
	check_list_invariants(list);
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="145" endline="158" pcid="5">
List *
lappend_int(List *list, int datum)
{
	Assert(IsIntegerList(list));

	if (list == NIL)
		list = new_list(T_IntList);
	else
		new_tail_cell(list);

	lfirst_int(list->tail) = datum;
	check_list_invariants(list);
	return list;
}
</source>
</clone>

<clone nlines="10" similarity="60">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="258" endline="271" pcid="11">
List *
lcons(void *datum, List *list)
{
	Assert(IsPointerList(list));

	if (list == NIL)
		list = new_list(T_List);
	else
		new_head_cell(list);

	lfirst(list->head) = datum;
	check_list_invariants(list);
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="294" endline="307" pcid="13">
List *
lcons_oid(Oid datum, List *list)
{
	Assert(IsOidList(list));

	if (list == NIL)
		list = new_list(T_OidList);
	else
		new_head_cell(list);

	lfirst_oid(list->head) = datum;
	check_list_invariants(list);
	return list;
}
</source>
</clone>

<clone nlines="10" similarity="60">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="258" endline="271" pcid="11">
List *
lcons(void *datum, List *list)
{
	Assert(IsPointerList(list));

	if (list == NIL)
		list = new_list(T_List);
	else
		new_head_cell(list);

	lfirst(list->head) = datum;
	check_list_invariants(list);
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="276" endline="289" pcid="12">
List *
lcons_int(int datum, List *list)
{
	Assert(IsIntegerList(list));

	if (list == NIL)
		list = new_list(T_IntList);
	else
		new_head_cell(list);

	lfirst_int(list->head) = datum;
	check_list_invariants(list);
	return list;
}
</source>
</clone>

<clone nlines="10" similarity="70">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="504" endline="519" pcid="23">
bool
list_member_oid(List *list, Oid datum)
{
	ListCell   *cell;

	Assert(IsOidList(list));
	check_list_invariants(list);

	foreach(cell, list)
	{
		if (lfirst_oid(cell) == datum)
			return true;
	}

	return false;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="464" endline="479" pcid="21">
bool
list_member_ptr(List *list, void *datum)
{
	ListCell   *cell;

	Assert(IsPointerList(list));
	check_list_invariants(list);

	foreach(cell, list)
	{
		if (lfirst(cell) == datum)
			return true;
	}

	return false;
}
</source>
</clone>

<clone nlines="10" similarity="70">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="504" endline="519" pcid="23">
bool
list_member_oid(List *list, Oid datum)
{
	ListCell   *cell;

	Assert(IsOidList(list));
	check_list_invariants(list);

	foreach(cell, list)
	{
		if (lfirst_oid(cell) == datum)
			return true;
	}

	return false;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="443" endline="458" pcid="20">
bool
list_member(List *list, void *datum)
{
	ListCell   *cell;

	Assert(IsPointerList(list));
	check_list_invariants(list);

	foreach(cell, list)
	{
		if (equal(lfirst(cell), datum))
			return true;
	}

	return false;
}
</source>
</clone>

<clone nlines="10" similarity="60">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1961" endline="1973" pcid="183">
static void
_outWindowClause(StringInfo str, WindowClause *node)
{
	WRITE_NODE_TYPE("WINDOWCLAUSE");

	WRITE_STRING_FIELD(name);
	WRITE_STRING_FIELD(refname);
	WRITE_NODE_FIELD(partitionClause);
	WRITE_NODE_FIELD(orderClause);
	WRITE_INT_FIELD(frameOptions);
	WRITE_UINT_FIELD(winref);
	WRITE_BOOL_FIELD(copiedOrder);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2253" endline="2264" pcid="200">
static void
_outWindowDef(StringInfo str, WindowDef *node)
{
	WRITE_NODE_TYPE("WINDOWDEF");

	WRITE_STRING_FIELD(name);
	WRITE_STRING_FIELD(refname);
	WRITE_NODE_FIELD(partitionClause);
	WRITE_NODE_FIELD(orderClause);
	WRITE_INT_FIELD(frameOptions);
	WRITE_LOCATION_FIELD(location);
}
</source>
</clone>

<clone nlines="10" similarity="80">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="464" endline="479" pcid="21">
bool
list_member_ptr(List *list, void *datum)
{
	ListCell   *cell;

	Assert(IsPointerList(list));
	check_list_invariants(list);

	foreach(cell, list)
	{
		if (lfirst(cell) == datum)
			return true;
	}

	return false;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="443" endline="458" pcid="20">
bool
list_member(List *list, void *datum)
{
	ListCell   *cell;

	Assert(IsPointerList(list));
	check_list_invariants(list);

	foreach(cell, list)
	{
		if (equal(lfirst(cell), datum))
			return true;
	}

	return false;
}
</source>
</clone>

<clone nlines="10" similarity="50">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="145" endline="158" pcid="5">
List *
lappend_int(List *list, int datum)
{
	Assert(IsIntegerList(list));

	if (list == NIL)
		list = new_list(T_IntList);
	else
		new_tail_cell(list);

	lfirst_int(list->tail) = datum;
	check_list_invariants(list);
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="294" endline="307" pcid="13">
List *
lcons_oid(Oid datum, List *list)
{
	Assert(IsOidList(list));

	if (list == NIL)
		list = new_list(T_OidList);
	else
		new_head_cell(list);

	lfirst_oid(list->head) = datum;
	check_list_invariants(list);
	return list;
}
</source>
</clone>

<clone nlines="10" similarity="70">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="145" endline="158" pcid="5">
List *
lappend_int(List *list, int datum)
{
	Assert(IsIntegerList(list));

	if (list == NIL)
		list = new_list(T_IntList);
	else
		new_tail_cell(list);

	lfirst_int(list->tail) = datum;
	check_list_invariants(list);
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="276" endline="289" pcid="12">
List *
lcons_int(int datum, List *list)
{
	Assert(IsIntegerList(list));

	if (list == NIL)
		list = new_list(T_IntList);
	else
		new_head_cell(list);

	lfirst_int(list->head) = datum;
	check_list_invariants(list);
	return list;
}
</source>
</clone>

<clone nlines="10" similarity="50">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1030" endline="1042" pcid="116">
static void
_outArrayCoerceExpr(StringInfo str, ArrayCoerceExpr *node)
{
	WRITE_NODE_TYPE("ARRAYCOERCEEXPR");

	WRITE_NODE_FIELD(arg);
	WRITE_OID_FIELD(elemfuncid);
	WRITE_OID_FIELD(resulttype);
	WRITE_INT_FIELD(resulttypmod);
	WRITE_BOOL_FIELD(isExplicit);
	WRITE_ENUM_FIELD(coerceformat, CoercionForm);
	WRITE_LOCATION_FIELD(location);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1190" endline="1200" pcid="130">
static void
_outCoerceToDomain(StringInfo str, CoerceToDomain *node)
{
	WRITE_NODE_TYPE("COERCETODOMAIN");

	WRITE_NODE_FIELD(arg);
	WRITE_OID_FIELD(resulttype);
	WRITE_INT_FIELD(resulttypmod);
	WRITE_ENUM_FIELD(coercionformat, CoercionForm);
	WRITE_LOCATION_FIELD(location);
}
</source>
</clone>

<clone nlines="10" similarity="50">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1030" endline="1042" pcid="116">
static void
_outArrayCoerceExpr(StringInfo str, ArrayCoerceExpr *node)
{
	WRITE_NODE_TYPE("ARRAYCOERCEEXPR");

	WRITE_NODE_FIELD(arg);
	WRITE_OID_FIELD(elemfuncid);
	WRITE_OID_FIELD(resulttype);
	WRITE_INT_FIELD(resulttypmod);
	WRITE_BOOL_FIELD(isExplicit);
	WRITE_ENUM_FIELD(coerceformat, CoercionForm);
	WRITE_LOCATION_FIELD(location);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1007" endline="1017" pcid="114">
static void
_outRelabelType(StringInfo str, RelabelType *node)
{
	WRITE_NODE_TYPE("RELABELTYPE");

	WRITE_NODE_FIELD(arg);
	WRITE_OID_FIELD(resulttype);
	WRITE_INT_FIELD(resulttypmod);
	WRITE_ENUM_FIELD(relabelformat, CoercionForm);
	WRITE_LOCATION_FIELD(location);
}
</source>
</clone>

<clone nlines="10" similarity="50">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1030" endline="1042" pcid="116">
static void
_outArrayCoerceExpr(StringInfo str, ArrayCoerceExpr *node)
{
	WRITE_NODE_TYPE("ARRAYCOERCEEXPR");

	WRITE_NODE_FIELD(arg);
	WRITE_OID_FIELD(elemfuncid);
	WRITE_OID_FIELD(resulttype);
	WRITE_INT_FIELD(resulttypmod);
	WRITE_BOOL_FIELD(isExplicit);
	WRITE_ENUM_FIELD(coerceformat, CoercionForm);
	WRITE_LOCATION_FIELD(location);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1019" endline="1028" pcid="115">
static void
_outCoerceViaIO(StringInfo str, CoerceViaIO *node)
{
	WRITE_NODE_TYPE("COERCEVIAIO");

	WRITE_NODE_FIELD(arg);
	WRITE_OID_FIELD(resulttype);
	WRITE_ENUM_FIELD(coerceformat, CoercionForm);
	WRITE_LOCATION_FIELD(location);
}
</source>
</clone>

<clone nlines="10" similarity="60">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="294" endline="307" pcid="13">
List *
lcons_oid(Oid datum, List *list)
{
	Assert(IsOidList(list));

	if (list == NIL)
		list = new_list(T_OidList);
	else
		new_head_cell(list);

	lfirst_oid(list->head) = datum;
	check_list_invariants(list);
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="276" endline="289" pcid="12">
List *
lcons_int(int datum, List *list)
{
	Assert(IsIntegerList(list));

	if (list == NIL)
		list = new_list(T_IntList);
	else
		new_head_cell(list);

	lfirst_int(list->head) = datum;
	check_list_invariants(list);
	return list;
}
</source>
</clone>

<clone nlines="9" similarity="66">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="970" endline="982" pcid="275">
static CoerceToDomain *
_readCoerceToDomain(void)
{
	READ_LOCALS(CoerceToDomain);

	READ_NODE_FIELD(arg);
	READ_OID_FIELD(resulttype);
	READ_INT_FIELD(resulttypmod);
	READ_ENUM_FIELD(coercionformat, CoercionForm);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="696" endline="708" pcid="259">
static RelabelType *
_readRelabelType(void)
{
	READ_LOCALS(RelabelType);

	READ_NODE_FIELD(arg);
	READ_OID_FIELD(resulttype);
	READ_INT_FIELD(resulttypmod);
	READ_ENUM_FIELD(relabelformat, CoercionForm);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
</clone>

<clone nlines="9" similarity="55">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="970" endline="982" pcid="275">
static CoerceToDomain *
_readCoerceToDomain(void)
{
	READ_LOCALS(CoerceToDomain);

	READ_NODE_FIELD(arg);
	READ_OID_FIELD(resulttype);
	READ_INT_FIELD(resulttypmod);
	READ_ENUM_FIELD(coercionformat, CoercionForm);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="748" endline="759" pcid="262">
static ConvertRowtypeExpr *
_readConvertRowtypeExpr(void)
{
	READ_LOCALS(ConvertRowtypeExpr);

	READ_NODE_FIELD(arg);
	READ_OID_FIELD(resulttype);
	READ_ENUM_FIELD(convertformat, CoercionForm);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
</clone>

<clone nlines="9" similarity="55">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="970" endline="982" pcid="275">
static CoerceToDomain *
_readCoerceToDomain(void)
{
	READ_LOCALS(CoerceToDomain);

	READ_NODE_FIELD(arg);
	READ_OID_FIELD(resulttype);
	READ_INT_FIELD(resulttypmod);
	READ_ENUM_FIELD(coercionformat, CoercionForm);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="664" endline="675" pcid="257">
static FieldSelect *
_readFieldSelect(void)
{
	READ_LOCALS(FieldSelect);

	READ_NODE_FIELD(arg);
	READ_INT_FIELD(fieldnum);
	READ_OID_FIELD(resulttype);
	READ_INT_FIELD(resulttypmod);

	READ_DONE();
}
</source>
</clone>

<clone nlines="9" similarity="55">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="970" endline="982" pcid="275">
static CoerceToDomain *
_readCoerceToDomain(void)
{
	READ_LOCALS(CoerceToDomain);

	READ_NODE_FIELD(arg);
	READ_OID_FIELD(resulttype);
	READ_INT_FIELD(resulttypmod);
	READ_ENUM_FIELD(coercionformat, CoercionForm);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="713" endline="724" pcid="260">
static CoerceViaIO *
_readCoerceViaIO(void)
{
	READ_LOCALS(CoerceViaIO);

	READ_NODE_FIELD(arg);
	READ_OID_FIELD(resulttype);
	READ_ENUM_FIELD(coerceformat, CoercionForm);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
</clone>

<clone nlines="9" similarity="77">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="892" endline="903" pcid="106">
static void
_outDistinctExpr(StringInfo str, DistinctExpr *node)
{
	WRITE_NODE_TYPE("DISTINCTEXPR");

	WRITE_OID_FIELD(opno);
	WRITE_OID_FIELD(opfuncid);
	WRITE_OID_FIELD(opresulttype);
	WRITE_BOOL_FIELD(opretset);
	WRITE_NODE_FIELD(args);
	WRITE_LOCATION_FIELD(location);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="879" endline="890" pcid="105">
static void
_outOpExpr(StringInfo str, OpExpr *node)
{
	WRITE_NODE_TYPE("OPEXPR");

	WRITE_OID_FIELD(opno);
	WRITE_OID_FIELD(opfuncid);
	WRITE_OID_FIELD(opresulttype);
	WRITE_BOOL_FIELD(opretset);
	WRITE_NODE_FIELD(args);
	WRITE_LOCATION_FIELD(location);
}
</source>
</clone>

<clone nlines="9" similarity="77">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="892" endline="903" pcid="106">
static void
_outDistinctExpr(StringInfo str, DistinctExpr *node)
{
	WRITE_NODE_TYPE("DISTINCTEXPR");

	WRITE_OID_FIELD(opno);
	WRITE_OID_FIELD(opfuncid);
	WRITE_OID_FIELD(opresulttype);
	WRITE_BOOL_FIELD(opretset);
	WRITE_NODE_FIELD(args);
	WRITE_LOCATION_FIELD(location);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1159" endline="1170" pcid="127">
static void
_outNullIfExpr(StringInfo str, NullIfExpr *node)
{
	WRITE_NODE_TYPE("NULLIFEXPR");

	WRITE_OID_FIELD(opno);
	WRITE_OID_FIELD(opfuncid);
	WRITE_OID_FIELD(opresulttype);
	WRITE_BOOL_FIELD(opretset);
	WRITE_NODE_FIELD(args);
	WRITE_LOCATION_FIELD(location);
}
</source>
</clone>

<clone nlines="9" similarity="55">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="892" endline="903" pcid="106">
static void
_outDistinctExpr(StringInfo str, DistinctExpr *node)
{
	WRITE_NODE_TYPE("DISTINCTEXPR");

	WRITE_OID_FIELD(opno);
	WRITE_OID_FIELD(opfuncid);
	WRITE_OID_FIELD(opresulttype);
	WRITE_BOOL_FIELD(opretset);
	WRITE_NODE_FIELD(args);
	WRITE_LOCATION_FIELD(location);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="905" endline="915" pcid="107">
static void
_outScalarArrayOpExpr(StringInfo str, ScalarArrayOpExpr *node)
{
	WRITE_NODE_TYPE("SCALARARRAYOPEXPR");

	WRITE_OID_FIELD(opno);
	WRITE_OID_FIELD(opfuncid);
	WRITE_BOOL_FIELD(useOr);
	WRITE_NODE_FIELD(args);
	WRITE_LOCATION_FIELD(location);
}
</source>
</clone>

<clone nlines="9" similarity="77">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="879" endline="890" pcid="105">
static void
_outOpExpr(StringInfo str, OpExpr *node)
{
	WRITE_NODE_TYPE("OPEXPR");

	WRITE_OID_FIELD(opno);
	WRITE_OID_FIELD(opfuncid);
	WRITE_OID_FIELD(opresulttype);
	WRITE_BOOL_FIELD(opretset);
	WRITE_NODE_FIELD(args);
	WRITE_LOCATION_FIELD(location);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1159" endline="1170" pcid="127">
static void
_outNullIfExpr(StringInfo str, NullIfExpr *node)
{
	WRITE_NODE_TYPE("NULLIFEXPR");

	WRITE_OID_FIELD(opno);
	WRITE_OID_FIELD(opfuncid);
	WRITE_OID_FIELD(opresulttype);
	WRITE_BOOL_FIELD(opretset);
	WRITE_NODE_FIELD(args);
	WRITE_LOCATION_FIELD(location);
}
</source>
</clone>

<clone nlines="9" similarity="55">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="879" endline="890" pcid="105">
static void
_outOpExpr(StringInfo str, OpExpr *node)
{
	WRITE_NODE_TYPE("OPEXPR");

	WRITE_OID_FIELD(opno);
	WRITE_OID_FIELD(opfuncid);
	WRITE_OID_FIELD(opresulttype);
	WRITE_BOOL_FIELD(opretset);
	WRITE_NODE_FIELD(args);
	WRITE_LOCATION_FIELD(location);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="905" endline="915" pcid="107">
static void
_outScalarArrayOpExpr(StringInfo str, ScalarArrayOpExpr *node)
{
	WRITE_NODE_TYPE("SCALARARRAYOPEXPR");

	WRITE_OID_FIELD(opno);
	WRITE_OID_FIELD(opfuncid);
	WRITE_BOOL_FIELD(useOr);
	WRITE_NODE_FIELD(args);
	WRITE_LOCATION_FIELD(location);
}
</source>
</clone>

<clone nlines="9" similarity="55">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1159" endline="1170" pcid="127">
static void
_outNullIfExpr(StringInfo str, NullIfExpr *node)
{
	WRITE_NODE_TYPE("NULLIFEXPR");

	WRITE_OID_FIELD(opno);
	WRITE_OID_FIELD(opfuncid);
	WRITE_OID_FIELD(opresulttype);
	WRITE_BOOL_FIELD(opretset);
	WRITE_NODE_FIELD(args);
	WRITE_LOCATION_FIELD(location);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="905" endline="915" pcid="107">
static void
_outScalarArrayOpExpr(StringInfo str, ScalarArrayOpExpr *node)
{
	WRITE_NODE_TYPE("SCALARARRAYOPEXPR");

	WRITE_OID_FIELD(opno);
	WRITE_OID_FIELD(opfuncid);
	WRITE_BOOL_FIELD(useOr);
	WRITE_NODE_FIELD(args);
	WRITE_LOCATION_FIELD(location);
}
</source>
</clone>

<clone nlines="9" similarity="55">
<source file="examples2/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="301" endline="314" pcid="216">
void
pq_sendfloat4(StringInfo buf, float4 f)
{
	union
	{
		float4		f;
		uint32		i;
	}			swap;

	swap.f = f;
	swap.i = htonl(swap.i);

	appendBinaryStringInfo(buf, (char *) &swap.i, 4);
}
</source>
<source file="examples2/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="545" endline="556" pcid="226">
float4
pq_getmsgfloat4(StringInfo msg)
{
	union
	{
		float4		f;
		uint32		i;
	}			swap;

	swap.i = pq_getmsgint(msg, 4);
	return swap.f;
}
</source>
</clone>

<clone nlines="9" similarity="55">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="696" endline="708" pcid="259">
static RelabelType *
_readRelabelType(void)
{
	READ_LOCALS(RelabelType);

	READ_NODE_FIELD(arg);
	READ_OID_FIELD(resulttype);
	READ_INT_FIELD(resulttypmod);
	READ_ENUM_FIELD(relabelformat, CoercionForm);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="748" endline="759" pcid="262">
static ConvertRowtypeExpr *
_readConvertRowtypeExpr(void)
{
	READ_LOCALS(ConvertRowtypeExpr);

	READ_NODE_FIELD(arg);
	READ_OID_FIELD(resulttype);
	READ_ENUM_FIELD(convertformat, CoercionForm);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
</clone>

<clone nlines="9" similarity="55">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="696" endline="708" pcid="259">
static RelabelType *
_readRelabelType(void)
{
	READ_LOCALS(RelabelType);

	READ_NODE_FIELD(arg);
	READ_OID_FIELD(resulttype);
	READ_INT_FIELD(resulttypmod);
	READ_ENUM_FIELD(relabelformat, CoercionForm);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="664" endline="675" pcid="257">
static FieldSelect *
_readFieldSelect(void)
{
	READ_LOCALS(FieldSelect);

	READ_NODE_FIELD(arg);
	READ_INT_FIELD(fieldnum);
	READ_OID_FIELD(resulttype);
	READ_INT_FIELD(resulttypmod);

	READ_DONE();
}
</source>
</clone>

<clone nlines="9" similarity="55">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="696" endline="708" pcid="259">
static RelabelType *
_readRelabelType(void)
{
	READ_LOCALS(RelabelType);

	READ_NODE_FIELD(arg);
	READ_OID_FIELD(resulttype);
	READ_INT_FIELD(resulttypmod);
	READ_ENUM_FIELD(relabelformat, CoercionForm);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="713" endline="724" pcid="260">
static CoerceViaIO *
_readCoerceViaIO(void)
{
	READ_LOCALS(CoerceViaIO);

	READ_NODE_FIELD(arg);
	READ_OID_FIELD(resulttype);
	READ_ENUM_FIELD(coerceformat, CoercionForm);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
</clone>

<clone nlines="8" similarity="50">
<source file="examples2/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="603" endline="615" pcid="228">
const char *
pq_getmsgbytes(StringInfo msg, int datalen)
{
	const char *result;

	if (datalen < 0 || datalen > (msg->len - msg->cursor))
		ereport(ERROR,
				(errcode(ERRCODE_PROTOCOL_VIOLATION),
				 errmsg("insufficient data left in message")));
	result = &msg->data[msg->cursor];
	msg->cursor += datalen;
	return result;
}
</source>
<source file="examples2/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="623" endline="632" pcid="229">
void
pq_copymsgbytes(StringInfo msg, char *buf, int datalen)
{
	if (datalen < 0 || datalen > (msg->len - msg->cursor))
		ereport(ERROR,
				(errcode(ERRCODE_PROTOCOL_VIOLATION),
				 errmsg("insufficient data left in message")));
	memcpy(buf, &msg->data[msg->cursor], datalen);
	msg->cursor += datalen;
}
</source>
</clone>

<clone nlines="8" similarity="50">
<source file="examples2/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="564" endline="594" pcid="227">
float8
pq_getmsgfloat8(StringInfo msg)
{
//#ifdef INT64_IS_BUSTED
//	union
//	{
//		float8		f;
//		uint32		h[2];
//	}			swap;
//
//#ifdef WORDS_BIGENDIAN
//	/* machine seems to be big-endian, receive h[0] first */
//	swap.h[0] = pq_getmsgint(msg, 4);
//	swap.h[1] = pq_getmsgint(msg, 4);
//#else
//	/* machine seems to be little-endian, receive h[1] first */
//	swap.h[1] = pq_getmsgint(msg, 4);
//	swap.h[0] = pq_getmsgint(msg, 4);
//#endif
//	return swap.f;
//#else							/* INT64 works */
	union
	{
		float8		f;
		int64		i;
	}			swap;

	swap.i = pq_getmsgint64(msg);
	return swap.f;
//#endif
}
</source>
<source file="examples2/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="545" endline="556" pcid="226">
float4
pq_getmsgfloat4(StringInfo msg)
{
	union
	{
		float4		f;
		uint32		i;
	}			swap;

	swap.i = pq_getmsgint(msg, 4);
	return swap.f;
}
</source>
</clone>

<clone nlines="8" similarity="62">
<source file="examples2/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="564" endline="594" pcid="227">
float8
pq_getmsgfloat8(StringInfo msg)
{
//#ifdef INT64_IS_BUSTED
//	union
//	{
//		float8		f;
//		uint32		h[2];
//	}			swap;
//
//#ifdef WORDS_BIGENDIAN
//	/* machine seems to be big-endian, receive h[0] first */
//	swap.h[0] = pq_getmsgint(msg, 4);
//	swap.h[1] = pq_getmsgint(msg, 4);
//#else
//	/* machine seems to be little-endian, receive h[1] first */
//	swap.h[1] = pq_getmsgint(msg, 4);
//	swap.h[0] = pq_getmsgint(msg, 4);
//#endif
//	return swap.f;
//#else							/* INT64 works */
	union
	{
		float8		f;
		int64		i;
	}			swap;

	swap.i = pq_getmsgint64(msg);
	return swap.f;
//#endif
}
</source>
<source file="examples2/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="327" endline="360" pcid="217">
void
pq_sendfloat8(StringInfo buf, float8 f)
{
//#ifdef INT64_IS_BUSTED
//	union
//	{
//		float8		f;
//		uint32		h[2];
//	}			swap;
//
//	swap.f = f;
//	swap.h[0] = htonl(swap.h[0]);
//	swap.h[1] = htonl(swap.h[1]);
//
//#ifdef WORDS_BIGENDIAN
//	/* machine seems to be big-endian, send h[0] first */
//	appendBinaryStringInfo(buf, (char *) &swap.h[0], 4);
//	appendBinaryStringInfo(buf, (char *) &swap.h[1], 4);
//#else
//	/* machine seems to be little-endian, send h[1] first */
//	appendBinaryStringInfo(buf, (char *) &swap.h[1], 4);
//	appendBinaryStringInfo(buf, (char *) &swap.h[0], 4);
//#endif
//#else							/* INT64 works */
	union
	{
		float8		f;
		int64		i;
	}			swap;

	swap.f = f;
	pq_sendint64(buf, swap.i);
//#endif
}
</source>
</clone>

<clone nlines="8" similarity="50">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="748" endline="759" pcid="262">
static ConvertRowtypeExpr *
_readConvertRowtypeExpr(void)
{
	READ_LOCALS(ConvertRowtypeExpr);

	READ_NODE_FIELD(arg);
	READ_OID_FIELD(resulttype);
	READ_ENUM_FIELD(convertformat, CoercionForm);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="664" endline="675" pcid="257">
static FieldSelect *
_readFieldSelect(void)
{
	READ_LOCALS(FieldSelect);

	READ_NODE_FIELD(arg);
	READ_INT_FIELD(fieldnum);
	READ_OID_FIELD(resulttype);
	READ_INT_FIELD(resulttypmod);

	READ_DONE();
}
</source>
</clone>

<clone nlines="8" similarity="50">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="748" endline="759" pcid="262">
static ConvertRowtypeExpr *
_readConvertRowtypeExpr(void)
{
	READ_LOCALS(ConvertRowtypeExpr);

	READ_NODE_FIELD(arg);
	READ_OID_FIELD(resulttype);
	READ_ENUM_FIELD(convertformat, CoercionForm);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="680" endline="691" pcid="258">
static FieldStore *
_readFieldStore(void)
{
	READ_LOCALS(FieldStore);

	READ_NODE_FIELD(arg);
	READ_NODE_FIELD(newvals);
	READ_NODE_FIELD(fieldnums);
	READ_OID_FIELD(resulttype);

	READ_DONE();
}
</source>
</clone>

<clone nlines="8" similarity="62">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="748" endline="759" pcid="262">
static ConvertRowtypeExpr *
_readConvertRowtypeExpr(void)
{
	READ_LOCALS(ConvertRowtypeExpr);

	READ_NODE_FIELD(arg);
	READ_OID_FIELD(resulttype);
	READ_ENUM_FIELD(convertformat, CoercionForm);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="713" endline="724" pcid="260">
static CoerceViaIO *
_readCoerceViaIO(void)
{
	READ_LOCALS(CoerceViaIO);

	READ_NODE_FIELD(arg);
	READ_OID_FIELD(resulttype);
	READ_ENUM_FIELD(coerceformat, CoercionForm);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
</clone>

<clone nlines="8" similarity="62">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="234" endline="245" pcid="10">
ListCell *
lappend_cell_oid(List *list, ListCell *prev, Oid datum)
{
	ListCell   *new_cell;

	Assert(IsOidList(list));

	new_cell = add_new_cell(list, prev);
	lfirst_oid(new_cell) = datum;
	check_list_invariants(list);
	return new_cell;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="221" endline="232" pcid="9">
ListCell *
lappend_cell_int(List *list, ListCell *prev, int datum)
{
	ListCell   *new_cell;

	Assert(IsIntegerList(list));

	new_cell = add_new_cell(list, prev);
	lfirst_int(new_cell) = datum;
	check_list_invariants(list);
	return new_cell;
}
</source>
</clone>

<clone nlines="8" similarity="62">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="234" endline="245" pcid="10">
ListCell *
lappend_cell_oid(List *list, ListCell *prev, Oid datum)
{
	ListCell   *new_cell;

	Assert(IsOidList(list));

	new_cell = add_new_cell(list, prev);
	lfirst_oid(new_cell) = datum;
	check_list_invariants(list);
	return new_cell;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="208" endline="219" pcid="8">
ListCell *
lappend_cell(List *list, ListCell *prev, void *datum)
{
	ListCell   *new_cell;

	Assert(IsPointerList(list));

	new_cell = add_new_cell(list, prev);
	lfirst(new_cell) = datum;
	check_list_invariants(list);
	return new_cell;
}
</source>
</clone>

<clone nlines="8" similarity="62">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="221" endline="232" pcid="9">
ListCell *
lappend_cell_int(List *list, ListCell *prev, int datum)
{
	ListCell   *new_cell;

	Assert(IsIntegerList(list));

	new_cell = add_new_cell(list, prev);
	lfirst_int(new_cell) = datum;
	check_list_invariants(list);
	return new_cell;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="208" endline="219" pcid="8">
ListCell *
lappend_cell(List *list, ListCell *prev, void *datum)
{
	ListCell   *new_cell;

	Assert(IsPointerList(list));

	new_cell = add_new_cell(list, prev);
	lfirst(new_cell) = datum;
	check_list_invariants(list);
	return new_cell;
}
</source>
</clone>

<clone nlines="8" similarity="62">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="392" endline="403" pcid="72">
static void
_outIndexScan(StringInfo str, IndexScan *node)
{
	WRITE_NODE_TYPE("INDEXSCAN");

	_outScanInfo(str, (Scan *) node);

	WRITE_OID_FIELD(indexid);
	WRITE_NODE_FIELD(indexqual);
	WRITE_NODE_FIELD(indexqualorig);
	WRITE_ENUM_FIELD(indexorderdir, ScanDirection);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="405" endline="415" pcid="73">
static void
_outBitmapIndexScan(StringInfo str, BitmapIndexScan *node)
{
	WRITE_NODE_TYPE("BITMAPINDEXSCAN");

	_outScanInfo(str, (Scan *) node);

	WRITE_OID_FIELD(indexid);
	WRITE_NODE_FIELD(indexqual);
	WRITE_NODE_FIELD(indexqualorig);
}
</source>
</clone>

<clone nlines="8" similarity="62">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1190" endline="1200" pcid="130">
static void
_outCoerceToDomain(StringInfo str, CoerceToDomain *node)
{
	WRITE_NODE_TYPE("COERCETODOMAIN");

	WRITE_NODE_FIELD(arg);
	WRITE_OID_FIELD(resulttype);
	WRITE_INT_FIELD(resulttypmod);
	WRITE_ENUM_FIELD(coercionformat, CoercionForm);
	WRITE_LOCATION_FIELD(location);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1007" endline="1017" pcid="114">
static void
_outRelabelType(StringInfo str, RelabelType *node)
{
	WRITE_NODE_TYPE("RELABELTYPE");

	WRITE_NODE_FIELD(arg);
	WRITE_OID_FIELD(resulttype);
	WRITE_INT_FIELD(resulttypmod);
	WRITE_ENUM_FIELD(relabelformat, CoercionForm);
	WRITE_LOCATION_FIELD(location);
}
</source>
</clone>

<clone nlines="8" similarity="50">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1190" endline="1200" pcid="130">
static void
_outCoerceToDomain(StringInfo str, CoerceToDomain *node)
{
	WRITE_NODE_TYPE("COERCETODOMAIN");

	WRITE_NODE_FIELD(arg);
	WRITE_OID_FIELD(resulttype);
	WRITE_INT_FIELD(resulttypmod);
	WRITE_ENUM_FIELD(coercionformat, CoercionForm);
	WRITE_LOCATION_FIELD(location);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1044" endline="1053" pcid="117">
static void
_outConvertRowtypeExpr(StringInfo str, ConvertRowtypeExpr *node)
{
	WRITE_NODE_TYPE("CONVERTROWTYPEEXPR");

	WRITE_NODE_FIELD(arg);
	WRITE_OID_FIELD(resulttype);
	WRITE_ENUM_FIELD(convertformat, CoercionForm);
	WRITE_LOCATION_FIELD(location);
}
</source>
</clone>

<clone nlines="8" similarity="50">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1190" endline="1200" pcid="130">
static void
_outCoerceToDomain(StringInfo str, CoerceToDomain *node)
{
	WRITE_NODE_TYPE("COERCETODOMAIN");

	WRITE_NODE_FIELD(arg);
	WRITE_OID_FIELD(resulttype);
	WRITE_INT_FIELD(resulttypmod);
	WRITE_ENUM_FIELD(coercionformat, CoercionForm);
	WRITE_LOCATION_FIELD(location);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="985" endline="994" pcid="112">
static void
_outFieldSelect(StringInfo str, FieldSelect *node)
{
	WRITE_NODE_TYPE("FIELDSELECT");

	WRITE_NODE_FIELD(arg);
	WRITE_INT_FIELD(fieldnum);
	WRITE_OID_FIELD(resulttype);
	WRITE_INT_FIELD(resulttypmod);
}
</source>
</clone>

<clone nlines="8" similarity="50">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1190" endline="1200" pcid="130">
static void
_outCoerceToDomain(StringInfo str, CoerceToDomain *node)
{
	WRITE_NODE_TYPE("COERCETODOMAIN");

	WRITE_NODE_FIELD(arg);
	WRITE_OID_FIELD(resulttype);
	WRITE_INT_FIELD(resulttypmod);
	WRITE_ENUM_FIELD(coercionformat, CoercionForm);
	WRITE_LOCATION_FIELD(location);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1019" endline="1028" pcid="115">
static void
_outCoerceViaIO(StringInfo str, CoerceViaIO *node)
{
	WRITE_NODE_TYPE("COERCEVIAIO");

	WRITE_NODE_FIELD(arg);
	WRITE_OID_FIELD(resulttype);
	WRITE_ENUM_FIELD(coerceformat, CoercionForm);
	WRITE_LOCATION_FIELD(location);
}
</source>
</clone>

<clone nlines="8" similarity="50">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="664" endline="675" pcid="257">
static FieldSelect *
_readFieldSelect(void)
{
	READ_LOCALS(FieldSelect);

	READ_NODE_FIELD(arg);
	READ_INT_FIELD(fieldnum);
	READ_OID_FIELD(resulttype);
	READ_INT_FIELD(resulttypmod);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="680" endline="691" pcid="258">
static FieldStore *
_readFieldStore(void)
{
	READ_LOCALS(FieldStore);

	READ_NODE_FIELD(arg);
	READ_NODE_FIELD(newvals);
	READ_NODE_FIELD(fieldnums);
	READ_OID_FIELD(resulttype);

	READ_DONE();
}
</source>
</clone>

<clone nlines="8" similarity="50">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="664" endline="675" pcid="257">
static FieldSelect *
_readFieldSelect(void)
{
	READ_LOCALS(FieldSelect);

	READ_NODE_FIELD(arg);
	READ_INT_FIELD(fieldnum);
	READ_OID_FIELD(resulttype);
	READ_INT_FIELD(resulttypmod);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="713" endline="724" pcid="260">
static CoerceViaIO *
_readCoerceViaIO(void)
{
	READ_LOCALS(CoerceViaIO);

	READ_NODE_FIELD(arg);
	READ_OID_FIELD(resulttype);
	READ_ENUM_FIELD(coerceformat, CoercionForm);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
</clone>

<clone nlines="8" similarity="50">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="876" endline="887" pcid="270">
static MinMaxExpr *
_readMinMaxExpr(void)
{
	READ_LOCALS(MinMaxExpr);

	READ_OID_FIELD(minmaxtype);
	READ_ENUM_FIELD(op, MinMaxOp);
	READ_NODE_FIELD(args);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="861" endline="871" pcid="269">
static CoalesceExpr *
_readCoalesceExpr(void)
{
	READ_LOCALS(CoalesceExpr);

	READ_OID_FIELD(coalescetype);
	READ_NODE_FIELD(args);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
</clone>

<clone nlines="8" similarity="50">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1007" endline="1017" pcid="114">
static void
_outRelabelType(StringInfo str, RelabelType *node)
{
	WRITE_NODE_TYPE("RELABELTYPE");

	WRITE_NODE_FIELD(arg);
	WRITE_OID_FIELD(resulttype);
	WRITE_INT_FIELD(resulttypmod);
	WRITE_ENUM_FIELD(relabelformat, CoercionForm);
	WRITE_LOCATION_FIELD(location);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1044" endline="1053" pcid="117">
static void
_outConvertRowtypeExpr(StringInfo str, ConvertRowtypeExpr *node)
{
	WRITE_NODE_TYPE("CONVERTROWTYPEEXPR");

	WRITE_NODE_FIELD(arg);
	WRITE_OID_FIELD(resulttype);
	WRITE_ENUM_FIELD(convertformat, CoercionForm);
	WRITE_LOCATION_FIELD(location);
}
</source>
</clone>

<clone nlines="8" similarity="50">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1007" endline="1017" pcid="114">
static void
_outRelabelType(StringInfo str, RelabelType *node)
{
	WRITE_NODE_TYPE("RELABELTYPE");

	WRITE_NODE_FIELD(arg);
	WRITE_OID_FIELD(resulttype);
	WRITE_INT_FIELD(resulttypmod);
	WRITE_ENUM_FIELD(relabelformat, CoercionForm);
	WRITE_LOCATION_FIELD(location);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="985" endline="994" pcid="112">
static void
_outFieldSelect(StringInfo str, FieldSelect *node)
{
	WRITE_NODE_TYPE("FIELDSELECT");

	WRITE_NODE_FIELD(arg);
	WRITE_INT_FIELD(fieldnum);
	WRITE_OID_FIELD(resulttype);
	WRITE_INT_FIELD(resulttypmod);
}
</source>
</clone>

<clone nlines="8" similarity="50">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1007" endline="1017" pcid="114">
static void
_outRelabelType(StringInfo str, RelabelType *node)
{
	WRITE_NODE_TYPE("RELABELTYPE");

	WRITE_NODE_FIELD(arg);
	WRITE_OID_FIELD(resulttype);
	WRITE_INT_FIELD(resulttypmod);
	WRITE_ENUM_FIELD(relabelformat, CoercionForm);
	WRITE_LOCATION_FIELD(location);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1019" endline="1028" pcid="115">
static void
_outCoerceViaIO(StringInfo str, CoerceViaIO *node)
{
	WRITE_NODE_TYPE("COERCEVIAIO");

	WRITE_NODE_FIELD(arg);
	WRITE_OID_FIELD(resulttype);
	WRITE_ENUM_FIELD(coerceformat, CoercionForm);
	WRITE_LOCATION_FIELD(location);
}
</source>
</clone>

<clone nlines="8" similarity="50">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="680" endline="691" pcid="258">
static FieldStore *
_readFieldStore(void)
{
	READ_LOCALS(FieldStore);

	READ_NODE_FIELD(arg);
	READ_NODE_FIELD(newvals);
	READ_NODE_FIELD(fieldnums);
	READ_OID_FIELD(resulttype);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="713" endline="724" pcid="260">
static CoerceViaIO *
_readCoerceViaIO(void)
{
	READ_LOCALS(CoerceViaIO);

	READ_NODE_FIELD(arg);
	READ_OID_FIELD(resulttype);
	READ_ENUM_FIELD(coerceformat, CoercionForm);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
</clone>

<clone nlines="7" similarity="57">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1044" endline="1053" pcid="117">
static void
_outConvertRowtypeExpr(StringInfo str, ConvertRowtypeExpr *node)
{
	WRITE_NODE_TYPE("CONVERTROWTYPEEXPR");

	WRITE_NODE_FIELD(arg);
	WRITE_OID_FIELD(resulttype);
	WRITE_ENUM_FIELD(convertformat, CoercionForm);
	WRITE_LOCATION_FIELD(location);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1019" endline="1028" pcid="115">
static void
_outCoerceViaIO(StringInfo str, CoerceViaIO *node)
{
	WRITE_NODE_TYPE("COERCEVIAIO");

	WRITE_NODE_FIELD(arg);
	WRITE_OID_FIELD(resulttype);
	WRITE_ENUM_FIELD(coerceformat, CoercionForm);
	WRITE_LOCATION_FIELD(location);
}
</source>
</clone>

<clone nlines="7" similarity="71">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="1002" endline="1012" pcid="277">
static SetToDefault *
_readSetToDefault(void)
{
	READ_LOCALS(SetToDefault);

	READ_OID_FIELD(typeId);
	READ_INT_FIELD(typeMod);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="987" endline="997" pcid="276">
static CoerceToDomainValue *
_readCoerceToDomainValue(void)
{
	READ_LOCALS(CoerceToDomainValue);

	READ_OID_FIELD(typeId);
	READ_INT_FIELD(typeMod);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
</clone>

<clone nlines="7" similarity="57">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="1002" endline="1012" pcid="277">
static SetToDefault *
_readSetToDefault(void)
{
	READ_LOCALS(SetToDefault);

	READ_OID_FIELD(typeId);
	READ_INT_FIELD(typeMod);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="796" endline="805" pcid="265">
static CaseTestExpr *
_readCaseTestExpr(void)
{
	READ_LOCALS(CaseTestExpr);

	READ_OID_FIELD(typeId);
	READ_INT_FIELD(typeMod);

	READ_DONE();
}
</source>
</clone>

<clone nlines="7" similarity="57">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="987" endline="997" pcid="276">
static CoerceToDomainValue *
_readCoerceToDomainValue(void)
{
	READ_LOCALS(CoerceToDomainValue);

	READ_OID_FIELD(typeId);
	READ_INT_FIELD(typeMod);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="796" endline="805" pcid="265">
static CaseTestExpr *
_readCaseTestExpr(void)
{
	READ_LOCALS(CaseTestExpr);

	READ_OID_FIELD(typeId);
	READ_INT_FIELD(typeMod);

	READ_DONE();
}
</source>
</clone>

<clone nlines="6" similarity="66">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="935" endline="942" pcid="39">
List *
list_append_unique(List *list, void *datum)
{
	if (list_member(list, datum))
		return list;
	else
		return lappend(list, datum);
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="948" endline="955" pcid="40">
List *
list_append_unique_ptr(List *list, void *datum)
{
	if (list_member_ptr(list, datum))
		return list;
	else
		return lappend(list, datum);
}
</source>
</clone>

<clone nlines="6" similarity="50">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="935" endline="942" pcid="39">
List *
list_append_unique(List *list, void *datum)
{
	if (list_member(list, datum))
		return list;
	else
		return lappend(list, datum);
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="960" endline="967" pcid="41">
List *
list_append_unique_int(List *list, int datum)
{
	if (list_member_int(list, datum))
		return list;
	else
		return lappend_int(list, datum);
}
</source>
</clone>

<clone nlines="6" similarity="50">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="935" endline="942" pcid="39">
List *
list_append_unique(List *list, void *datum)
{
	if (list_member(list, datum))
		return list;
	else
		return lappend(list, datum);
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="972" endline="979" pcid="42">
List *
list_append_unique_oid(List *list, Oid datum)
{
	if (list_member_oid(list, datum))
		return list;
	else
		return lappend_oid(list, datum);
}
</source>
</clone>

<clone nlines="6" similarity="50">
<source file="examples2/postgresql//smallpostgresql/value.c.ifdefed" startline="22" endline="30" pcid="286">
Value *
makeInteger(long i)
{
	Value	   *v = makeNode(Value);

	v->type = T_Integer;
	v->val.ival = i;
	return v;
}
</source>
<source file="examples2/postgresql//smallpostgresql/value.c.ifdefed" startline="37" endline="45" pcid="287">
Value *
makeFloat(char *numericStr)
{
	Value	   *v = makeNode(Value);

	v->type = T_Float;
	v->val.str = numericStr;
	return v;
}
</source>
</clone>

<clone nlines="6" similarity="50">
<source file="examples2/postgresql//smallpostgresql/value.c.ifdefed" startline="22" endline="30" pcid="286">
Value *
makeInteger(long i)
{
	Value	   *v = makeNode(Value);

	v->type = T_Integer;
	v->val.ival = i;
	return v;
}
</source>
<source file="examples2/postgresql//smallpostgresql/value.c.ifdefed" startline="52" endline="60" pcid="288">
Value *
makeString(char *str)
{
	Value	   *v = makeNode(Value);

	v->type = T_String;
	v->val.str = str;
	return v;
}
</source>
</clone>

<clone nlines="6" similarity="50">
<source file="examples2/postgresql//smallpostgresql/value.c.ifdefed" startline="22" endline="30" pcid="286">
Value *
makeInteger(long i)
{
	Value	   *v = makeNode(Value);

	v->type = T_Integer;
	v->val.ival = i;
	return v;
}
</source>
<source file="examples2/postgresql//smallpostgresql/value.c.ifdefed" startline="67" endline="75" pcid="289">
Value *
makeBitString(char *str)
{
	Value	   *v = makeNode(Value);

	v->type = T_BitString;
	v->val.str = str;
	return v;
}
</source>
</clone>

<clone nlines="6" similarity="50">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="948" endline="955" pcid="40">
List *
list_append_unique_ptr(List *list, void *datum)
{
	if (list_member_ptr(list, datum))
		return list;
	else
		return lappend(list, datum);
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="960" endline="967" pcid="41">
List *
list_append_unique_int(List *list, int datum)
{
	if (list_member_int(list, datum))
		return list;
	else
		return lappend_int(list, datum);
}
</source>
</clone>

<clone nlines="6" similarity="50">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="948" endline="955" pcid="40">
List *
list_append_unique_ptr(List *list, void *datum)
{
	if (list_member_ptr(list, datum))
		return list;
	else
		return lappend(list, datum);
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="972" endline="979" pcid="42">
List *
list_append_unique_oid(List *list, Oid datum)
{
	if (list_member_oid(list, datum))
		return list;
	else
		return lappend_oid(list, datum);
}
</source>
</clone>

<clone nlines="6" similarity="50">
<source file="examples2/postgresql//smallpostgresql/value.c.ifdefed" startline="37" endline="45" pcid="287">
Value *
makeFloat(char *numericStr)
{
	Value	   *v = makeNode(Value);

	v->type = T_Float;
	v->val.str = numericStr;
	return v;
}
</source>
<source file="examples2/postgresql//smallpostgresql/value.c.ifdefed" startline="52" endline="60" pcid="288">
Value *
makeString(char *str)
{
	Value	   *v = makeNode(Value);

	v->type = T_String;
	v->val.str = str;
	return v;
}
</source>
</clone>

<clone nlines="6" similarity="50">
<source file="examples2/postgresql//smallpostgresql/value.c.ifdefed" startline="37" endline="45" pcid="287">
Value *
makeFloat(char *numericStr)
{
	Value	   *v = makeNode(Value);

	v->type = T_Float;
	v->val.str = numericStr;
	return v;
}
</source>
<source file="examples2/postgresql//smallpostgresql/value.c.ifdefed" startline="67" endline="75" pcid="289">
Value *
makeBitString(char *str)
{
	Value	   *v = makeNode(Value);

	v->type = T_BitString;
	v->val.str = str;
	return v;
}
</source>
</clone>

<clone nlines="6" similarity="50">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="960" endline="967" pcid="41">
List *
list_append_unique_int(List *list, int datum)
{
	if (list_member_int(list, datum))
		return list;
	else
		return lappend_int(list, datum);
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="972" endline="979" pcid="42">
List *
list_append_unique_oid(List *list, Oid datum)
{
	if (list_member_oid(list, datum))
		return list;
	else
		return lappend_oid(list, datum);
}
</source>
</clone>

<clone nlines="6" similarity="66">
<source file="examples2/postgresql//smallpostgresql/value.c.ifdefed" startline="52" endline="60" pcid="288">
Value *
makeString(char *str)
{
	Value	   *v = makeNode(Value);

	v->type = T_String;
	v->val.str = str;
	return v;
}
</source>
<source file="examples2/postgresql//smallpostgresql/value.c.ifdefed" startline="67" endline="75" pcid="289">
Value *
makeBitString(char *str)
{
	Value	   *v = makeNode(Value);

	v->type = T_BitString;
	v->val.str = str;
	return v;
}
</source>
</clone>

<clone nlines="6" similarity="66">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1202" endline="1210" pcid="131">
static void
_outCoerceToDomainValue(StringInfo str, CoerceToDomainValue *node)
{
	WRITE_NODE_TYPE("COERCETODOMAINVALUE");

	WRITE_OID_FIELD(typeId);
	WRITE_INT_FIELD(typeMod);
	WRITE_LOCATION_FIELD(location);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1212" endline="1220" pcid="132">
static void
_outSetToDefault(StringInfo str, SetToDefault *node)
{
	WRITE_NODE_TYPE("SETTODEFAULT");

	WRITE_OID_FIELD(typeId);
	WRITE_INT_FIELD(typeMod);
	WRITE_LOCATION_FIELD(location);
}
</source>
</clone>

<clone nlines="6" similarity="50">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1202" endline="1210" pcid="131">
static void
_outCoerceToDomainValue(StringInfo str, CoerceToDomainValue *node)
{
	WRITE_NODE_TYPE("COERCETODOMAINVALUE");

	WRITE_OID_FIELD(typeId);
	WRITE_INT_FIELD(typeMod);
	WRITE_LOCATION_FIELD(location);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1077" endline="1084" pcid="120">
static void
_outCaseTestExpr(StringInfo str, CaseTestExpr *node)
{
	WRITE_NODE_TYPE("CASETESTEXPR");

	WRITE_OID_FIELD(typeId);
	WRITE_INT_FIELD(typeMod);
}
</source>
</clone>

<clone nlines="6" similarity="50">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1212" endline="1220" pcid="132">
static void
_outSetToDefault(StringInfo str, SetToDefault *node)
{
	WRITE_NODE_TYPE("SETTODEFAULT");

	WRITE_OID_FIELD(typeId);
	WRITE_INT_FIELD(typeMod);
	WRITE_LOCATION_FIELD(location);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1077" endline="1084" pcid="120">
static void
_outCaseTestExpr(StringInfo str, CaseTestExpr *node)
{
	WRITE_NODE_TYPE("CASETESTEXPR");

	WRITE_OID_FIELD(typeId);
	WRITE_INT_FIELD(typeMod);
}
</source>
</clone>

<clone nlines="6" similarity="50">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="956" endline="965" pcid="274">
static BooleanTest *
_readBooleanTest(void)
{
	READ_LOCALS(BooleanTest);

	READ_NODE_FIELD(arg);
	READ_ENUM_FIELD(booltesttype, BoolTestType);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="942" endline="951" pcid="273">
static NullTest *
_readNullTest(void)
{
	READ_LOCALS(NullTest);

	READ_NODE_FIELD(arg);
	READ_ENUM_FIELD(nulltesttype, NullTestType);

	READ_DONE();
}
</source>
</clone>

<clone nlines="6" similarity="66">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1360" endline="1369" pcid="144">
static void
_outBitmapOrPath(StringInfo str, BitmapOrPath *node)
{
	WRITE_NODE_TYPE("BITMAPORPATH");

	_outPathInfo(str, (Path *) node);

	WRITE_NODE_FIELD(bitmapquals);
	WRITE_FLOAT_FIELD(bitmapselectivity, "%.4f");
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1349" endline="1358" pcid="143">
static void
_outBitmapAndPath(StringInfo str, BitmapAndPath *node)
{
	WRITE_NODE_TYPE("BITMAPANDPATH");

	_outPathInfo(str, (Path *) node);

	WRITE_NODE_FIELD(bitmapquals);
	WRITE_FLOAT_FIELD(bitmapselectivity, "%.4f");
}
</source>
</clone>

<clone nlines="5" similarity="60">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="356" endline="364" pcid="68">
static void
_outBitmapAnd(StringInfo str, BitmapAnd *node)
{
	WRITE_NODE_TYPE("BITMAPAND");

	_outPlanInfo(str, (Plan *) node);

	WRITE_NODE_FIELD(bitmapplans);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="366" endline="374" pcid="69">
static void
_outBitmapOr(StringInfo str, BitmapOr *node)
{
	WRITE_NODE_TYPE("BITMAPOR");

	_outPlanInfo(str, (Plan *) node);

	WRITE_NODE_FIELD(bitmapplans);
}
</source>
</clone>

<clone nlines="4" similarity="50">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="409" endline="414" pcid="17">
void *
list_nth(List *list, int n)
{
	Assert(IsPointerList(list));
	return lfirst(list_nth_cell(list, n));
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="1120" endline="1128" pcid="49">
void
list_free_deep(List *list)
{
	/*
	 * A "deep" free operation only makes sense on a list of pointers.
	 */
	Assert(IsPointerList(list));
	list_free_private(list, true);
}
</source>
</clone>

<clone nlines="4" similarity="50">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="304" endline="310" pcid="64">
static void
_outPlan(StringInfo str, Plan *node)
{
	WRITE_NODE_TYPE("PLAN");

	_outPlanInfo(str, (Plan *) node);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="283" endline="289" pcid="62">
static void
_outScanInfo(StringInfo str, Scan *node)
{
	_outPlanInfo(str, (Plan *) node);

	WRITE_UINT_FIELD(scanrelid);
}
</source>
</clone>

<clone nlines="4" similarity="50">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="304" endline="310" pcid="64">
static void
_outPlan(StringInfo str, Plan *node)
{
	WRITE_NODE_TYPE("PLAN");

	_outPlanInfo(str, (Plan *) node);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="621" endline="627" pcid="88">
static void
_outMaterial(StringInfo str, Material *node)
{
	WRITE_NODE_TYPE("MATERIAL");

	_outPlanInfo(str, (Plan *) node);
}
</source>
</clone>

<clone nlines="4" similarity="50">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="283" endline="289" pcid="62">
static void
_outScanInfo(StringInfo str, Scan *node)
{
	_outPlanInfo(str, (Plan *) node);

	WRITE_UINT_FIELD(scanrelid);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="621" endline="627" pcid="88">
static void
_outMaterial(StringInfo str, Material *node)
{
	WRITE_NODE_TYPE("MATERIAL");

	_outPlanInfo(str, (Plan *) node);
}
</source>
</clone>

<clone nlines="4" similarity="50">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="376" endline="382" pcid="70">
static void
_outScan(StringInfo str, Scan *node)
{
	WRITE_NODE_TYPE("SCAN");

	_outScanInfo(str, (Scan *) node);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="384" endline="390" pcid="71">
static void
_outSeqScan(StringInfo str, SeqScan *node)
{
	WRITE_NODE_TYPE("SEQSCAN");

	_outScanInfo(str, (Scan *) node);
}
</source>
</clone>

<clone nlines="4" similarity="50">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="492" endline="498" pcid="81">
static void
_outJoin(StringInfo str, Join *node)
{
	WRITE_NODE_TYPE("JOIN");

	_outJoinPlanInfo(str, (Join *) node);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="500" endline="506" pcid="82">
static void
_outNestLoop(StringInfo str, NestLoop *node)
{
	WRITE_NODE_TYPE("NESTLOOP");

	_outJoinPlanInfo(str, (Join *) node);
}
</source>
</clone>

</clones>
