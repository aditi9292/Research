<clones>
<systeminfo processor="nicad3" system="apache" granularity="functions" threshold="40%" minlines="3" maxlines="2500"/>
<cloneinfo npcs="40" npairs="5"/>
<runinfo ncompares="261" cputime="5"/>
<classinfo nclasses="3"/>

<class classid="1" nclones="2" nlines="21" similarity="66">
<source file="examples2/apache/smallApache/mod_cache.c.ifdefed" startline="1120" endline="1148" pcid="23">
static const char *add_cache_enable(cmd_parms *parms, void *dummy,
                                    const char *type,
                                    const char *url)
{
    cache_server_conf *conf;
    struct cache_enable *new;

    if (*type == '/') {
        return apr_psprintf(parms->pool,
          "provider (%s) starts with a '/'.  Are url and provider switched?",
          type);
    }

    conf =
        (cache_server_conf *)ap_get_module_config(parms->server->module_config,
                                                  &cache_module);
    new = apr_array_push(conf->cacheenable);
    new->type = type;
    if (apr_uri_parse(parms->pool, url, &(new->url))) {
        return NULL;
    }
    if (new->url.path) {
        new->pathlen = strlen(new->url.path);
    } else {
        new->pathlen = 1;
        new->url.path = "/";
    }
    return NULL;
}
</source>
<source file="examples2/apache/smallApache/mod_cache.c.ifdefed" startline="1150" endline="1170" pcid="24">
static const char *add_cache_disable(cmd_parms *parms, void *dummy,
                                     const char *url)
{
    cache_server_conf *conf;
    struct cache_disable *new;

    conf =
        (cache_server_conf *)ap_get_module_config(parms->server->module_config,
                                                  &cache_module);
    new = apr_array_push(conf->cachedisable);
    if (apr_uri_parse(parms->pool, url, &(new->url))) {
        return NULL;
    }
    if (new->url.path) {
        new->pathlen = strlen(new->url.path);
    } else {
        new->pathlen = 1;
        new->url.path = "/";
    }
    return NULL;
}
</source>
</class>

<class classid="2" nclones="2" nlines="8" similarity="75">
<source file="examples2/apache/smallApache/http_core.c.ifdefed" startline="79" endline="89" pcid="3">
static const char *set_keep_alive_max(cmd_parms *cmd, void *dummy,
                                      const char *arg)
{
    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_LOC_FILE|NOT_IN_LIMIT);
    if (err != NULL) {
        return err;
    }

    cmd->server->keep_alive_max = atoi(arg);
    return NULL;
}
</source>
<source file="examples2/apache/smallApache/http_core.c.ifdefed" startline="47" endline="57" pcid="1">
static const char *set_keep_alive_timeout(cmd_parms *cmd, void *dummy,
                                          const char *arg)
{
    const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_LOC_FILE|NOT_IN_LIMIT);
    if (err != NULL) {
        return err;
    }

    cmd->server->keep_alive_timeout = apr_time_from_sec(atoi(arg));
    return NULL;
}
</source>
</class>

<class classid="3" nclones="3" nlines="3" similarity="66">
<source file="examples2/apache/smallApache/mod_file_cache.c.ifdefed" startline="293" endline="310" pcid="38">
static int sendfile_handler(request_rec *r, a_file *file)
{
//#if APR_HAS_SENDFILE
//    conn_rec *c = r->connection;
//    apr_bucket *b;
//    apr_bucket_brigade *bb = apr_brigade_create(r->pool, c->bucket_alloc);
//
//    b = apr_bucket_file_create(file->file, 0, (apr_size_t)file->finfo.size,
//                               r->pool, c->bucket_alloc);
//    APR_BRIGADE_INSERT_TAIL(bb, b);
//    b = apr_bucket_eos_create(c->bucket_alloc);
//    APR_BRIGADE_INSERT_TAIL(bb, b);
//
//    if (ap_pass_brigade(r->output_filters, bb) != APR_SUCCESS)
//        return HTTP_INTERNAL_SERVER_ERROR;
//#endif
    return OK;
}
</source>
<source file="examples2/apache/smallApache/mod_file_cache.c.ifdefed" startline="272" endline="291" pcid="37">
static int mmap_handler(request_rec *r, a_file *file)
{
//#if APR_HAS_MMAP
//    conn_rec *c = r->connection;
//    apr_bucket *b;
//    apr_mmap_t *mm;
//    apr_bucket_brigade *bb = apr_brigade_create(r->pool, c->bucket_alloc);
//
//    apr_mmap_dup(&mm, file->mm, r->pool);
//    b = apr_bucket_mmap_create(mm, 0, (apr_size_t)file->finfo.size,
//                               c->bucket_alloc);
//    APR_BRIGADE_INSERT_TAIL(bb, b);
//    b = apr_bucket_eos_create(c->bucket_alloc);
//    APR_BRIGADE_INSERT_TAIL(bb, b);
//
//    if (ap_pass_brigade(r->output_filters, bb) != APR_SUCCESS)
//        return HTTP_INTERNAL_SERVER_ERROR;
//#endif
    return OK;
}
</source>
<source file="examples2/apache/smallApache/mod_file_cache.c.ifdefed" startline="231" endline="236" pcid="35">
static int file_cache_post_config(apr_pool_t *p, apr_pool_t *plog,
                                   apr_pool_t *ptemp, server_rec *s)
{
    /* Hummm, anything to do here? */
    return OK;
}
</source>
</class>

</clones>
