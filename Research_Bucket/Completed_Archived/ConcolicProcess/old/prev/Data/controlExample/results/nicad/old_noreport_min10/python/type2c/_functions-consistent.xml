<source file="examples/python//audioop.c.ifdefed" startline="53" endline="63">
static PyInt16 x1 (PyInt16 x2, PyInt16 *x3, int x4) {
    int x5;
    for (x5 = 0; x5 < x4; x5++) {
        if (x2 <= *x3++)
            return (x5);
    }
    return (x4);
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="139" endline="174">
static unsigned char x1 (PyInt16 x2) {
    PyInt16 x3;
    PyInt16 x4;
    unsigned char x5;
    x2 = x2 >> 2;
    if (x2 < 0) {
        x2 = -x2;
        x3 = 0x7F;
    }
    else {
        x3 = 0xFF;
    }
    if (x2 > x6)
        x2 = x6;
    x2 += (x7 >> 2);
    x4 = x8 (x2, x9, 8);
    if (x4 >= 8)
        return (unsigned char) (0x7F ^ x3);
    else {
        x5 = (unsigned char) (x4 << 4) | ((x2 >> (x4 + 1)) & 0xF);
        return (x5 ^ x3);
    }
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="236" endline="269">
static unsigned char x1 (PyInt16 x2) {
    PyInt16 x3;
    short x4;
    unsigned char x5;
    x2 = x2 >> 3;
    if (x2 >= 0) {
        x3 = 0xD5;
    }
    else {
        x3 = 0x55;
        x2 = -x2 - 1;
    }
    x4 = x6 (x2, x7, 8);
    if (x4 >= 8)
        return (unsigned char) (0x7F ^ x3);
    else {
        x5 = (unsigned char) x4 << x8;
        if (x4 < 2)
            x5 |= (x2 >> 1) & x9;
        else
            x5 |= (x2 >> x4) & x9;
        return (x5 ^ x3);
    }
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="298" endline="319">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4;
    int x5, x6, x7 = 0;
    int x8;
    if (!x9 (x3, "s#ii:getsample", &x4, &x5, &x6, &x8))
        return 0;
    if (x6 != 1 && x6 != 2 && x6 != 4) {
        x10 (x11, "Size should be 1, 2 or 4");
        return 0;
    }
    if (x8 < 0 || x8 >= x5 / x6) {
        x10 (x11, "Index out of range");
        return 0;
    }
    if (x6 == 1)
        x7 = (int) *x12 (x4, x8);
    else if (x6 == 2)
        x7 = (int) *x13 (x4, x8 *2);
    else if (x6 == 4)
        x7 = (int) *x14 (x4, x8 *4);
    return x15 (x7);
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="321" endline="343">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4;
    int x5, x6, x7 = 0;
    int x8;
    int x9 = 0;
    if (!x10 (x3, "s#i:max", &x4, &x5, &x6))
        return 0;
    if (x6 != 1 && x6 != 2 && x6 != 4) {
        x11 (x12, "Size should be 1, 2 or 4");
        return 0;
    }
    for (x8 = 0; x8 < x5; x8 += x6) {
        if (x6 == 1)
            x7 = (int) *x13 (x4, x8);
        else if (x6 == 2)
            x7 = (int) *x14 (x4, x8);
        else if (x6 == 4)
            x7 = (int) *x15 (x4, x8);
        if (x7 < 0)
            x7 = (-x7);
        if (x7 > x9)
            x9 = x7;
    }
    return x16 (x9);
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="345" endline="367">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4;
    int x5, x6, x7 = 0;
    int x8;
    int x9 = 0x7fffffff, x10 = -0x7fffffff;
    if (!x11 (x3, "s#i:minmax", &x4, &x5, &x6))
        return x12;
    if (x6 != 1 && x6 != 2 && x6 != 4) {
        x13 (x14, "Size should be 1, 2 or 4");
        return x12;
    }
    for (x8 = 0; x8 < x5; x8 += x6) {
        if (x6 == 1)
            x7 = (int) *x15 (x4, x8);
        else if (x6 == 2)
            x7 = (int) *x16 (x4, x8);
        else if (x6 == 4)
            x7 = (int) *x17 (x4, x8);
        if (x7 > x10)
            x10 = x7;
        if (x7 < x9)
            x9 = x7;
    }
    return x18 ("(ii)", x9, x10);
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="369" endline="394">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4;
    int x5, x6, x7 = 0;
    int x8;
    double x9 = 0.0;
    if (!x10 (x3, "s#i:avg", &x4, &x5, &x6))
        return 0;
    if (x6 != 1 && x6 != 2 && x6 != 4) {
        x11 (x12, "Size should be 1, 2 or 4");
        return 0;
    }
    for (x8 = 0; x8 < x5; x8 += x6) {
        if (x6 == 1)
            x7 = (int) *x13 (x4, x8);
        else if (x6 == 2)
            x7 = (int) *x14 (x4, x8);
        else if (x6 == 4)
            x7 = (int) *x15 (x4, x8);
        x9 += x7;
    }
    if (x5 == 0)
        x7 = 0;
    else
        x7 = (int) (x9 / (double) (x5 / x6));
    return x16 (x7);
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="396" endline="421">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4;
    int x5, x6, x7 = 0;
    int x8;
    double x9 = 0.0;
    if (!x10 (x3, "s#i:rms", &x4, &x5, &x6))
        return 0;
    if (x6 != 1 && x6 != 2 && x6 != 4) {
        x11 (x12, "Size should be 1, 2 or 4");
        return 0;
    }
    for (x8 = 0; x8 < x5; x8 += x6) {
        if (x6 == 1)
            x7 = (int) *x13 (x4, x8);
        else if (x6 == 2)
            x7 = (int) *x14 (x4, x8);
        else if (x6 == 4)
            x7 = (int) *x15 (x4, x8);
        x9 += (double) x7 * (double) x7;
    }
    if (x5 == 0)
        x7 = 0;
    else
        x7 = (int) x16 (x9 / (double) (x5 / x6));
    return x17 (x7);
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="423" endline="432">
static double x1 (short *x2, short *x3, int x4) {
    int x5;
    double x6 = 0.0;
    for (x5 = 0; x5 < x4; x5++) {
        x6 = x6 + (double) x2[x5] * (double) x3[x5];
    }
    return x6;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="466" endline="519">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    short *x4, *x5;
    int x6, x7;
    int x8, x9;
    double x10, x11;
    double x12, x13, x14, x15, x16, x17;
    if (!x18 (x3, "s#s#:findfit", &x4, &x6, &x5, &x7))
        return 0;
    if (x6 & 1 || x7 & 1) {
        x19 (x20, "Strings should be even-sized");
        return 0;
    }
    x6 >>= 1;
    x7 >>= 1;
    if (x6 < x7) {
        x19 (x20, "First sample should be longer");
        return 0;
    }
    x12 = x21 (x5, x5, x7);
    x13 = x21 (x4, x4, x7);
    x14 = x21 (x4, x5, x7);
    x15 = (x12 * x13 - x14 * x14) / x13;
    x16 = x15;
    x9 = 0;
    x8 = 0;
    for (x8 = 1; x8 <= x6 - x7; x8++) {
        x10 = (double) x4[x8 - 1];
        x11 = (double) x4[x8 + x7 - 1];
        x13 = x13 + x11 * x11 - x10 * x10;
        x14 = x21 (x4 +x8, x5, x7);
        x15 = (x12 * x13 - x14 * x14) / x13;
        if (x15 < x16) {
            x16 = x15;
            x9 = x8;
        }
    }
    x17 = x21 (x4 +x9, x5, x7) / x12;
    return x22 ("(if)", x9, x17);
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="525" endline="550">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    short *x4, *x5;
    int x6, x7;
    double x8, x9, x10;
    if (!x11 (x3, "s#s#:findfactor", &x4, &x6, &x5, &x7))
        return 0;
    if (x6 & 1 || x7 & 1) {
        x12 (x13, "Strings should be even-sized");
        return 0;
    }
    if (x6 != x7) {
        x12 (x13, "Samples should be same size");
        return 0;
    }
    x7 >>= 1;
    x8 = x14 (x5, x5, x7);
    x9 = x14 (x4, x5, x7);
    x10 = x9 / x8;
    return x15 (x10);
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="556" endline="598">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    short *x4;
    int x5, x6;
    int x7, x8;
    double x9, x10;
    double x11, x12;
    if (!x13 (x3, "s#i:findmax", &x4, &x5, &x6))
        return 0;
    if (x5 & 1) {
        x14 (x15, "Strings should be even-sized");
        return 0;
    }
    x5 >>= 1;
    if (x5 < x6) {
        x14 (x15, "Input sample should be longer");
        return 0;
    }
    x11 = x16 (x4, x4, x6);
    x12 = x11;
    x8 = 0;
    x7 = 0;
    for (x7 = 1; x7 <= x5 - x6; x7++) {
        x9 = (double) x4[x7 - 1];
        x10 = (double) x4[x7 + x6 - 1];
        x11 = x11 + x10 * x10 - x9 * x9;
        if (x11 > x12) {
            x12 = x11;
            x8 = x7;
        }
    }
    return x17 (x8);
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="600" endline="655">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4;
    int x5, x6, x7 = 0, x8 = 0, x9 = 0, x10 = 0;
    int x11;
    double x12 = 0.0;
    int x13, x14, x15, x16 = 0;
    if (!x17 (x3, "s#i:avgpp", &x4, &x5, &x6))
        return 0;
    if (x6 != 1 && x6 != 2 && x6 != 4) {
        x18 (x19, "Size should be 1, 2 or 4");
        return 0;
    }
    if (x6 == 1)
        x8 = (int) *x20 (x4, 0);
    else if (x6 == 2)
        x8 = (int) *x21 (x4, 0);
    else if (x6 == 4)
        x8 = (int) *x22 (x4, 0);
    if (x6 == 1)
        x7 = (int) *x20 (x4, x6);
    else if (x6 == 2)
        x7 = (int) *x21 (x4, x6);
    else if (x6 == 4)
        x7 = (int) *x22 (x4, x6);
    x14 = x7 - x8;
    for (x11 = x6; x11 < x5; x11 += x6) {
        if (x6 == 1)
            x7 = (int) *x20 (x4, x11);
        else if (x6 == 2)
            x7 = (int) *x21 (x4, x11);
        else if (x6 == 4)
            x7 = (int) *x22 (x4, x11);
        x13 = x7 - x8;
        if (x13 * x14 < 0) {
            if (x9) {
                x15 = x8 - x10;
                if (x15 < 0)
                    x15 = -x15;
                x12 += x15;
                x16++;
            }
            x9 = 1;
            x10 = x8;
        }
        x8 = x7;
        if (x13 != 0)
            x14 = x13;
    }
    if (x16 == 0)
        x7 = 0;
    else
        x7 = (int) (x12 / (double) x16);
    return x23 (x7);
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="657" endline="708">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4;
    int x5, x6, x7 = 0, x8 = 0, x9 = 0, x10 = 0;
    int x11;
    int x12 = 0;
    int x13, x14, x15;
    if (!x16 (x3, "s#i:maxpp", &x4, &x5, &x6))
        return 0;
    if (x6 != 1 && x6 != 2 && x6 != 4) {
        x17 (x18, "Size should be 1, 2 or 4");
        return 0;
    }
    if (x6 == 1)
        x8 = (int) *x19 (x4, 0);
    else if (x6 == 2)
        x8 = (int) *x20 (x4, 0);
    else if (x6 == 4)
        x8 = (int) *x21 (x4, 0);
    if (x6 == 1)
        x7 = (int) *x19 (x4, x6);
    else if (x6 == 2)
        x7 = (int) *x20 (x4, x6);
    else if (x6 == 4)
        x7 = (int) *x21 (x4, x6);
    x14 = x7 - x8;
    for (x11 = x6; x11 < x5; x11 += x6) {
        if (x6 == 1)
            x7 = (int) *x19 (x4, x11);
        else if (x6 == 2)
            x7 = (int) *x20 (x4, x11);
        else if (x6 == 4)
            x7 = (int) *x21 (x4, x11);
        x13 = x7 - x8;
        if (x13 * x14 < 0) {
            if (x9) {
                x15 = x8 - x10;
                if (x15 < 0)
                    x15 = -x15;
                if (x15 > x12)
                    x12 = x15;
            }
            x9 = 1;
            x10 = x8;
        }
        x8 = x7;
        if (x13 != 0)
            x14 = x13;
    }
    return x22 (x12);
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="710" endline="735">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4;
    int x5, x6, x7 = 0;
    int x8;
    int x9, x10;
    if (!x11 (x3, "s#i:cross", &x4, &x5, &x6))
        return 0;
    if (x6 != 1 && x6 != 2 && x6 != 4) {
        x12 (x13, "Size should be 1, 2 or 4");
        return 0;
    }
    x10 = -1;
    x9 = 17;
    for (x8 = 0; x8 < x5; x8 += x6) {
        if (x6 == 1)
            x7 = ((int) *x14 (x4, x8)) >> 7;
        else if (x6 == 2)
            x7 = ((int) *x15 (x4, x8)) >> 15;
        else if (x6 == 4)
            x7 = ((int) *x16 (x4, x8)) >> 31;
        x7 = x7 & 1;
        if (x7 != x9)
            x10++;
        x9 = x7;
    }
    return x17 (x10);
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="737" endline="776">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4, *x5;
    int x6, x7, x8 = 0;
    double x9, x10, x11;
    PyObject *x12;
    int x13;
    if (!x14 (x3, "s#id:mul", &x4, &x6, &x7, &x9))
        return 0;
    if (x7 == 1)
        x11 = (double) 0x7f;
    else if (x7 == 2)
        x11 = (double) 0x7fff;
    else if (x7 == 4)
        x11 = (double) 0x7fffffff;
    else {
        x15 (x16, "Size should be 1, 2 or 4");
        return 0;
    }
    x12 = x17 (x18, x6);
    if (x12 == 0)
        return 0;
    x5 = (signed char *) x19 (x12);
    for (x13 = 0; x13 < x6; x13 += x7) {
        if (x7 == 1)
            x8 = (int) *x20 (x4, x13);
        else if (x7 == 2)
            x8 = (int) *x21 (x4, x13);
        else if (x7 == 4)
            x8 = (int) *x22 (x4, x13);
        x10 = (double) x8 * x9;
        if (x10 > x11)
            x10 = x11;
        else if (x10 < -x11)
            x10 = -x11;
        x8 = (int) x10;
        if (x7 == 1)
            *x20 (x5, x13) = (signed char) x8;
        else if (x7 == 2)
            *x21 (x5, x13) = (short) x8;
        else if (x7 == 4)
            *x22 (x5, x13) = (x23) x8;
    }
    return x12;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="778" endline="821">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4, *x5;
    int x6, x7, x8 = 0, x9 = 0;
    double x10, x11, x12, x13;
    PyObject *x14;
    int x15;
    if (!x16 (x3, "s#idd:tomono", &x4, &x6, &x7, &x10, &x11))
        return 0;
    if (x7 == 1)
        x13 = (double) 0x7f;
    else if (x7 == 2)
        x13 = (double) 0x7fff;
    else if (x7 == 4)
        x13 = (double) 0x7fffffff;
    else {
        x17 (x18, "Size should be 1, 2 or 4");
        return 0;
    }
    x14 = x19 (x20, x6 / 2);
    if (x14 == 0)
        return 0;
    x5 = (signed char *) x21 (x14);
    for (x15 = 0; x15 < x6; x15 += x7 * 2) {
        if (x7 == 1)
            x8 = (int) *x22 (x4, x15);
        else if (x7 == 2)
            x8 = (int) *x23 (x4, x15);
        else if (x7 == 4)
            x8 = (int) *x24 (x4, x15);
        if (x7 == 1)
            x9 = (int) *x22 (x4, x15 +1);
        else if (x7 == 2)
            x9 = (int) *x23 (x4, x15 +2);
        else if (x7 == 4)
            x9 = (int) *x24 (x4, x15 +4);
        x12 = (double) x8 * x10 + (double) x9 * x11;
        if (x12 > x13)
            x12 = x13;
        else if (x12 < -x13)
            x12 = -x13;
        x8 = (int) x12;
        if (x7 == 1)
            *x22 (x5, x15 / 2) = (signed char) x8;
        else if (x7 == 2)
            *x23 (x5, x15 / 2) = (short) x8;
        else if (x7 == 4)
            *x24 (x5, x15 / 2) = (x25) x8;
    }
    return x14;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="823" endline="874">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4, *x5;
    int x6, x7, x8, x9, x10 = 0;
    double x11, x12, x13, x14;
    PyObject *x15;
    int x16;
    if (!x17 (x3, "s#idd:tostereo", &x4, &x6, &x7, &x11, &x12))
        return 0;
    if (x7 == 1)
        x14 = (double) 0x7f;
    else if (x7 == 2)
        x14 = (double) 0x7fff;
    else if (x7 == 4)
        x14 = (double) 0x7fffffff;
    else {
        x18 (x19, "Size should be 1, 2 or 4");
        return 0;
    }
    x15 = x20 (x21, x6 *2);
    if (x15 == 0)
        return 0;
    x5 = (signed char *) x22 (x15);
    for (x16 = 0; x16 < x6; x16 += x7) {
        if (x7 == 1)
            x10 = (int) *x23 (x4, x16);
        else if (x7 == 2)
            x10 = (int) *x24 (x4, x16);
        else if (x7 == 4)
            x10 = (int) *x25 (x4, x16);
        x13 = (double) x10 * x11;
        if (x13 > x14)
            x13 = x14;
        else if (x13 < -x14)
            x13 = -x14;
        x8 = (int) x13;
        x13 = (double) x10 * x12;
        if (x13 > x14)
            x13 = x14;
        else if (x13 < -x14)
            x13 = -x14;
        x9 = (int) x13;
        if (x7 == 1)
            *x23 (x5, x16 *2) = (signed char) x8;
        else if (x7 == 2)
            *x24 (x5, x16 *2) = (short) x8;
        else if (x7 == 4)
            *x25 (x5, x16 *2) = (x26) x8;
        if (x7 == 1)
            *x23 (x5, x16 *2 + 1) = (signed char) x9;
        else if (x7 == 2)
            *x24 (x5, x16 *2 + 2) = (short) x9;
        else if (x7 == 4)
            *x25 (x5, x16 *2 + 4) = (x26) x9;
    }
    return x15;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="876" endline="927">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4, *x5, *x6;
    int x7, x8, x9, x10 = 0, x11 = 0, x12, x13;
    PyObject *x14;
    int x15;
    if (!x16 (x3, "s#s#i:add", &x4, &x7, &x5, &x8, &x9))
        return 0;
    if (x7 != x8) {
        x17 (x18, "Lengths should be the same");
        return 0;
    }
    if (x9 == 1)
        x12 = 0x7f;
    else if (x9 == 2)
        x12 = 0x7fff;
    else if (x9 == 4)
        x12 = 0x7fffffff;
    else {
        x17 (x18, "Size should be 1, 2 or 4");
        return 0;
    }
    x14 = x19 (x20, x7);
    if (x14 == 0)
        return 0;
    x6 = (signed char *) x21 (x14);
    for (x15 = 0; x15 < x7; x15 += x9) {
        if (x9 == 1)
            x10 = (int) *x22 (x4, x15);
        else if (x9 == 2)
            x10 = (int) *x23 (x4, x15);
        else if (x9 == 4)
            x10 = (int) *x24 (x4, x15);
        if (x9 == 1)
            x11 = (int) *x22 (x5, x15);
        else if (x9 == 2)
            x11 = (int) *x23 (x5, x15);
        else if (x9 == 4)
            x11 = (int) *x24 (x5, x15);
        x13 = x10 + x11;
        if (x13 > x12)
            x13 = x12;
        else if (x13 < -x12)
            x13 = -x12;
        else if (x9 == 4 && (x13 ^ x10) < 0 && (x13 ^ x11) < 0)
            x13 = x10 > 0 ? x12 : -x12;
        if (x9 == 1)
            *x22 (x6, x15) = (signed char) x13;
        else if (x9 == 2)
            *x23 (x6, x15) = (short) x13;
        else if (x9 == 4)
            *x24 (x6, x15) = (x25) x13;
    }
    return x14;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="929" endline="963">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4, *x5;
    int x6, x7, x8 = 0;
    PyObject *x9;
    int x10;
    int x11;
    if (!x12 (x3, "s#ii:bias", &x4, &x6, &x7, &x11))
        return 0;
    if (x7 != 1 && x7 != 2 && x7 != 4) {
        x13 (x14, "Size should be 1, 2 or 4");
        return 0;
    }
    x9 = x15 (x16, x6);
    if (x9 == 0)
        return 0;
    x5 = (signed char *) x17 (x9);
    for (x10 = 0; x10 < x6; x10 += x7) {
        if (x7 == 1)
            x8 = (int) *x18 (x4, x10);
        else if (x7 == 2)
            x8 = (int) *x19 (x4, x10);
        else if (x7 == 4)
            x8 = (int) *x20 (x4, x10);
        if (x7 == 1)
            *x18 (x5, x10) = (signed char) (x8 + x11);
        else if (x7 == 2)
            *x19 (x5, x10) = (short) (x8 + x11);
        else if (x7 == 4)
            *x20 (x5, x10) = (x21) (x8 + x11);
    }
    return x9;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="965" endline="1000">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4;
    unsigned char *x5;
    int x6, x7, x8 = 0;
    PyObject *x9;
    int x10, x11;
    if (!x12 (x3, "s#i:reverse", &x4, &x6, &x7))
        return 0;
    if (x7 != 1 && x7 != 2 && x7 != 4) {
        x13 (x14, "Size should be 1, 2 or 4");
        return 0;
    }
    x9 = x15 (x16, x6);
    if (x9 == 0)
        return 0;
    x5 = (unsigned char *) x17 (x9);
    for (x10 = 0; x10 < x6; x10 += x7) {
        if (x7 == 1)
            x8 = ((int) *x18 (x4, x10)) << 8;
        else if (x7 == 2)
            x8 = (int) *x19 (x4, x10);
        else if (x7 == 4)
            x8 = ((int) *x20 (x4, x10)) >> 16;
        x11 = x6 - x10 - x7;
        if (x7 == 1)
            *x18 (x5, x11) = (signed char) (x8 >> 8);
        else if (x7 == 2)
            *x19 (x5, x11) = (short) (x8);
        else if (x7 == 4)
            *x20 (x5, x11) = (x21) (x8 << 16);
    }
    return x9;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="1002" endline="1036">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4;
    unsigned char *x5;
    int x6, x7, x8, x9 = 0;
    PyObject *x10;
    int x11, x12;
    if (!x13 (x3, "s#ii:lin2lin", &x4, &x6, &x7, &x8))
        return 0;
    if ((x7 != 1 && x7 != 2 && x7 != 4) || (x8 != 1 && x8 != 2 && x8 != 4)) {
        x14 (x15, "Size should be 1, 2 or 4");
        return 0;
    }
    x10 = x16 (x17, (x6 / x7) * x8);
    if (x10 == 0)
        return 0;
    x5 = (unsigned char *) x18 (x10);
    for (x11 = 0, x12 = 0; x11 < x6; x11 += x7, x12 += x8) {
        if (x7 == 1)
            x9 = ((int) *x19 (x4, x11)) << 8;
        else if (x7 == 2)
            x9 = (int) *x20 (x4, x11);
        else if (x7 == 4)
            x9 = ((int) *x21 (x4, x11)) >> 16;
        if (x8 == 1)
            *x19 (x5, x12) = (signed char) (x9 >> 8);
        else if (x8 == 2)
            *x20 (x5, x12) = (short) (x9);
        else if (x8 == 4)
            *x21 (x5, x12) = (x22) (x9 << 16);
    }
    return x10;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="1038" endline="1047">
static int x1 (int x2, int x3) {
    while (x3 > 0) {
        int x4 = x2 % x3;
        x2 = x3;
        x3 = x4;
    }
    return x2;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="1049" endline="1233">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    char *x4, *x5;
    int x6, x7, x8, x9, x10, x11, x12;
    int x13, x14, *x15, *x16, x17;
    PyObject *x18, *x19, *x20, *x21 = x22;
    int x23;
    x11 = 1;
    x12 = 0;
    if (!x24 (x3, "s#iiiiO|ii:ratecv", &x4, &x6, &x7, &x8, &x9, &x10, &x18, &x11, &x12))
        return x22;
    if (x7 != 1 && x7 != 2 && x7 != 4) {
        x25 (x26, "Size should be 1, 2 or 4");
        return x22;
    }
    if (x8 < 1) {
        x25 (x26, "# of channels should be >= 1");
        return x22;
    }
    x23 = x7 * x8;
    if (x23 / x8 != x7) {
        x25 (x27, "width * nchannels too big for a C int");
        return x22;
    }
    if (x11 < 1 || x12 < 0) {
        x25 (x26, "weightA should be >= 1, weightB should be >= 0");
        return x22;
    }
    if (x6 % x23 != 0) {
        x25 (x26, "not a whole number of frames");
        return x22;
    }
    if (x9 <= 0 || x10 <= 0) {
        x25 (x26, "sampling rate not > 0");
        return x22;
    }
    x14 = x28 (x9, x10);
    x9 /= x14;
    x10 /= x14;
    x15 = (int *) x29 (x8 * sizeof (int));
    x16 = (int *) x29 (x8 * sizeof (int));
    if (x15 == x22 || x16 == x22) {
        (void) x30 ();
        goto x31;
    }
    x6 /= x23;
    if (x18 == x32) {
        x14 = -x10;
        for (x13 = 0; x13 < x8; x13++)
            x15[x13] = x16[x13] = 0;
    }
    else {
        if (!x24 (x18, "iO!;audioop.ratecv: illegal state argument", &x14, &x33, &x19))
            goto x31;
        if (x34 (x19) != x8) {
            x25 (x26, "illegal state argument");
            goto x31;
        }
        for (x13 = 0; x13 < x8; x13++) {
            if (!x24 (x35 (x19, x13), "ii:ratecv", &x15[x13], &x16[x13]))
                goto x31;
        }
    }
    {
        int x36;
        int x37;
        int x38 = x6 / x9;
        x36 = (x38 + 1) * x10;
        x37 = x36 * x23;
        if (x38 + 1 < 0 || x36 / x10 != x38 + 1 || x37 / x23 != x36)
            x20 = x22;
        else
            x20 = x39 (x22, x37);
        if (x20 == x22) {
            x25 (x40, "not enough memory for output buffer");
            goto x31;
        }
    }
    x5 = x41 (x20);
    for (;;) {
        while (x14 < 0) {
            if (x6 == 0) {
                x19 = x42 (x8);
                if (x19 == x22)
                    goto x31;
                for (x13 = 0; x13 < x8; x13++)
                    x43 (x19, x13, x44 ("(ii)", x15[x13], x16[x13]));
                if (x45 ())
                    goto x31;
                x6 = (int) (x5 - x41 (x20));
                if (x6 == 0) {
                    x21 = x39 ("", 0);
                    Py_DECREF (x20);
                    x20 = x21;
                }
                else if (x46 (&x20, x6) < 0)
                    goto x31;
                x21 = x44 ("(O(iO))", x20, x14, x19);
                Py_DECREF (x19);
                Py_DECREF (x20);
                goto x31;
            }
            for (x13 = 0; x13 < x8; x13++) {
                x15[x13] = x16[x13];
                if (x7 == 1)
                    x16[x13] = ((int) *x47 (x4, 0)) << 8;
                else if (x7 == 2)
                    x16[x13] = (int) *x48 (x4, 0);
                else if (x7 == 4)
                    x16[x13] = ((int) *x49 (x4, 0)) >> 16;
                x4 += x7;
                x16[x13] = (x11 * x16[x13] + x12 * x15[x13]) / (x11 + x12);
            }
            x6--;
            x14 += x10;
        }
        while (x14 >= 0) {
            for (x13 = 0; x13 < x8; x13++) {
                x17 = (x15[x13] * x14 + x16[x13] * (x10 - x14)) / x10;
                if (x7 == 1)
                    *x47 (x5, 0) = (signed char) (x17 >> 8);
                else if (x7 == 2)
                    *x48 (x5, 0) = (short) (x17);
                else if (x7 == 4)
                    *x49 (x5, 0) = (x50) (x17 << 16);
                x5 += x7;
            }
            x14 -= x9;
        }
    }
x31 :
    if (x15 != x22)
        x51 (x15);
    if (x16 != x22)
        x51 (x16);
    return x21;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="1235" endline="1266">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4;
    unsigned char *x5;
    int x6, x7, x8 = 0;
    PyObject *x9;
    int x10;
    if (!x11 (x3, "s#i:lin2ulaw", &x4, &x6, &x7))
        return 0;
    if (x7 != 1 && x7 != 2 && x7 != 4) {
        x12 (x13, "Size should be 1, 2 or 4");
        return 0;
    }
    x9 = x14 (x15, x6 / x7);
    if (x9 == 0)
        return 0;
    x5 = (unsigned char *) x16 (x9);
    for (x10 = 0; x10 < x6; x10 += x7) {
        if (x7 == 1)
            x8 = ((int) *x17 (x4, x10)) << 8;
        else if (x7 == 2)
            x8 = (int) *x18 (x4, x10);
        else if (x7 == 4)
            x8 = ((int) *x19 (x4, x10)) >> 16;
        *x5++ = x20 (x8);
    }
    return x9;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="1268" endline="1301">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    unsigned char *x4;
    unsigned char x5;
    signed char *x6;
    int x7, x8, x9;
    PyObject *x10;
    int x11;
    if (!x12 (x3, "s#i:ulaw2lin", &x4, &x7, &x8))
        return 0;
    if (x8 != 1 && x8 != 2 && x8 != 4) {
        x13 (x14, "Size should be 1, 2 or 4");
        return 0;
    }
    x10 = x15 (x16, x7 *x8);
    if (x10 == 0)
        return 0;
    x6 = (signed char *) x17 (x10);
    for (x11 = 0; x11 < x7 * x8; x11 += x8) {
        x5 = *x4++;
        x9 = x18 (x5);
        if (x8 == 1)
            *x19 (x6, x11) = (signed char) (x9 >> 8);
        else if (x8 == 2)
            *x20 (x6, x11) = (short) (x9);
        else if (x8 == 4)
            *x21 (x6, x11) = (x22) (x9 << 16);
    }
    return x10;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="1303" endline="1334">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4;
    unsigned char *x5;
    int x6, x7, x8 = 0;
    PyObject *x9;
    int x10;
    if (!x11 (x3, "s#i:lin2alaw", &x4, &x6, &x7))
        return 0;
    if (x7 != 1 && x7 != 2 && x7 != 4) {
        x12 (x13, "Size should be 1, 2 or 4");
        return 0;
    }
    x9 = x14 (x15, x6 / x7);
    if (x9 == 0)
        return 0;
    x5 = (unsigned char *) x16 (x9);
    for (x10 = 0; x10 < x6; x10 += x7) {
        if (x7 == 1)
            x8 = ((int) *x17 (x4, x10)) << 8;
        else if (x7 == 2)
            x8 = (int) *x18 (x4, x10);
        else if (x7 == 4)
            x8 = ((int) *x19 (x4, x10)) >> 16;
        *x5++ = x20 (x8);
    }
    return x9;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="1336" endline="1369">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    unsigned char *x4;
    unsigned char x5;
    signed char *x6;
    int x7, x8, x9;
    PyObject *x10;
    int x11;
    if (!x12 (x3, "s#i:alaw2lin", &x4, &x7, &x8))
        return 0;
    if (x8 != 1 && x8 != 2 && x8 != 4) {
        x13 (x14, "Size should be 1, 2 or 4");
        return 0;
    }
    x10 = x15 (x16, x7 *x8);
    if (x10 == 0)
        return 0;
    x6 = (signed char *) x17 (x10);
    for (x11 = 0; x11 < x7 * x8; x11 += x8) {
        x5 = *x4++;
        x9 = x18 (x5);
        if (x8 == 1)
            *x19 (x6, x11) = (signed char) (x9 >> 8);
        else if (x8 == 2)
            *x20 (x6, x11) = (short) (x9);
        else if (x8 == 4)
            *x21 (x6, x11) = (x22) (x9 << 16);
    }
    return x10;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="1371" endline="1478">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4;
    signed char *x5;
    int x6, x7, x8 = 0, x9, x10, x11, x12, x13, x14, x15;
    PyObject *x16, *x17, *x18;
    int x19, x20 = 0, x21;
    if (!x22 (x3, "s#iO:lin2adpcm", &x4, &x6, &x7, &x17))
        return 0;
    if (x7 != 1 && x7 != 2 && x7 != 4) {
        x23 (x24, "Size should be 1, 2 or 4");
        return 0;
    }
    x18 = x25 (x26, x6 / (x7 * 2));
    if (x18 == 0)
        return 0;
    x5 = (signed char *) x27 (x18);
    if (x17 == x28) {
        x10 = 0;
        x9 = 7;
        x12 = 0;
    }
    else if (!x22 (x17, "ii", &x10, &x12))
        return 0;
    x9 = x29[x12];
    x21 = 1;
    for (x19 = 0; x19 < x6; x19 += x7) {
        if (x7 == 1)
            x8 = ((int) *x30 (x4, x19)) << 8;
        else if (x7 == 2)
            x8 = (int) *x31 (x4, x19);
        else if (x7 == 4)
            x8 = ((int) *x32 (x4, x19)) >> 16;
        x15 = x8 - x10;
        x13 = (x15 < 0) ? 8 : 0;
        if (x13)
            x15 = (-x15);
        x11 = 0;
        x14 = (x9 >> 3);
        if (x15 >= x9) {
            x11 = 4;
            x15 -= x9;
            x14 += x9;
        }
        x9 >>= 1;
        if (x15 >= x9) {
            x11 |= 2;
            x15 -= x9;
            x14 += x9;
        }
        x9 >>= 1;
        if (x15 >= x9) {
            x11 |= 1;
            x14 += x9;
        }
        if (x13)
            x10 -= x14;
        else
            x10 += x14;
        if (x10 > 32767)
            x10 = 32767;
        else if (x10 < -32768)
            x10 = -32768;
        x11 |= x13;
        x12 += x33[x11];
        if (x12 < 0)
            x12 = 0;
        if (x12 > 88)
            x12 = 88;
        x9 = x29[x12];
        if (x21) {
            x20 = (x11 << 4) & 0xf0;
        }
        else {
            *x5++ = (x11 & 0x0f) | x20;
        }
        x21 = !x21;
    }
    x16 = x34 ("(O(ii))", x18, x10, x12);
    Py_DECREF (x18);
    return x16;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="1480" endline="1568">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4;
    signed char *x5;
    int x6, x7, x8, x9, x10, x11, x12, x13;
    PyObject *x14, *x15, *x16;
    int x17, x18 = 0, x19;
    if (!x20 (x3, "s#iO:adpcm2lin", &x4, &x6, &x7, &x16))
        return 0;
    if (x7 != 1 && x7 != 2 && x7 != 4) {
        x21 (x22, "Size should be 1, 2 or 4");
        return 0;
    }
    if (x16 == x23) {
        x8 = 0;
        x9 = 7;
        x11 = 0;
    }
    else if (!x20 (x16, "ii", &x8, &x11))
        return 0;
    x15 = x24 (x25, x6 *x7 * 2);
    if (x15 == 0)
        return 0;
    x5 = (signed char *) x26 (x15);
    x9 = x27[x11];
    x19 = 0;
    for (x17 = 0; x17 < x6 * x7 * 2; x17 += x7) {
        if (x19) {
            x10 = x18 & 0xf;
        }
        else {
            x18 = *x4++;
            x10 = (x18 >> 4) & 0xf;
        }
        x19 = !x19;
        x11 += x28[x10];
        if (x11 < 0)
            x11 = 0;
        if (x11 > 88)
            x11 = 88;
        x12 = x10 & 8;
        x10 = x10 & 7;
        x13 = x9 >> 3;
        if (x10 & 4)
            x13 += x9;
        if (x10 & 2)
            x13 += x9 >> 1;
        if (x10 & 1)
            x13 += x9 >> 2;
        if (x12)
            x8 -= x13;
        else
            x8 += x13;
        if (x8 > 32767)
            x8 = 32767;
        else if (x8 < -32768)
            x8 = -32768;
        x9 = x27[x11];
        if (x7 == 1)
            *x29 (x5, x17) = (signed char) (x8 >> 8);
        else if (x7 == 2)
            *x30 (x5, x17) = (short) (x8);
        else if (x7 == 4)
            *x31 (x5, x17) = (x32) (x8 << 16);
    }
    x14 = x33 ("(O(ii))", x15, x8, x11);
    Py_DECREF (x15);
    return x14;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="1599" endline="1612">
PyMODINIT_FUNC x1 (void) {
    PyObject *x2, *x3;
    x2 = x4 ("audioop", x5);
    if (x2 == x6)
        return;
    x3 = x7 (x2);
    if (x3 == x6)
        return;
    x8 = x9 ("audioop.error", x6, x6);
    if (x8 != x6)
        x10 (x3, "error", x8);
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="26" endline="31">
static Py_complex x1 (Py_complex x2) {
    return x3 (x4 (x5 (x6 (x2, x7 (x8, x9 (x10 (x11, x7 (x2, x2))))))));
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="39" endline="47">
static Py_complex x1 (Py_complex x2) {
    Py_complex x3;
    x3 = x4 (x5);
    x3 = x6 (x7 (x3, x8 (x4 (x8 (x2, x9)), x4 (x10 (x2, x9)))));
    return x8 (x3, x3);
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="55" endline="64">
static Py_complex x1 (Py_complex x2) {
    const Py_complex x3 = x4 (x2, x2);
    const Py_complex x5 = x6 (x7 (x8, x3));
    return x9 (x10 (x11 (x12 (x5, x10 (x2)))));
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="72" endline="80">
static Py_complex x1 (Py_complex x2) {
    Py_complex x3;
    x3 = x4 (x5);
    x3 = x6 (x7 (x3, x8 (x4 (x8 (x2, x9)), x4 (x10 (x2, x9)))));
    return x8 (x3, x3);
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="88" endline="92">
static Py_complex x1 (Py_complex x2) {
    return x3 (x4, x5 (x6 (x7 (x8, x2), x9 (x8, x2))));
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="100" endline="104">
static Py_complex x1 (Py_complex x2) {
    return x3 (x4, x5 (x6 (x7 (x8, x2), x9 (x8, x2))));
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="112" endline="119">
static Py_complex x1 (Py_complex x2) {
    Py_complex x3;
    x3.x4 = x5 (x2.x4) * x6 (x2.x7);
    x3.x7 = -x8 (x2.x4) * x9 (x2.x7);
    return x3;
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="127" endline="134">
static Py_complex x1 (Py_complex x2) {
    Py_complex x3;
    x3.x4 = x5 (x2.x6) * x7 (x2.x4);
    x3.x6 = x8 (x2.x6) * x9 (x2.x4);
    return x3;
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="142" endline="150">
static Py_complex x1 (Py_complex x2) {
    Py_complex x3;
    double x4 = x5 (x2.x6);
    x3.x6 = x4 * x7 (x2.x8);
    x3.x8 = x4 * x9 (x2.x8);
    return x3;
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="158" endline="166">
static Py_complex x1 (Py_complex x2) {
    Py_complex x3;
    double x4 = x5 (x2.x6, x2.x7);
    x3.x7 = x8 (x2.x7, x2.x6);
    x3.x6 = x9 (x4);
    return x3;
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="169" endline="177">
static Py_complex x1 (Py_complex x2) {
    Py_complex x3;
    double x4 = x5 (x2.x6, x2.x7);
    x3.x7 = x8 (x2.x7, x2.x6) / x9 (10.);
    x3.x6 = x10 (x4);
    return x3;
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="186" endline="193">
static Py_complex x1 (Py_complex x2) {
    Py_complex x3;
    x3.x4 = -x2.x5;
    x3.x5 = x2.x4;
    return x3;
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="196" endline="203">
static Py_complex x1 (Py_complex x2) {
    Py_complex x3;
    x3.x4 = x5 (x2.x4) * x6 (x2.x7);
    x3.x7 = x8 (x2.x4) * x9 (x2.x7);
    return x3;
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="211" endline="218">
static Py_complex x1 (Py_complex x2) {
    Py_complex x3;
    x3.x4 = x5 (x2.x6) * x7 (x2.x4);
    x3.x6 = x8 (x2.x6) * x9 (x2.x4);
    return x3;
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="226" endline="250">
static Py_complex x1 (Py_complex x2) {
    Py_complex x3;
    double x4, x5;
    if (x2.x6 == 0.&& x2.x7 == 0.)
        x3 = x2;
    else {
        x4 = x8 (0.5 * (x9 (x2.x6) + x10 (x2.x6, x2.x7)));
        x5 = 0.5 * x2.x7 / x4;
        if (x2.x6 > 0.) {
            x3.x6 = x4;
            x3.x7 = x5;
        }
        else if (x2.x7 >= 0.) {
            x3.x6 = x5;
            x3.x7 = x4;
        }
        else {
            x3.x6 = -x5;
            x3.x7 = -x4;
        }
    }
    return x3;
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="258" endline="277">
static Py_complex x1 (Py_complex x2) {
    Py_complex x3;
    double x4, x5, x6, x7;
    double x8, x9, x10, x11;
    double x12;
    x4 = x13 (x2.x14);
    x5 = x15 (x2.x14);
    x6 = x16 (x2.x17);
    x7 = x18 (x2.x17);
    x8 = x4 * x7;
    x9 = x5 * x6;
    x10 = x5 * x7;
    x11 = -x4 * x6;
    x12 = x10 * x10 + x11 * x11;
    x3.x14 = (x8 * x10 + x9 * x11) / x12;
    x3.x17 = (x9 * x10 - x8 * x11) / x12;
    return x3;
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="285" endline="304">
static Py_complex x1 (Py_complex x2) {
    Py_complex x3;
    double x4, x5, x6, x7;
    double x8, x9, x10, x11;
    double x12;
    x4 = x13 (x2.x14);
    x5 = x15 (x2.x14);
    x6 = x16 (x2.x17);
    x7 = x18 (x2.x17);
    x8 = x5 * x6;
    x9 = x4 * x7;
    x10 = x5 * x7;
    x11 = x4 * x6;
    x12 = x10 * x10 + x11 * x11;
    x3.x17 = (x8 * x10 + x9 * x11) / x12;
    x3.x14 = (x9 * x10 - x8 * x11) / x12;
    return x3;
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="311" endline="330">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    Py_complex x4;
    Py_complex x5;
    if (!x6 (x3, "D|D", &x4, &x5))
        return x7;
    x8 = 0;
    x9 ("complex function", return 0)
    x4 = x10 (x4);
    if (x11 (x3) == 2)
        x4 = x12 (x4, x10 (x5));
    x13 (x4)
    if (x8 != 0)
        return x14 ();
    x15 (x4.x16, x4.x17);
    return x18 (x4);
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="339" endline="349">
static PyObject *x1 (void) {
    if (x2 == x3)
        x4 (x5, "math domain error");
    else if (x2 == x6)
        x4 (x7, "math range error");
    else
        x8 (x5);
    return x9;
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="351" endline="366">
static PyObject *x1 (PyObject *x2, Py_complex (*x3) (Py_complex)) {
    Py_complex x4;
    if (!x5 (x2, "D", &x4))
        return x6;
    x7 = 0;
    x8 ("complex function", return 0)
    x4 = (*x3) (x4);
    PyFPE_END_PROTECT (x4) x9 (x4.x10, x4.x11);
    if (x7 != 0)
        return x12 ();
    else
        return x13 (x4);
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="414" endline="426">
PyMODINIT_FUNC x1 (void) {
    PyObject *x2;
    x2 = x3 ("cmath", x4, x5);
    if (x2 == x6)
        return;
    x7 (x2, "pi", x8 (x9 (1.0) * 4.0));
    x7 (x2, "e", x8 (x10 (1.0)));
}
</source>
<source file="examples/python//fcntlmodule.c.ifdefed" startline="18" endline="27">
static int x1 (PyObject *x2, int *x3) {
    int x4 = x5 (x2);
    if (x4 < 0)
        return 0;
    *x3 = x4;
    return 1;
}
</source>
<source file="examples/python//fcntlmodule.c.ifdefed" startline="32" endline="77">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    int x4;
    int x5;
    int x6;
    int x7;
    char *x8;
    Py_ssize_t x9;
    char x10 [1024];
    if (x11 (x3, "O&is#:fcntl", x12, &x4, &x5, &x8, &x9)) {
        if (x9 > sizeof x10) {
            x13 (x14, "fcntl string arg too long");
            return x15;
        }
        x16 (x10, x8, x9);
        Py_BEGIN_ALLOW_THREADS x7 = x17 (x4, x5, x10);
        Py_END_ALLOW_THREADS
        if (x7 < 0) {
            PyErr_SetFromErrno (x18);
            return x15;
        }
        return x19 (x10, x9);
    }
    x20 ();
    x6 = 0;
    if (!x11 (x3, "O&i|i;fcntl requires a file or file descriptor," " an integer and optionally a third integer or a string", x12, &x4, &x5, &x6)) {
        return x15;
    }
    Py_BEGIN_ALLOW_THREADS x7 = x17 (x4, x5, x6);
    Py_END_ALLOW_THREADS
    if (x7 < 0) {
        PyErr_SetFromErrno (x18);
        return x15;
    }
    return x21 ((long) x7);
}
</source>
<source file="examples/python//fcntlmodule.c.ifdefed" startline="95" endline="203">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    int x4;
    int x5;
    int x6;
    int x7;
    char *x8;
    Py_ssize_t x9;
    int x10 = 1;
    char x11 [x12 + 1];
    if (x13 (x3, "O&Iw#|i:ioctl", x14, &x4, &x5, &x8, &x9, &x10)) {
        char *x6;
        if (x10) {
            if (x9 <= x12) {
                x15 (x11, x8, x9);
                x11[x9] = '\0';
                x6 = x11;
            }
            else {
                x6 = x8;
            }
        }
        else {
            if (x9 > x12) {
                x16 (x17, "ioctl string arg too long");
                return x18;
            }
            else {
                x15 (x11, x8, x9);
                x11[x9] = '\0';
                x6 = x11;
            }
        }
        if (x11 == x6) {
            Py_BEGIN_ALLOW_THREADS x7 = x19 (x4, x5, x6);
            Py_END_ALLOW_THREADS
        }
        else {
            x7 = x19 (x4, x5, x6);
        }
        if (x10 && (x9 < x12)) {
            x15 (x8, x11, x9);
        }
        if (x7 < 0) {
            PyErr_SetFromErrno (x20);
            return x18;
        }
        if (x10) {
            return x21 (x7);
        }
        else {
            return x22 (x11, x9);
        }
    }
    x23 ();
    if (x13 (x3, "O&Is#:ioctl", x14, &x4, &x5, &x8, &x9)) {
        if (x9 > x12) {
            x16 (x17, "ioctl string arg too long");
            return x18;
        }
        x15 (x11, x8, x9);
        x11[x9] = '\0';
        Py_BEGIN_ALLOW_THREADS x7 = x19 (x4, x5, x11);
        Py_END_ALLOW_THREADS
        if (x7 < 0) {
            PyErr_SetFromErrno (x20);
            return x18;
        }
        return x22 (x11, x9);
    }
    x23 ();
    x6 = 0;
    if (!x13 (x3, "O&I|i;ioctl requires a file or file descriptor," " an integer and optionally an integer or buffer argument", x14, &x4, &x5, &x6)) {
        return x18;
    }
    Py_BEGIN_ALLOW_THREADS x7 = x19 (x4, x5, x6);
    Py_END_ALLOW_THREADS
    if (x7 < 0) {
        PyErr_SetFromErrno (x20);
        return x18;
    }
    return x21 ((long) x7);
}
</source>
<source file="examples/python//fcntlmodule.c.ifdefed" startline="239" endline="287">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    int x4;
    int x5;
    int x6;
    if (!x7 (x3, "O&i:flock", x8, &x4, &x5))
        return x9;
    {
        struct x10 x11;
        if (x5 == x12)
            x11.x13 = x14;
        else if (x5 & x15)
            x11.x13 = x16;
        else if (x5 & x17)
            x11.x13 = x18;
        else {
            x19 (x20, "unrecognized flock argument");
            return x9;
        }
        x11.x21 = x11.x22 = x11.x23 = 0;
        Py_BEGIN_ALLOW_THREADS x6 = x24 (x4, (x5 & x25) ? x26 : x27, &x11);
        Py_END_ALLOW_THREADS
    }
    if (x6 < 0) {
        PyErr_SetFromErrno (x28);
        return x9;
    }
    Py_INCREF (x29);
    return x29;
}
</source>
<source file="examples/python//fcntlmodule.c.ifdefed" startline="298" endline="368">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    int x4, x5, x6, x7 = 0;
    PyObject *x8 = x9, *x10 = x9;
    if (!x11 (x3, "O&i|OOi:lockf", x12, &x4, &x5, &x8, &x10, &x7))
        return x9;
    {
        struct x13 x14;
        if (x5 == x15)
            x14.x16 = x17;
        else if (x5 & x18)
            x14.x16 = x19;
        else if (x5 & x20)
            x14.x16 = x21;
        else {
            x22 (x23, "unrecognized lockf argument");
            return x9;
        }
        x14.x24 = x14.x25 = 0;
        if (x10 != x9) {
            x14.x24 = x26 (x10) ? x27 (x10) : x28 (x10);
            if (x29 ())
                return x9;
        }
        if (x8 != x9) {
            x14.x25 = x26 (x8) ? x27 (x8) : x28 (x8);
            if (x29 ())
                return x9;
        }
        x14.x30 = x7;
        Py_BEGIN_ALLOW_THREADS x6 = x31 (x4, (x5 & x32) ? x33 : x34, &x14);
        Py_END_ALLOW_THREADS
    }
    if (x6 < 0) {
        PyErr_SetFromErrno (x35);
        return x9;
    }
    Py_INCREF (x36);
    return x36;
}
</source>
<source file="examples/python//fcntlmodule.c.ifdefed" startline="414" endline="423">
static int x1 (PyObject *x2, char *x3, long x4) {
    PyObject *x5 = x6 (x4);
    if (!x5 || x7 (x2, x3, x5) < 0)
        return -1;
    Py_DECREF (x5);
    return 0;
}
</source>
<source file="examples/python//fcntlmodule.c.ifdefed" startline="427" endline="588">
static int x1 (PyObject *x2) {
    if (x3 (x2, "LOCK_SH", (long) x4))
        return -1;
    if (x3 (x2, "LOCK_EX", (long) x5))
        return -1;
    if (x3 (x2, "LOCK_NB", (long) x6))
        return -1;
    if (x3 (x2, "LOCK_UN", (long) x7))
        return -1;
    return 0;
}
</source>
<source file="examples/python//fcntlmodule.c.ifdefed" startline="590" endline="603">
PyMODINIT_FUNC x1 (void) {
    PyObject *x2, *x3;
    x2 = x4 ("fcntl", x5, x6);
    if (x2 == x7)
        return;
    x3 = x8 (x2);
    x9 (x3);
}
</source>
<source file="examples/python//fpectlmodule.c.ifdefed" startline="103" endline="110">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    x4 (x5);
    Py_INCREF (x6);
    return x6;
}
</source>
<source file="examples/python//fpectlmodule.c.ifdefed" startline="112" endline="257">
static void x1 (Sigfunc *x2) {
    x3 ("Operation not implemented\n", x4);
}
</source>
<source file="examples/python//fpectlmodule.c.ifdefed" startline="259" endline="277">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    x4 ("Operation not implemented\n", x5);
    Py_INCREF (x6);
    return x6;
}
</source>
<source file="examples/python//fpectlmodule.c.ifdefed" startline="279" endline="287">
static void x1 (int x2) {
    x3 (x1);
    if (x4) {
        x5 (x6, 1);
    }
    else {
        x7 ("Unprotected floating point exception");
    }
}
</source>
<source file="examples/python//fpectlmodule.c.ifdefed" startline="289" endline="299">
PyMODINIT_FUNC x1 (void) {
    PyObject *x2, *x3;
    x2 = x4 ("fpectl", x5);
    if (x2 == x6)
        return;
    x3 = x7 (x2);
    x8 = x9 ("fpectl.error", x6, x6);
    if (x8 != x6)
        x10 (x3, "error", x8);
}
</source>
<source file="examples/python//fpetestmodule.c.ifdefed" startline="61" endline="99">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    double x4;
    x5 (x6, "overflow");
    x4 = x7 (1.e160);
    x8 (x4);
    x5 (x6, "\ndiv by 0");
    x4 = x9 (0.0);
    x8 (x4);
    x5 (x6, "\nnested outer");
    x4 = x10 (0, 0.0);
    x8 (x4);
    x5 (x6, "\nnested inner");
    x4 = x10 (1, 1.0);
    x8 (x4);
    x5 (x6, "\ntrailing outer");
    x4 = x10 (2, 2.0);
    x8 (x4);
    x5 (x6, "\nnested prior");
    x4 = x11 (0, 0.0);
    x8 (x4);
    x5 (x6, "\nnested interior");
    x4 = x11 (1, 1.0);
    x8 (x4);
    x5 (x6, "\nnested trailing");
    x4 = x11 (2, 2.0);
    x8 (x4);
    Py_INCREF (x12);
    return x12;
}
</source>
<source file="examples/python//fpetestmodule.c.ifdefed" startline="101" endline="110">
static void x1 (double x2) {
    if (x2 == 3.1416) {
        x3 (x4, "\tPASS\n");
        x5 ();
    }
    else {
        x3 (x4, "\tFAIL\n");
    }
    x6 ();
}
</source>
<source file="examples/python//fpetestmodule.c.ifdefed" startline="112" endline="130">
static double x1 (int x2, double x3) {
    double x4 = 1.0;
    x5 ("Division by zero, outer zone", return 3.1416)
    if (x2 == 0) {
        x4 = 1./ x3;
    }
    else if (x2 == 1) {
        x5 ("Division by zero, inner zone", return 3.1416)
        x4 = 1./ (1.- x3);
        x6 (x4)
    }
    else if (x2 == 2) {
        x4 = 1./ (2.- x3);
    }
    x6 (x4)
    return x4;
}
</source>
<source file="examples/python//fpetestmodule.c.ifdefed" startline="132" endline="145">
static double x1 (int x2, double x3) {
    double x4 = 1.0;
    x5 ("Division by zero, prior error", return 3.1416)
    if (x2 == 0) {
        x4 = 1./ x3;
    }
    else if (x2 == 1) {
        x4 = x6 (x3);
    }
    else if (x2 == 2) {
        x4 = 1./ (2.- x3);
    }
    x7 (x4)
    return x4;
}
</source>
<source file="examples/python//fpetestmodule.c.ifdefed" startline="147" endline="155">
static double x1 (double x2) {
    double x3;
    x4 ("Division by zero, nest3 error", return 3.1416)
    x3 = 1./ (1.- x2);
    x5 (x3)
    return x3;
}
</source>
<source file="examples/python//fpetestmodule.c.ifdefed" startline="157" endline="164">
static double x1 (double x2) {
    double x3;
    x4 ("Division by zero", return 3.1416)
    x3 = 1./ x2;
    x5 (x3)
    return x3;
}
</source>
<source file="examples/python//fpetestmodule.c.ifdefed" startline="166" endline="173">
static double x1 (double x2) {
    double x3;
    x4 ("Overflow", return 3.1416)
    x3 = x2 * x2;
    x5 (x3)
    return x3;
}
</source>
<source file="examples/python//fpetestmodule.c.ifdefed" startline="175" endline="186">
PyMODINIT_FUNC x1 (void) {
    PyObject *x2, *x3;
    x2 = x4 ("fpetest", x5);
    if (x2 == x6)
        return;
    x3 = x7 (x2);
    x8 = x9 ("fpetest.error", x6, x6);
    if (x8 != x6)
        x10 (x3, "error", x8);
}
</source>
<source file="examples/python//grpmodule.c.ifdefed" startline="35" endline="84">
static PyObject *x1 (struct x2 *x3) {
    int x4 = 0;
    PyObject *x5 = x6 (&x7), *x8;
    char **x9;
    if (x5 == x10)
        return x10;
    if ((x8 = x11 (0)) == x10) {
        Py_DECREF (x5);
        return x10;
    }
    for (x9 = x3->x12; *x9 != x10; x9++) {
        PyObject *x13 = x14 (*x9);
        if (x13 == x10 || x15 (x8, x13) != 0) {
            Py_XDECREF (x13);
            Py_DECREF (x8);
            Py_DECREF (x5);
            return x10;
        }
        Py_DECREF (x13);
    }
    x16 (x4 ++, x14 (x3 -> x17));
    if (x3->x18)
        x16 (x4++, x14 (x3->x18));
    else {
        x16 (x4 ++, x19);
        Py_INCREF (x19);
    }
    x16 (x4 ++, x20 ((long) x3 -> x21));
    x16 (x4 ++, x8);
    if (x22 ()) {
        Py_DECREF (x5);
        Py_DECREF (x8);
        return x10;
    }
    return x5;
}
</source>
<source file="examples/python//grpmodule.c.ifdefed" startline="86" endline="104">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    PyObject *x4;
    unsigned int x5;
    struct x6 *x7;
    x4 = x8 (x3);
    if (!x4)
        return x9;
    x5 = x10 (x4);
    Py_DECREF (x4);
    if ((x7 = x11 (x5)) == x9) {
        x12 (x13, "getgrgid(): gid not found: %d", x5);
        return x9;
    }
    return x14 (x7);
}
</source>
<source file="examples/python//grpmodule.c.ifdefed" startline="106" endline="126">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    PyObject *x4;
    char *x5;
    struct x6 *x7;
    x4 = x8 (x3);
    if (!x4)
        return x9;
    x5 = x10 (x4);
    if ((x7 = x11 (x5)) == x9) {
        x12 (x13, "getgrnam(): name not found: %s", x5);
        Py_DECREF (x4);
        return x9;
    }
    Py_DECREF (x4);
    return x14 (x7);
}
</source>
<source file="examples/python//grpmodule.c.ifdefed" startline="128" endline="148">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    PyObject *x4;
    struct x5 *x6;
    if ((x4 = x7 (0)) == x8)
        return x8;
    x9 ();
    while ((x6 = x10 ()) != x8) {
        PyObject *x11 = x12 (x6);
        if (x11 == x8 || x13 (x4, x11) != 0) {
            Py_XDECREF (x11);
            Py_DECREF (x4);
            return x8;
        }
        Py_DECREF (x11);
    }
    x14 ();
    return x4;
}
</source>
<source file="examples/python//grpmodule.c.ifdefed" startline="182" endline="194">
PyMODINIT_FUNC x1 (void) {
    PyObject *x2, *x3;
    x2 = x4 ("grp", x5, x6);
    if (x2 == x7)
        return;
    x3 = x8 (x2);
    if (!x9)
        x10 (&x11, &x12);
    x13 (x3, "struct_group", (x14 *) & x11);
    x9 = 1;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="53" endline="63">
static PyInt16 x1 (PyInt16 x2, PyInt16 *x3, int x4) {
    int x5;
    for (x5 = 0; x5 < x4; x5++) {
        if (x2 <= *x3++)
            return (x5);
    }
    return (x4);
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="139" endline="174">
static unsigned char x1 (PyInt16 x2) {
    PyInt16 x3;
    PyInt16 x4;
    unsigned char x5;
    x2 = x2 >> 2;
    if (x2 < 0) {
        x2 = -x2;
        x3 = 0x7F;
    }
    else {
        x3 = 0xFF;
    }
    if (x2 > x6)
        x2 = x6;
    x2 += (x7 >> 2);
    x4 = x8 (x2, x9, 8);
    if (x4 >= 8)
        return (unsigned char) (0x7F ^ x3);
    else {
        x5 = (unsigned char) (x4 << 4) | ((x2 >> (x4 + 1)) & 0xF);
        return (x5 ^ x3);
    }
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="236" endline="269">
static unsigned char x1 (PyInt16 x2) {
    PyInt16 x3;
    short x4;
    unsigned char x5;
    x2 = x2 >> 3;
    if (x2 >= 0) {
        x3 = 0xD5;
    }
    else {
        x3 = 0x55;
        x2 = -x2 - 1;
    }
    x4 = x6 (x2, x7, 8);
    if (x4 >= 8)
        return (unsigned char) (0x7F ^ x3);
    else {
        x5 = (unsigned char) x4 << x8;
        if (x4 < 2)
            x5 |= (x2 >> 1) & x9;
        else
            x5 |= (x2 >> x4) & x9;
        return (x5 ^ x3);
    }
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="298" endline="319">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4;
    int x5, x6, x7 = 0;
    int x8;
    if (!x9 (x3, "s#ii:getsample", &x4, &x5, &x6, &x8))
        return 0;
    if (x6 != 1 && x6 != 2 && x6 != 4) {
        x10 (x11, "Size should be 1, 2 or 4");
        return 0;
    }
    if (x8 < 0 || x8 >= x5 / x6) {
        x10 (x11, "Index out of range");
        return 0;
    }
    if (x6 == 1)
        x7 = (int) *x12 (x4, x8);
    else if (x6 == 2)
        x7 = (int) *x13 (x4, x8 *2);
    else if (x6 == 4)
        x7 = (int) *x14 (x4, x8 *4);
    return x15 (x7);
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="321" endline="343">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4;
    int x5, x6, x7 = 0;
    int x8;
    int x9 = 0;
    if (!x10 (x3, "s#i:max", &x4, &x5, &x6))
        return 0;
    if (x6 != 1 && x6 != 2 && x6 != 4) {
        x11 (x12, "Size should be 1, 2 or 4");
        return 0;
    }
    for (x8 = 0; x8 < x5; x8 += x6) {
        if (x6 == 1)
            x7 = (int) *x13 (x4, x8);
        else if (x6 == 2)
            x7 = (int) *x14 (x4, x8);
        else if (x6 == 4)
            x7 = (int) *x15 (x4, x8);
        if (x7 < 0)
            x7 = (-x7);
        if (x7 > x9)
            x9 = x7;
    }
    return x16 (x9);
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="345" endline="367">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4;
    int x5, x6, x7 = 0;
    int x8;
    int x9 = 0x7fffffff, x10 = -0x7fffffff;
    if (!x11 (x3, "s#i:minmax", &x4, &x5, &x6))
        return x12;
    if (x6 != 1 && x6 != 2 && x6 != 4) {
        x13 (x14, "Size should be 1, 2 or 4");
        return x12;
    }
    for (x8 = 0; x8 < x5; x8 += x6) {
        if (x6 == 1)
            x7 = (int) *x15 (x4, x8);
        else if (x6 == 2)
            x7 = (int) *x16 (x4, x8);
        else if (x6 == 4)
            x7 = (int) *x17 (x4, x8);
        if (x7 > x10)
            x10 = x7;
        if (x7 < x9)
            x9 = x7;
    }
    return x18 ("(ii)", x9, x10);
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="369" endline="394">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4;
    int x5, x6, x7 = 0;
    int x8;
    double x9 = 0.0;
    if (!x10 (x3, "s#i:avg", &x4, &x5, &x6))
        return 0;
    if (x6 != 1 && x6 != 2 && x6 != 4) {
        x11 (x12, "Size should be 1, 2 or 4");
        return 0;
    }
    for (x8 = 0; x8 < x5; x8 += x6) {
        if (x6 == 1)
            x7 = (int) *x13 (x4, x8);
        else if (x6 == 2)
            x7 = (int) *x14 (x4, x8);
        else if (x6 == 4)
            x7 = (int) *x15 (x4, x8);
        x9 += x7;
    }
    if (x5 == 0)
        x7 = 0;
    else
        x7 = (int) (x9 / (double) (x5 / x6));
    return x16 (x7);
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="396" endline="421">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4;
    int x5, x6, x7 = 0;
    int x8;
    double x9 = 0.0;
    if (!x10 (x3, "s#i:rms", &x4, &x5, &x6))
        return 0;
    if (x6 != 1 && x6 != 2 && x6 != 4) {
        x11 (x12, "Size should be 1, 2 or 4");
        return 0;
    }
    for (x8 = 0; x8 < x5; x8 += x6) {
        if (x6 == 1)
            x7 = (int) *x13 (x4, x8);
        else if (x6 == 2)
            x7 = (int) *x14 (x4, x8);
        else if (x6 == 4)
            x7 = (int) *x15 (x4, x8);
        x9 += (double) x7 * (double) x7;
    }
    if (x5 == 0)
        x7 = 0;
    else
        x7 = (int) x16 (x9 / (double) (x5 / x6));
    return x17 (x7);
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="423" endline="432">
static double x1 (short *x2, short *x3, int x4) {
    int x5;
    double x6 = 0.0;
    for (x5 = 0; x5 < x4; x5++) {
        x6 = x6 + (double) x2[x5] * (double) x3[x5];
    }
    return x6;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="466" endline="519">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    short *x4, *x5;
    int x6, x7;
    int x8, x9;
    double x10, x11;
    double x12, x13, x14, x15, x16, x17;
    if (!x18 (x3, "s#s#:findfit", &x4, &x6, &x5, &x7))
        return 0;
    if (x6 & 1 || x7 & 1) {
        x19 (x20, "Strings should be even-sized");
        return 0;
    }
    x6 >>= 1;
    x7 >>= 1;
    if (x6 < x7) {
        x19 (x20, "First sample should be longer");
        return 0;
    }
    x12 = x21 (x5, x5, x7);
    x13 = x21 (x4, x4, x7);
    x14 = x21 (x4, x5, x7);
    x15 = (x12 * x13 - x14 * x14) / x13;
    x16 = x15;
    x9 = 0;
    x8 = 0;
    for (x8 = 1; x8 <= x6 - x7; x8++) {
        x10 = (double) x4[x8 - 1];
        x11 = (double) x4[x8 + x7 - 1];
        x13 = x13 + x11 * x11 - x10 * x10;
        x14 = x21 (x4 +x8, x5, x7);
        x15 = (x12 * x13 - x14 * x14) / x13;
        if (x15 < x16) {
            x16 = x15;
            x9 = x8;
        }
    }
    x17 = x21 (x4 +x9, x5, x7) / x12;
    return x22 ("(if)", x9, x17);
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="525" endline="550">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    short *x4, *x5;
    int x6, x7;
    double x8, x9, x10;
    if (!x11 (x3, "s#s#:findfactor", &x4, &x6, &x5, &x7))
        return 0;
    if (x6 & 1 || x7 & 1) {
        x12 (x13, "Strings should be even-sized");
        return 0;
    }
    if (x6 != x7) {
        x12 (x13, "Samples should be same size");
        return 0;
    }
    x7 >>= 1;
    x8 = x14 (x5, x5, x7);
    x9 = x14 (x4, x5, x7);
    x10 = x9 / x8;
    return x15 (x10);
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="556" endline="598">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    short *x4;
    int x5, x6;
    int x7, x8;
    double x9, x10;
    double x11, x12;
    if (!x13 (x3, "s#i:findmax", &x4, &x5, &x6))
        return 0;
    if (x5 & 1) {
        x14 (x15, "Strings should be even-sized");
        return 0;
    }
    x5 >>= 1;
    if (x5 < x6) {
        x14 (x15, "Input sample should be longer");
        return 0;
    }
    x11 = x16 (x4, x4, x6);
    x12 = x11;
    x8 = 0;
    x7 = 0;
    for (x7 = 1; x7 <= x5 - x6; x7++) {
        x9 = (double) x4[x7 - 1];
        x10 = (double) x4[x7 + x6 - 1];
        x11 = x11 + x10 * x10 - x9 * x9;
        if (x11 > x12) {
            x12 = x11;
            x8 = x7;
        }
    }
    return x17 (x8);
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="600" endline="655">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4;
    int x5, x6, x7 = 0, x8 = 0, x9 = 0, x10 = 0;
    int x11;
    double x12 = 0.0;
    int x13, x14, x15, x16 = 0;
    if (!x17 (x3, "s#i:avgpp", &x4, &x5, &x6))
        return 0;
    if (x6 != 1 && x6 != 2 && x6 != 4) {
        x18 (x19, "Size should be 1, 2 or 4");
        return 0;
    }
    if (x6 == 1)
        x8 = (int) *x20 (x4, 0);
    else if (x6 == 2)
        x8 = (int) *x21 (x4, 0);
    else if (x6 == 4)
        x8 = (int) *x22 (x4, 0);
    if (x6 == 1)
        x7 = (int) *x20 (x4, x6);
    else if (x6 == 2)
        x7 = (int) *x21 (x4, x6);
    else if (x6 == 4)
        x7 = (int) *x22 (x4, x6);
    x14 = x7 - x8;
    for (x11 = x6; x11 < x5; x11 += x6) {
        if (x6 == 1)
            x7 = (int) *x20 (x4, x11);
        else if (x6 == 2)
            x7 = (int) *x21 (x4, x11);
        else if (x6 == 4)
            x7 = (int) *x22 (x4, x11);
        x13 = x7 - x8;
        if (x13 * x14 < 0) {
            if (x9) {
                x15 = x8 - x10;
                if (x15 < 0)
                    x15 = -x15;
                x12 += x15;
                x16++;
            }
            x9 = 1;
            x10 = x8;
        }
        x8 = x7;
        if (x13 != 0)
            x14 = x13;
    }
    if (x16 == 0)
        x7 = 0;
    else
        x7 = (int) (x12 / (double) x16);
    return x23 (x7);
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="657" endline="708">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4;
    int x5, x6, x7 = 0, x8 = 0, x9 = 0, x10 = 0;
    int x11;
    int x12 = 0;
    int x13, x14, x15;
    if (!x16 (x3, "s#i:maxpp", &x4, &x5, &x6))
        return 0;
    if (x6 != 1 && x6 != 2 && x6 != 4) {
        x17 (x18, "Size should be 1, 2 or 4");
        return 0;
    }
    if (x6 == 1)
        x8 = (int) *x19 (x4, 0);
    else if (x6 == 2)
        x8 = (int) *x20 (x4, 0);
    else if (x6 == 4)
        x8 = (int) *x21 (x4, 0);
    if (x6 == 1)
        x7 = (int) *x19 (x4, x6);
    else if (x6 == 2)
        x7 = (int) *x20 (x4, x6);
    else if (x6 == 4)
        x7 = (int) *x21 (x4, x6);
    x14 = x7 - x8;
    for (x11 = x6; x11 < x5; x11 += x6) {
        if (x6 == 1)
            x7 = (int) *x19 (x4, x11);
        else if (x6 == 2)
            x7 = (int) *x20 (x4, x11);
        else if (x6 == 4)
            x7 = (int) *x21 (x4, x11);
        x13 = x7 - x8;
        if (x13 * x14 < 0) {
            if (x9) {
                x15 = x8 - x10;
                if (x15 < 0)
                    x15 = -x15;
                if (x15 > x12)
                    x12 = x15;
            }
            x9 = 1;
            x10 = x8;
        }
        x8 = x7;
        if (x13 != 0)
            x14 = x13;
    }
    return x22 (x12);
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="710" endline="735">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4;
    int x5, x6, x7 = 0;
    int x8;
    int x9, x10;
    if (!x11 (x3, "s#i:cross", &x4, &x5, &x6))
        return 0;
    if (x6 != 1 && x6 != 2 && x6 != 4) {
        x12 (x13, "Size should be 1, 2 or 4");
        return 0;
    }
    x10 = -1;
    x9 = 17;
    for (x8 = 0; x8 < x5; x8 += x6) {
        if (x6 == 1)
            x7 = ((int) *x14 (x4, x8)) >> 7;
        else if (x6 == 2)
            x7 = ((int) *x15 (x4, x8)) >> 15;
        else if (x6 == 4)
            x7 = ((int) *x16 (x4, x8)) >> 31;
        x7 = x7 & 1;
        if (x7 != x9)
            x10++;
        x9 = x7;
    }
    return x17 (x10);
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="737" endline="776">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4, *x5;
    int x6, x7, x8 = 0;
    double x9, x10, x11;
    PyObject *x12;
    int x13;
    if (!x14 (x3, "s#id:mul", &x4, &x6, &x7, &x9))
        return 0;
    if (x7 == 1)
        x11 = (double) 0x7f;
    else if (x7 == 2)
        x11 = (double) 0x7fff;
    else if (x7 == 4)
        x11 = (double) 0x7fffffff;
    else {
        x15 (x16, "Size should be 1, 2 or 4");
        return 0;
    }
    x12 = x17 (x18, x6);
    if (x12 == 0)
        return 0;
    x5 = (signed char *) x19 (x12);
    for (x13 = 0; x13 < x6; x13 += x7) {
        if (x7 == 1)
            x8 = (int) *x20 (x4, x13);
        else if (x7 == 2)
            x8 = (int) *x21 (x4, x13);
        else if (x7 == 4)
            x8 = (int) *x22 (x4, x13);
        x10 = (double) x8 * x9;
        if (x10 > x11)
            x10 = x11;
        else if (x10 < -x11)
            x10 = -x11;
        x8 = (int) x10;
        if (x7 == 1)
            *x20 (x5, x13) = (signed char) x8;
        else if (x7 == 2)
            *x21 (x5, x13) = (short) x8;
        else if (x7 == 4)
            *x22 (x5, x13) = (x23) x8;
    }
    return x12;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="778" endline="821">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4, *x5;
    int x6, x7, x8 = 0, x9 = 0;
    double x10, x11, x12, x13;
    PyObject *x14;
    int x15;
    if (!x16 (x3, "s#idd:tomono", &x4, &x6, &x7, &x10, &x11))
        return 0;
    if (x7 == 1)
        x13 = (double) 0x7f;
    else if (x7 == 2)
        x13 = (double) 0x7fff;
    else if (x7 == 4)
        x13 = (double) 0x7fffffff;
    else {
        x17 (x18, "Size should be 1, 2 or 4");
        return 0;
    }
    x14 = x19 (x20, x6 / 2);
    if (x14 == 0)
        return 0;
    x5 = (signed char *) x21 (x14);
    for (x15 = 0; x15 < x6; x15 += x7 * 2) {
        if (x7 == 1)
            x8 = (int) *x22 (x4, x15);
        else if (x7 == 2)
            x8 = (int) *x23 (x4, x15);
        else if (x7 == 4)
            x8 = (int) *x24 (x4, x15);
        if (x7 == 1)
            x9 = (int) *x22 (x4, x15 +1);
        else if (x7 == 2)
            x9 = (int) *x23 (x4, x15 +2);
        else if (x7 == 4)
            x9 = (int) *x24 (x4, x15 +4);
        x12 = (double) x8 * x10 + (double) x9 * x11;
        if (x12 > x13)
            x12 = x13;
        else if (x12 < -x13)
            x12 = -x13;
        x8 = (int) x12;
        if (x7 == 1)
            *x22 (x5, x15 / 2) = (signed char) x8;
        else if (x7 == 2)
            *x23 (x5, x15 / 2) = (short) x8;
        else if (x7 == 4)
            *x24 (x5, x15 / 2) = (x25) x8;
    }
    return x14;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="823" endline="874">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4, *x5;
    int x6, x7, x8, x9, x10 = 0;
    double x11, x12, x13, x14;
    PyObject *x15;
    int x16;
    if (!x17 (x3, "s#idd:tostereo", &x4, &x6, &x7, &x11, &x12))
        return 0;
    if (x7 == 1)
        x14 = (double) 0x7f;
    else if (x7 == 2)
        x14 = (double) 0x7fff;
    else if (x7 == 4)
        x14 = (double) 0x7fffffff;
    else {
        x18 (x19, "Size should be 1, 2 or 4");
        return 0;
    }
    x15 = x20 (x21, x6 *2);
    if (x15 == 0)
        return 0;
    x5 = (signed char *) x22 (x15);
    for (x16 = 0; x16 < x6; x16 += x7) {
        if (x7 == 1)
            x10 = (int) *x23 (x4, x16);
        else if (x7 == 2)
            x10 = (int) *x24 (x4, x16);
        else if (x7 == 4)
            x10 = (int) *x25 (x4, x16);
        x13 = (double) x10 * x11;
        if (x13 > x14)
            x13 = x14;
        else if (x13 < -x14)
            x13 = -x14;
        x8 = (int) x13;
        x13 = (double) x10 * x12;
        if (x13 > x14)
            x13 = x14;
        else if (x13 < -x14)
            x13 = -x14;
        x9 = (int) x13;
        if (x7 == 1)
            *x23 (x5, x16 *2) = (signed char) x8;
        else if (x7 == 2)
            *x24 (x5, x16 *2) = (short) x8;
        else if (x7 == 4)
            *x25 (x5, x16 *2) = (x26) x8;
        if (x7 == 1)
            *x23 (x5, x16 *2 + 1) = (signed char) x9;
        else if (x7 == 2)
            *x24 (x5, x16 *2 + 2) = (short) x9;
        else if (x7 == 4)
            *x25 (x5, x16 *2 + 4) = (x26) x9;
    }
    return x15;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="876" endline="927">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4, *x5, *x6;
    int x7, x8, x9, x10 = 0, x11 = 0, x12, x13;
    PyObject *x14;
    int x15;
    if (!x16 (x3, "s#s#i:add", &x4, &x7, &x5, &x8, &x9))
        return 0;
    if (x7 != x8) {
        x17 (x18, "Lengths should be the same");
        return 0;
    }
    if (x9 == 1)
        x12 = 0x7f;
    else if (x9 == 2)
        x12 = 0x7fff;
    else if (x9 == 4)
        x12 = 0x7fffffff;
    else {
        x17 (x18, "Size should be 1, 2 or 4");
        return 0;
    }
    x14 = x19 (x20, x7);
    if (x14 == 0)
        return 0;
    x6 = (signed char *) x21 (x14);
    for (x15 = 0; x15 < x7; x15 += x9) {
        if (x9 == 1)
            x10 = (int) *x22 (x4, x15);
        else if (x9 == 2)
            x10 = (int) *x23 (x4, x15);
        else if (x9 == 4)
            x10 = (int) *x24 (x4, x15);
        if (x9 == 1)
            x11 = (int) *x22 (x5, x15);
        else if (x9 == 2)
            x11 = (int) *x23 (x5, x15);
        else if (x9 == 4)
            x11 = (int) *x24 (x5, x15);
        x13 = x10 + x11;
        if (x13 > x12)
            x13 = x12;
        else if (x13 < -x12)
            x13 = -x12;
        else if (x9 == 4 && (x13 ^ x10) < 0 && (x13 ^ x11) < 0)
            x13 = x10 > 0 ? x12 : -x12;
        if (x9 == 1)
            *x22 (x6, x15) = (signed char) x13;
        else if (x9 == 2)
            *x23 (x6, x15) = (short) x13;
        else if (x9 == 4)
            *x24 (x6, x15) = (x25) x13;
    }
    return x14;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="929" endline="963">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4, *x5;
    int x6, x7, x8 = 0;
    PyObject *x9;
    int x10;
    int x11;
    if (!x12 (x3, "s#ii:bias", &x4, &x6, &x7, &x11))
        return 0;
    if (x7 != 1 && x7 != 2 && x7 != 4) {
        x13 (x14, "Size should be 1, 2 or 4");
        return 0;
    }
    x9 = x15 (x16, x6);
    if (x9 == 0)
        return 0;
    x5 = (signed char *) x17 (x9);
    for (x10 = 0; x10 < x6; x10 += x7) {
        if (x7 == 1)
            x8 = (int) *x18 (x4, x10);
        else if (x7 == 2)
            x8 = (int) *x19 (x4, x10);
        else if (x7 == 4)
            x8 = (int) *x20 (x4, x10);
        if (x7 == 1)
            *x18 (x5, x10) = (signed char) (x8 + x11);
        else if (x7 == 2)
            *x19 (x5, x10) = (short) (x8 + x11);
        else if (x7 == 4)
            *x20 (x5, x10) = (x21) (x8 + x11);
    }
    return x9;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="965" endline="1000">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4;
    unsigned char *x5;
    int x6, x7, x8 = 0;
    PyObject *x9;
    int x10, x11;
    if (!x12 (x3, "s#i:reverse", &x4, &x6, &x7))
        return 0;
    if (x7 != 1 && x7 != 2 && x7 != 4) {
        x13 (x14, "Size should be 1, 2 or 4");
        return 0;
    }
    x9 = x15 (x16, x6);
    if (x9 == 0)
        return 0;
    x5 = (unsigned char *) x17 (x9);
    for (x10 = 0; x10 < x6; x10 += x7) {
        if (x7 == 1)
            x8 = ((int) *x18 (x4, x10)) << 8;
        else if (x7 == 2)
            x8 = (int) *x19 (x4, x10);
        else if (x7 == 4)
            x8 = ((int) *x20 (x4, x10)) >> 16;
        x11 = x6 - x10 - x7;
        if (x7 == 1)
            *x18 (x5, x11) = (signed char) (x8 >> 8);
        else if (x7 == 2)
            *x19 (x5, x11) = (short) (x8);
        else if (x7 == 4)
            *x20 (x5, x11) = (x21) (x8 << 16);
    }
    return x9;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="1002" endline="1036">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4;
    unsigned char *x5;
    int x6, x7, x8, x9 = 0;
    PyObject *x10;
    int x11, x12;
    if (!x13 (x3, "s#ii:lin2lin", &x4, &x6, &x7, &x8))
        return 0;
    if ((x7 != 1 && x7 != 2 && x7 != 4) || (x8 != 1 && x8 != 2 && x8 != 4)) {
        x14 (x15, "Size should be 1, 2 or 4");
        return 0;
    }
    x10 = x16 (x17, (x6 / x7) * x8);
    if (x10 == 0)
        return 0;
    x5 = (unsigned char *) x18 (x10);
    for (x11 = 0, x12 = 0; x11 < x6; x11 += x7, x12 += x8) {
        if (x7 == 1)
            x9 = ((int) *x19 (x4, x11)) << 8;
        else if (x7 == 2)
            x9 = (int) *x20 (x4, x11);
        else if (x7 == 4)
            x9 = ((int) *x21 (x4, x11)) >> 16;
        if (x8 == 1)
            *x19 (x5, x12) = (signed char) (x9 >> 8);
        else if (x8 == 2)
            *x20 (x5, x12) = (short) (x9);
        else if (x8 == 4)
            *x21 (x5, x12) = (x22) (x9 << 16);
    }
    return x10;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="1038" endline="1047">
static int x1 (int x2, int x3) {
    while (x3 > 0) {
        int x4 = x2 % x3;
        x2 = x3;
        x3 = x4;
    }
    return x2;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="1049" endline="1233">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    char *x4, *x5;
    int x6, x7, x8, x9, x10, x11, x12;
    int x13, x14, *x15, *x16, x17;
    PyObject *x18, *x19, *x20, *x21 = x22;
    int x23;
    x11 = 1;
    x12 = 0;
    if (!x24 (x3, "s#iiiiO|ii:ratecv", &x4, &x6, &x7, &x8, &x9, &x10, &x18, &x11, &x12))
        return x22;
    if (x7 != 1 && x7 != 2 && x7 != 4) {
        x25 (x26, "Size should be 1, 2 or 4");
        return x22;
    }
    if (x8 < 1) {
        x25 (x26, "# of channels should be >= 1");
        return x22;
    }
    x23 = x7 * x8;
    if (x23 / x8 != x7) {
        x25 (x27, "width * nchannels too big for a C int");
        return x22;
    }
    if (x11 < 1 || x12 < 0) {
        x25 (x26, "weightA should be >= 1, weightB should be >= 0");
        return x22;
    }
    if (x6 % x23 != 0) {
        x25 (x26, "not a whole number of frames");
        return x22;
    }
    if (x9 <= 0 || x10 <= 0) {
        x25 (x26, "sampling rate not > 0");
        return x22;
    }
    x14 = x28 (x9, x10);
    x9 /= x14;
    x10 /= x14;
    x15 = (int *) x29 (x8 * sizeof (int));
    x16 = (int *) x29 (x8 * sizeof (int));
    if (x15 == x22 || x16 == x22) {
        (void) x30 ();
        goto x31;
    }
    x6 /= x23;
    if (x18 == x32) {
        x14 = -x10;
        for (x13 = 0; x13 < x8; x13++)
            x15[x13] = x16[x13] = 0;
    }
    else {
        if (!x24 (x18, "iO!;audioop.ratecv: illegal state argument", &x14, &x33, &x19))
            goto x31;
        if (x34 (x19) != x8) {
            x25 (x26, "illegal state argument");
            goto x31;
        }
        for (x13 = 0; x13 < x8; x13++) {
            if (!x24 (x35 (x19, x13), "ii:ratecv", &x15[x13], &x16[x13]))
                goto x31;
        }
    }
    {
        int x36;
        int x37;
        int x38 = x6 / x9;
        x36 = (x38 + 1) * x10;
        x37 = x36 * x23;
        if (x38 + 1 < 0 || x36 / x10 != x38 + 1 || x37 / x23 != x36)
            x20 = x22;
        else
            x20 = x39 (x22, x37);
        if (x20 == x22) {
            x25 (x40, "not enough memory for output buffer");
            goto x31;
        }
    }
    x5 = x41 (x20);
    for (;;) {
        while (x14 < 0) {
            if (x6 == 0) {
                x19 = x42 (x8);
                if (x19 == x22)
                    goto x31;
                for (x13 = 0; x13 < x8; x13++)
                    x43 (x19, x13, x44 ("(ii)", x15[x13], x16[x13]));
                if (x45 ())
                    goto x31;
                x6 = (int) (x5 - x41 (x20));
                if (x6 == 0) {
                    x21 = x39 ("", 0);
                    Py_DECREF (x20);
                    x20 = x21;
                }
                else if (x46 (&x20, x6) < 0)
                    goto x31;
                x21 = x44 ("(O(iO))", x20, x14, x19);
                Py_DECREF (x19);
                Py_DECREF (x20);
                goto x31;
            }
            for (x13 = 0; x13 < x8; x13++) {
                x15[x13] = x16[x13];
                if (x7 == 1)
                    x16[x13] = ((int) *x47 (x4, 0)) << 8;
                else if (x7 == 2)
                    x16[x13] = (int) *x48 (x4, 0);
                else if (x7 == 4)
                    x16[x13] = ((int) *x49 (x4, 0)) >> 16;
                x4 += x7;
                x16[x13] = (x11 * x16[x13] + x12 * x15[x13]) / (x11 + x12);
            }
            x6--;
            x14 += x10;
        }
        while (x14 >= 0) {
            for (x13 = 0; x13 < x8; x13++) {
                x17 = (x15[x13] * x14 + x16[x13] * (x10 - x14)) / x10;
                if (x7 == 1)
                    *x47 (x5, 0) = (signed char) (x17 >> 8);
                else if (x7 == 2)
                    *x48 (x5, 0) = (short) (x17);
                else if (x7 == 4)
                    *x49 (x5, 0) = (x50) (x17 << 16);
                x5 += x7;
            }
            x14 -= x9;
        }
    }
x31 :
    if (x15 != x22)
        x51 (x15);
    if (x16 != x22)
        x51 (x16);
    return x21;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="1235" endline="1266">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4;
    unsigned char *x5;
    int x6, x7, x8 = 0;
    PyObject *x9;
    int x10;
    if (!x11 (x3, "s#i:lin2ulaw", &x4, &x6, &x7))
        return 0;
    if (x7 != 1 && x7 != 2 && x7 != 4) {
        x12 (x13, "Size should be 1, 2 or 4");
        return 0;
    }
    x9 = x14 (x15, x6 / x7);
    if (x9 == 0)
        return 0;
    x5 = (unsigned char *) x16 (x9);
    for (x10 = 0; x10 < x6; x10 += x7) {
        if (x7 == 1)
            x8 = ((int) *x17 (x4, x10)) << 8;
        else if (x7 == 2)
            x8 = (int) *x18 (x4, x10);
        else if (x7 == 4)
            x8 = ((int) *x19 (x4, x10)) >> 16;
        *x5++ = x20 (x8);
    }
    return x9;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="1268" endline="1301">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    unsigned char *x4;
    unsigned char x5;
    signed char *x6;
    int x7, x8, x9;
    PyObject *x10;
    int x11;
    if (!x12 (x3, "s#i:ulaw2lin", &x4, &x7, &x8))
        return 0;
    if (x8 != 1 && x8 != 2 && x8 != 4) {
        x13 (x14, "Size should be 1, 2 or 4");
        return 0;
    }
    x10 = x15 (x16, x7 *x8);
    if (x10 == 0)
        return 0;
    x6 = (signed char *) x17 (x10);
    for (x11 = 0; x11 < x7 * x8; x11 += x8) {
        x5 = *x4++;
        x9 = x18 (x5);
        if (x8 == 1)
            *x19 (x6, x11) = (signed char) (x9 >> 8);
        else if (x8 == 2)
            *x20 (x6, x11) = (short) (x9);
        else if (x8 == 4)
            *x21 (x6, x11) = (x22) (x9 << 16);
    }
    return x10;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="1303" endline="1334">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4;
    unsigned char *x5;
    int x6, x7, x8 = 0;
    PyObject *x9;
    int x10;
    if (!x11 (x3, "s#i:lin2alaw", &x4, &x6, &x7))
        return 0;
    if (x7 != 1 && x7 != 2 && x7 != 4) {
        x12 (x13, "Size should be 1, 2 or 4");
        return 0;
    }
    x9 = x14 (x15, x6 / x7);
    if (x9 == 0)
        return 0;
    x5 = (unsigned char *) x16 (x9);
    for (x10 = 0; x10 < x6; x10 += x7) {
        if (x7 == 1)
            x8 = ((int) *x17 (x4, x10)) << 8;
        else if (x7 == 2)
            x8 = (int) *x18 (x4, x10);
        else if (x7 == 4)
            x8 = ((int) *x19 (x4, x10)) >> 16;
        *x5++ = x20 (x8);
    }
    return x9;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="1336" endline="1369">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    unsigned char *x4;
    unsigned char x5;
    signed char *x6;
    int x7, x8, x9;
    PyObject *x10;
    int x11;
    if (!x12 (x3, "s#i:alaw2lin", &x4, &x7, &x8))
        return 0;
    if (x8 != 1 && x8 != 2 && x8 != 4) {
        x13 (x14, "Size should be 1, 2 or 4");
        return 0;
    }
    x10 = x15 (x16, x7 *x8);
    if (x10 == 0)
        return 0;
    x6 = (signed char *) x17 (x10);
    for (x11 = 0; x11 < x7 * x8; x11 += x8) {
        x5 = *x4++;
        x9 = x18 (x5);
        if (x8 == 1)
            *x19 (x6, x11) = (signed char) (x9 >> 8);
        else if (x8 == 2)
            *x20 (x6, x11) = (short) (x9);
        else if (x8 == 4)
            *x21 (x6, x11) = (x22) (x9 << 16);
    }
    return x10;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="1371" endline="1478">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4;
    signed char *x5;
    int x6, x7, x8 = 0, x9, x10, x11, x12, x13, x14, x15;
    PyObject *x16, *x17, *x18;
    int x19, x20 = 0, x21;
    if (!x22 (x3, "s#iO:lin2adpcm", &x4, &x6, &x7, &x17))
        return 0;
    if (x7 != 1 && x7 != 2 && x7 != 4) {
        x23 (x24, "Size should be 1, 2 or 4");
        return 0;
    }
    x18 = x25 (x26, x6 / (x7 * 2));
    if (x18 == 0)
        return 0;
    x5 = (signed char *) x27 (x18);
    if (x17 == x28) {
        x10 = 0;
        x9 = 7;
        x12 = 0;
    }
    else if (!x22 (x17, "ii", &x10, &x12))
        return 0;
    x9 = x29[x12];
    x21 = 1;
    for (x19 = 0; x19 < x6; x19 += x7) {
        if (x7 == 1)
            x8 = ((int) *x30 (x4, x19)) << 8;
        else if (x7 == 2)
            x8 = (int) *x31 (x4, x19);
        else if (x7 == 4)
            x8 = ((int) *x32 (x4, x19)) >> 16;
        x15 = x8 - x10;
        x13 = (x15 < 0) ? 8 : 0;
        if (x13)
            x15 = (-x15);
        x11 = 0;
        x14 = (x9 >> 3);
        if (x15 >= x9) {
            x11 = 4;
            x15 -= x9;
            x14 += x9;
        }
        x9 >>= 1;
        if (x15 >= x9) {
            x11 |= 2;
            x15 -= x9;
            x14 += x9;
        }
        x9 >>= 1;
        if (x15 >= x9) {
            x11 |= 1;
            x14 += x9;
        }
        if (x13)
            x10 -= x14;
        else
            x10 += x14;
        if (x10 > 32767)
            x10 = 32767;
        else if (x10 < -32768)
            x10 = -32768;
        x11 |= x13;
        x12 += x33[x11];
        if (x12 < 0)
            x12 = 0;
        if (x12 > 88)
            x12 = 88;
        x9 = x29[x12];
        if (x21) {
            x20 = (x11 << 4) & 0xf0;
        }
        else {
            *x5++ = (x11 & 0x0f) | x20;
        }
        x21 = !x21;
    }
    x16 = x34 ("(O(ii))", x18, x10, x12);
    Py_DECREF (x18);
    return x16;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="1480" endline="1568">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    signed char *x4;
    signed char *x5;
    int x6, x7, x8, x9, x10, x11, x12, x13;
    PyObject *x14, *x15, *x16;
    int x17, x18 = 0, x19;
    if (!x20 (x3, "s#iO:adpcm2lin", &x4, &x6, &x7, &x16))
        return 0;
    if (x7 != 1 && x7 != 2 && x7 != 4) {
        x21 (x22, "Size should be 1, 2 or 4");
        return 0;
    }
    if (x16 == x23) {
        x8 = 0;
        x9 = 7;
        x11 = 0;
    }
    else if (!x20 (x16, "ii", &x8, &x11))
        return 0;
    x15 = x24 (x25, x6 *x7 * 2);
    if (x15 == 0)
        return 0;
    x5 = (signed char *) x26 (x15);
    x9 = x27[x11];
    x19 = 0;
    for (x17 = 0; x17 < x6 * x7 * 2; x17 += x7) {
        if (x19) {
            x10 = x18 & 0xf;
        }
        else {
            x18 = *x4++;
            x10 = (x18 >> 4) & 0xf;
        }
        x19 = !x19;
        x11 += x28[x10];
        if (x11 < 0)
            x11 = 0;
        if (x11 > 88)
            x11 = 88;
        x12 = x10 & 8;
        x10 = x10 & 7;
        x13 = x9 >> 3;
        if (x10 & 4)
            x13 += x9;
        if (x10 & 2)
            x13 += x9 >> 1;
        if (x10 & 1)
            x13 += x9 >> 2;
        if (x12)
            x8 -= x13;
        else
            x8 += x13;
        if (x8 > 32767)
            x8 = 32767;
        else if (x8 < -32768)
            x8 = -32768;
        x9 = x27[x11];
        if (x7 == 1)
            *x29 (x5, x17) = (signed char) (x8 >> 8);
        else if (x7 == 2)
            *x30 (x5, x17) = (short) (x8);
        else if (x7 == 4)
            *x31 (x5, x17) = (x32) (x8 << 16);
    }
    x14 = x33 ("(O(ii))", x15, x8, x11);
    Py_DECREF (x15);
    return x14;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="1599" endline="1612">
PyMODINIT_FUNC x1 (void) {
    PyObject *x2, *x3;
    x2 = x4 ("audioop", x5);
    if (x2 == x6)
        return;
    x3 = x7 (x2);
    if (x3 == x6)
        return;
    x8 = x9 ("audioop.error", x6, x6);
    if (x8 != x6)
        x10 (x3, "error", x8);
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="26" endline="31">
static Py_complex x1 (Py_complex x2) {
    return x3 (x4 (x5 (x6 (x2, x7 (x8, x9 (x10 (x11, x7 (x2, x2))))))));
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="39" endline="47">
static Py_complex x1 (Py_complex x2) {
    Py_complex x3;
    x3 = x4 (x5);
    x3 = x6 (x7 (x3, x8 (x4 (x8 (x2, x9)), x4 (x10 (x2, x9)))));
    return x8 (x3, x3);
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="55" endline="64">
static Py_complex x1 (Py_complex x2) {
    const Py_complex x3 = x4 (x2, x2);
    const Py_complex x5 = x6 (x7 (x8, x3));
    return x9 (x10 (x11 (x12 (x5, x10 (x2)))));
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="72" endline="80">
static Py_complex x1 (Py_complex x2) {
    Py_complex x3;
    x3 = x4 (x5);
    x3 = x6 (x7 (x3, x8 (x4 (x8 (x2, x9)), x4 (x10 (x2, x9)))));
    return x8 (x3, x3);
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="88" endline="92">
static Py_complex x1 (Py_complex x2) {
    return x3 (x4, x5 (x6 (x7 (x8, x2), x9 (x8, x2))));
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="100" endline="104">
static Py_complex x1 (Py_complex x2) {
    return x3 (x4, x5 (x6 (x7 (x8, x2), x9 (x8, x2))));
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="112" endline="119">
static Py_complex x1 (Py_complex x2) {
    Py_complex x3;
    x3.x4 = x5 (x2.x4) * x6 (x2.x7);
    x3.x7 = -x8 (x2.x4) * x9 (x2.x7);
    return x3;
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="127" endline="134">
static Py_complex x1 (Py_complex x2) {
    Py_complex x3;
    x3.x4 = x5 (x2.x6) * x7 (x2.x4);
    x3.x6 = x8 (x2.x6) * x9 (x2.x4);
    return x3;
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="142" endline="150">
static Py_complex x1 (Py_complex x2) {
    Py_complex x3;
    double x4 = x5 (x2.x6);
    x3.x6 = x4 * x7 (x2.x8);
    x3.x8 = x4 * x9 (x2.x8);
    return x3;
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="158" endline="166">
static Py_complex x1 (Py_complex x2) {
    Py_complex x3;
    double x4 = x5 (x2.x6, x2.x7);
    x3.x7 = x8 (x2.x7, x2.x6);
    x3.x6 = x9 (x4);
    return x3;
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="169" endline="177">
static Py_complex x1 (Py_complex x2) {
    Py_complex x3;
    double x4 = x5 (x2.x6, x2.x7);
    x3.x7 = x8 (x2.x7, x2.x6) / x9 (10.);
    x3.x6 = x10 (x4);
    return x3;
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="186" endline="193">
static Py_complex x1 (Py_complex x2) {
    Py_complex x3;
    x3.x4 = -x2.x5;
    x3.x5 = x2.x4;
    return x3;
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="196" endline="203">
static Py_complex x1 (Py_complex x2) {
    Py_complex x3;
    x3.x4 = x5 (x2.x4) * x6 (x2.x7);
    x3.x7 = x8 (x2.x4) * x9 (x2.x7);
    return x3;
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="211" endline="218">
static Py_complex x1 (Py_complex x2) {
    Py_complex x3;
    x3.x4 = x5 (x2.x6) * x7 (x2.x4);
    x3.x6 = x8 (x2.x6) * x9 (x2.x4);
    return x3;
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="226" endline="250">
static Py_complex x1 (Py_complex x2) {
    Py_complex x3;
    double x4, x5;
    if (x2.x6 == 0.&& x2.x7 == 0.)
        x3 = x2;
    else {
        x4 = x8 (0.5 * (x9 (x2.x6) + x10 (x2.x6, x2.x7)));
        x5 = 0.5 * x2.x7 / x4;
        if (x2.x6 > 0.) {
            x3.x6 = x4;
            x3.x7 = x5;
        }
        else if (x2.x7 >= 0.) {
            x3.x6 = x5;
            x3.x7 = x4;
        }
        else {
            x3.x6 = -x5;
            x3.x7 = -x4;
        }
    }
    return x3;
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="258" endline="277">
static Py_complex x1 (Py_complex x2) {
    Py_complex x3;
    double x4, x5, x6, x7;
    double x8, x9, x10, x11;
    double x12;
    x4 = x13 (x2.x14);
    x5 = x15 (x2.x14);
    x6 = x16 (x2.x17);
    x7 = x18 (x2.x17);
    x8 = x4 * x7;
    x9 = x5 * x6;
    x10 = x5 * x7;
    x11 = -x4 * x6;
    x12 = x10 * x10 + x11 * x11;
    x3.x14 = (x8 * x10 + x9 * x11) / x12;
    x3.x17 = (x9 * x10 - x8 * x11) / x12;
    return x3;
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="285" endline="304">
static Py_complex x1 (Py_complex x2) {
    Py_complex x3;
    double x4, x5, x6, x7;
    double x8, x9, x10, x11;
    double x12;
    x4 = x13 (x2.x14);
    x5 = x15 (x2.x14);
    x6 = x16 (x2.x17);
    x7 = x18 (x2.x17);
    x8 = x5 * x6;
    x9 = x4 * x7;
    x10 = x5 * x7;
    x11 = x4 * x6;
    x12 = x10 * x10 + x11 * x11;
    x3.x17 = (x8 * x10 + x9 * x11) / x12;
    x3.x14 = (x9 * x10 - x8 * x11) / x12;
    return x3;
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="311" endline="330">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    Py_complex x4;
    Py_complex x5;
    if (!x6 (x3, "D|D", &x4, &x5))
        return x7;
    x8 = 0;
    x9 ("complex function", return 0)
    x4 = x10 (x4);
    if (x11 (x3) == 2)
        x4 = x12 (x4, x10 (x5));
    x13 (x4)
    if (x8 != 0)
        return x14 ();
    x15 (x4.x16, x4.x17);
    return x18 (x4);
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="339" endline="349">
static PyObject *x1 (void) {
    if (x2 == x3)
        x4 (x5, "math domain error");
    else if (x2 == x6)
        x4 (x7, "math range error");
    else
        x8 (x5);
    return x9;
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="351" endline="366">
static PyObject *x1 (PyObject *x2, Py_complex (*x3) (Py_complex)) {
    Py_complex x4;
    if (!x5 (x2, "D", &x4))
        return x6;
    x7 = 0;
    x8 ("complex function", return 0)
    x4 = (*x3) (x4);
    PyFPE_END_PROTECT (x4) x9 (x4.x10, x4.x11);
    if (x7 != 0)
        return x12 ();
    else
        return x13 (x4);
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="414" endline="426">
PyMODINIT_FUNC x1 (void) {
    PyObject *x2;
    x2 = x3 ("cmath", x4, x5);
    if (x2 == x6)
        return;
    x7 (x2, "pi", x8 (x9 (1.0) * 4.0));
    x7 (x2, "e", x8 (x10 (1.0)));
}
</source>
<source file="examples/python//smallPython/fcntlmodule.c.ifdefed" startline="18" endline="27">
static int x1 (PyObject *x2, int *x3) {
    int x4 = x5 (x2);
    if (x4 < 0)
        return 0;
    *x3 = x4;
    return 1;
}
</source>
<source file="examples/python//smallPython/fcntlmodule.c.ifdefed" startline="32" endline="77">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    int x4;
    int x5;
    int x6;
    int x7;
    char *x8;
    Py_ssize_t x9;
    char x10 [1024];
    if (x11 (x3, "O&is#:fcntl", x12, &x4, &x5, &x8, &x9)) {
        if (x9 > sizeof x10) {
            x13 (x14, "fcntl string arg too long");
            return x15;
        }
        x16 (x10, x8, x9);
        Py_BEGIN_ALLOW_THREADS x7 = x17 (x4, x5, x10);
        Py_END_ALLOW_THREADS
        if (x7 < 0) {
            PyErr_SetFromErrno (x18);
            return x15;
        }
        return x19 (x10, x9);
    }
    x20 ();
    x6 = 0;
    if (!x11 (x3, "O&i|i;fcntl requires a file or file descriptor," " an integer and optionally a third integer or a string", x12, &x4, &x5, &x6)) {
        return x15;
    }
    Py_BEGIN_ALLOW_THREADS x7 = x17 (x4, x5, x6);
    Py_END_ALLOW_THREADS
    if (x7 < 0) {
        PyErr_SetFromErrno (x18);
        return x15;
    }
    return x21 ((long) x7);
}
</source>
<source file="examples/python//smallPython/fcntlmodule.c.ifdefed" startline="95" endline="203">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    int x4;
    int x5;
    int x6;
    int x7;
    char *x8;
    Py_ssize_t x9;
    int x10 = 1;
    char x11 [x12 + 1];
    if (x13 (x3, "O&Iw#|i:ioctl", x14, &x4, &x5, &x8, &x9, &x10)) {
        char *x6;
        if (x10) {
            if (x9 <= x12) {
                x15 (x11, x8, x9);
                x11[x9] = '\0';
                x6 = x11;
            }
            else {
                x6 = x8;
            }
        }
        else {
            if (x9 > x12) {
                x16 (x17, "ioctl string arg too long");
                return x18;
            }
            else {
                x15 (x11, x8, x9);
                x11[x9] = '\0';
                x6 = x11;
            }
        }
        if (x11 == x6) {
            Py_BEGIN_ALLOW_THREADS x7 = x19 (x4, x5, x6);
            Py_END_ALLOW_THREADS
        }
        else {
            x7 = x19 (x4, x5, x6);
        }
        if (x10 && (x9 < x12)) {
            x15 (x8, x11, x9);
        }
        if (x7 < 0) {
            PyErr_SetFromErrno (x20);
            return x18;
        }
        if (x10) {
            return x21 (x7);
        }
        else {
            return x22 (x11, x9);
        }
    }
    x23 ();
    if (x13 (x3, "O&Is#:ioctl", x14, &x4, &x5, &x8, &x9)) {
        if (x9 > x12) {
            x16 (x17, "ioctl string arg too long");
            return x18;
        }
        x15 (x11, x8, x9);
        x11[x9] = '\0';
        Py_BEGIN_ALLOW_THREADS x7 = x19 (x4, x5, x11);
        Py_END_ALLOW_THREADS
        if (x7 < 0) {
            PyErr_SetFromErrno (x20);
            return x18;
        }
        return x22 (x11, x9);
    }
    x23 ();
    x6 = 0;
    if (!x13 (x3, "O&I|i;ioctl requires a file or file descriptor," " an integer and optionally an integer or buffer argument", x14, &x4, &x5, &x6)) {
        return x18;
    }
    Py_BEGIN_ALLOW_THREADS x7 = x19 (x4, x5, x6);
    Py_END_ALLOW_THREADS
    if (x7 < 0) {
        PyErr_SetFromErrno (x20);
        return x18;
    }
    return x21 ((long) x7);
}
</source>
<source file="examples/python//smallPython/fcntlmodule.c.ifdefed" startline="239" endline="287">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    int x4;
    int x5;
    int x6;
    if (!x7 (x3, "O&i:flock", x8, &x4, &x5))
        return x9;
    {
        struct x10 x11;
        if (x5 == x12)
            x11.x13 = x14;
        else if (x5 & x15)
            x11.x13 = x16;
        else if (x5 & x17)
            x11.x13 = x18;
        else {
            x19 (x20, "unrecognized flock argument");
            return x9;
        }
        x11.x21 = x11.x22 = x11.x23 = 0;
        Py_BEGIN_ALLOW_THREADS x6 = x24 (x4, (x5 & x25) ? x26 : x27, &x11);
        Py_END_ALLOW_THREADS
    }
    if (x6 < 0) {
        PyErr_SetFromErrno (x28);
        return x9;
    }
    Py_INCREF (x29);
    return x29;
}
</source>
<source file="examples/python//smallPython/fcntlmodule.c.ifdefed" startline="298" endline="368">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    int x4, x5, x6, x7 = 0;
    PyObject *x8 = x9, *x10 = x9;
    if (!x11 (x3, "O&i|OOi:lockf", x12, &x4, &x5, &x8, &x10, &x7))
        return x9;
    {
        struct x13 x14;
        if (x5 == x15)
            x14.x16 = x17;
        else if (x5 & x18)
            x14.x16 = x19;
        else if (x5 & x20)
            x14.x16 = x21;
        else {
            x22 (x23, "unrecognized lockf argument");
            return x9;
        }
        x14.x24 = x14.x25 = 0;
        if (x10 != x9) {
            x14.x24 = x26 (x10) ? x27 (x10) : x28 (x10);
            if (x29 ())
                return x9;
        }
        if (x8 != x9) {
            x14.x25 = x26 (x8) ? x27 (x8) : x28 (x8);
            if (x29 ())
                return x9;
        }
        x14.x30 = x7;
        Py_BEGIN_ALLOW_THREADS x6 = x31 (x4, (x5 & x32) ? x33 : x34, &x14);
        Py_END_ALLOW_THREADS
    }
    if (x6 < 0) {
        PyErr_SetFromErrno (x35);
        return x9;
    }
    Py_INCREF (x36);
    return x36;
}
</source>
<source file="examples/python//smallPython/fcntlmodule.c.ifdefed" startline="414" endline="423">
static int x1 (PyObject *x2, char *x3, long x4) {
    PyObject *x5 = x6 (x4);
    if (!x5 || x7 (x2, x3, x5) < 0)
        return -1;
    Py_DECREF (x5);
    return 0;
}
</source>
<source file="examples/python//smallPython/fcntlmodule.c.ifdefed" startline="427" endline="588">
static int x1 (PyObject *x2) {
    if (x3 (x2, "LOCK_SH", (long) x4))
        return -1;
    if (x3 (x2, "LOCK_EX", (long) x5))
        return -1;
    if (x3 (x2, "LOCK_NB", (long) x6))
        return -1;
    if (x3 (x2, "LOCK_UN", (long) x7))
        return -1;
    return 0;
}
</source>
<source file="examples/python//smallPython/fcntlmodule.c.ifdefed" startline="590" endline="603">
PyMODINIT_FUNC x1 (void) {
    PyObject *x2, *x3;
    x2 = x4 ("fcntl", x5, x6);
    if (x2 == x7)
        return;
    x3 = x8 (x2);
    x9 (x3);
}
</source>
<source file="examples/python//smallPython/fpectlmodule.c.ifdefed" startline="103" endline="110">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    x4 (x5);
    Py_INCREF (x6);
    return x6;
}
</source>
<source file="examples/python//smallPython/fpectlmodule.c.ifdefed" startline="112" endline="257">
static void x1 (Sigfunc *x2) {
    x3 ("Operation not implemented\n", x4);
}
</source>
<source file="examples/python//smallPython/fpectlmodule.c.ifdefed" startline="259" endline="277">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    x4 ("Operation not implemented\n", x5);
    Py_INCREF (x6);
    return x6;
}
</source>
<source file="examples/python//smallPython/fpectlmodule.c.ifdefed" startline="279" endline="287">
static void x1 (int x2) {
    x3 (x1);
    if (x4) {
        x5 (x6, 1);
    }
    else {
        x7 ("Unprotected floating point exception");
    }
}
</source>
<source file="examples/python//smallPython/fpectlmodule.c.ifdefed" startline="289" endline="299">
PyMODINIT_FUNC x1 (void) {
    PyObject *x2, *x3;
    x2 = x4 ("fpectl", x5);
    if (x2 == x6)
        return;
    x3 = x7 (x2);
    x8 = x9 ("fpectl.error", x6, x6);
    if (x8 != x6)
        x10 (x3, "error", x8);
}
</source>
<source file="examples/python//smallPython/fpetestmodule.c.ifdefed" startline="61" endline="99">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    double x4;
    x5 (x6, "overflow");
    x4 = x7 (1.e160);
    x8 (x4);
    x5 (x6, "\ndiv by 0");
    x4 = x9 (0.0);
    x8 (x4);
    x5 (x6, "\nnested outer");
    x4 = x10 (0, 0.0);
    x8 (x4);
    x5 (x6, "\nnested inner");
    x4 = x10 (1, 1.0);
    x8 (x4);
    x5 (x6, "\ntrailing outer");
    x4 = x10 (2, 2.0);
    x8 (x4);
    x5 (x6, "\nnested prior");
    x4 = x11 (0, 0.0);
    x8 (x4);
    x5 (x6, "\nnested interior");
    x4 = x11 (1, 1.0);
    x8 (x4);
    x5 (x6, "\nnested trailing");
    x4 = x11 (2, 2.0);
    x8 (x4);
    Py_INCREF (x12);
    return x12;
}
</source>
<source file="examples/python//smallPython/fpetestmodule.c.ifdefed" startline="101" endline="110">
static void x1 (double x2) {
    if (x2 == 3.1416) {
        x3 (x4, "\tPASS\n");
        x5 ();
    }
    else {
        x3 (x4, "\tFAIL\n");
    }
    x6 ();
}
</source>
<source file="examples/python//smallPython/fpetestmodule.c.ifdefed" startline="112" endline="130">
static double x1 (int x2, double x3) {
    double x4 = 1.0;
    x5 ("Division by zero, outer zone", return 3.1416)
    if (x2 == 0) {
        x4 = 1./ x3;
    }
    else if (x2 == 1) {
        x5 ("Division by zero, inner zone", return 3.1416)
        x4 = 1./ (1.- x3);
        x6 (x4)
    }
    else if (x2 == 2) {
        x4 = 1./ (2.- x3);
    }
    x6 (x4)
    return x4;
}
</source>
<source file="examples/python//smallPython/fpetestmodule.c.ifdefed" startline="132" endline="145">
static double x1 (int x2, double x3) {
    double x4 = 1.0;
    x5 ("Division by zero, prior error", return 3.1416)
    if (x2 == 0) {
        x4 = 1./ x3;
    }
    else if (x2 == 1) {
        x4 = x6 (x3);
    }
    else if (x2 == 2) {
        x4 = 1./ (2.- x3);
    }
    x7 (x4)
    return x4;
}
</source>
<source file="examples/python//smallPython/fpetestmodule.c.ifdefed" startline="147" endline="155">
static double x1 (double x2) {
    double x3;
    x4 ("Division by zero, nest3 error", return 3.1416)
    x3 = 1./ (1.- x2);
    x5 (x3)
    return x3;
}
</source>
<source file="examples/python//smallPython/fpetestmodule.c.ifdefed" startline="157" endline="164">
static double x1 (double x2) {
    double x3;
    x4 ("Division by zero", return 3.1416)
    x3 = 1./ x2;
    x5 (x3)
    return x3;
}
</source>
<source file="examples/python//smallPython/fpetestmodule.c.ifdefed" startline="166" endline="173">
static double x1 (double x2) {
    double x3;
    x4 ("Overflow", return 3.1416)
    x3 = x2 * x2;
    x5 (x3)
    return x3;
}
</source>
<source file="examples/python//smallPython/fpetestmodule.c.ifdefed" startline="175" endline="186">
PyMODINIT_FUNC x1 (void) {
    PyObject *x2, *x3;
    x2 = x4 ("fpetest", x5);
    if (x2 == x6)
        return;
    x3 = x7 (x2);
    x8 = x9 ("fpetest.error", x6, x6);
    if (x8 != x6)
        x10 (x3, "error", x8);
}
</source>
<source file="examples/python//smallPython/grpmodule.c.ifdefed" startline="35" endline="84">
static PyObject *x1 (struct x2 *x3) {
    int x4 = 0;
    PyObject *x5 = x6 (&x7), *x8;
    char **x9;
    if (x5 == x10)
        return x10;
    if ((x8 = x11 (0)) == x10) {
        Py_DECREF (x5);
        return x10;
    }
    for (x9 = x3->x12; *x9 != x10; x9++) {
        PyObject *x13 = x14 (*x9);
        if (x13 == x10 || x15 (x8, x13) != 0) {
            Py_XDECREF (x13);
            Py_DECREF (x8);
            Py_DECREF (x5);
            return x10;
        }
        Py_DECREF (x13);
    }
    x16 (x4 ++, x14 (x3 -> x17));
    if (x3->x18)
        x16 (x4++, x14 (x3->x18));
    else {
        x16 (x4 ++, x19);
        Py_INCREF (x19);
    }
    x16 (x4 ++, x20 ((long) x3 -> x21));
    x16 (x4 ++, x8);
    if (x22 ()) {
        Py_DECREF (x5);
        Py_DECREF (x8);
        return x10;
    }
    return x5;
}
</source>
<source file="examples/python//smallPython/grpmodule.c.ifdefed" startline="86" endline="104">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    PyObject *x4;
    unsigned int x5;
    struct x6 *x7;
    x4 = x8 (x3);
    if (!x4)
        return x9;
    x5 = x10 (x4);
    Py_DECREF (x4);
    if ((x7 = x11 (x5)) == x9) {
        x12 (x13, "getgrgid(): gid not found: %d", x5);
        return x9;
    }
    return x14 (x7);
}
</source>
<source file="examples/python//smallPython/grpmodule.c.ifdefed" startline="106" endline="126">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    PyObject *x4;
    char *x5;
    struct x6 *x7;
    x4 = x8 (x3);
    if (!x4)
        return x9;
    x5 = x10 (x4);
    if ((x7 = x11 (x5)) == x9) {
        x12 (x13, "getgrnam(): name not found: %s", x5);
        Py_DECREF (x4);
        return x9;
    }
    Py_DECREF (x4);
    return x14 (x7);
}
</source>
<source file="examples/python//smallPython/grpmodule.c.ifdefed" startline="128" endline="148">
static PyObject *x1 (PyObject *x2, PyObject *x3) {
    PyObject *x4;
    struct x5 *x6;
    if ((x4 = x7 (0)) == x8)
        return x8;
    x9 ();
    while ((x6 = x10 ()) != x8) {
        PyObject *x11 = x12 (x6);
        if (x11 == x8 || x13 (x4, x11) != 0) {
            Py_XDECREF (x11);
            Py_DECREF (x4);
            return x8;
        }
        Py_DECREF (x11);
    }
    x14 ();
    return x4;
}
</source>
<source file="examples/python//smallPython/grpmodule.c.ifdefed" startline="182" endline="194">
PyMODINIT_FUNC x1 (void) {
    PyObject *x2, *x3;
    x2 = x4 ("grp", x5, x6);
    if (x2 == x7)
        return;
    x3 = x8 (x2);
    if (!x9)
        x10 (&x11, &x12);
    x13 (x3, "struct_group", (x14 *) & x11);
    x9 = 1;
}
</source>
