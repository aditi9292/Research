<source file="examples/python//audioop.c.ifdefed" startline="53" endline="63">
static PyInt16 x (PyInt16 x, PyInt16 *x, int x) {
    int x;
    for (x = 0; x < x; x++) {
        if (x <= *x++)
            return (x);
    }
    return (x);
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="139" endline="174">
static unsigned char x (PyInt16 x) {
    PyInt16 x;
    PyInt16 x;
    unsigned char x;
    x = x >> 2;
    if (x < 0) {
        x = -x;
        x = 0x7F;
    }
    else {
        x = 0xFF;
    }
    if (x > x)
        x = x;
    x += (x >> 2);
    x = x (x, x, 8);
    if (x >= 8)
        return (unsigned char) (0x7F ^ x);
    else {
        x = (unsigned char) (x << 4) | ((x >> (x + 1)) & 0xF);
        return (x ^ x);
    }
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="236" endline="269">
static unsigned char x (PyInt16 x) {
    PyInt16 x;
    short x;
    unsigned char x;
    x = x >> 3;
    if (x >= 0) {
        x = 0xD5;
    }
    else {
        x = 0x55;
        x = -x - 1;
    }
    x = x (x, x, 8);
    if (x >= 8)
        return (unsigned char) (0x7F ^ x);
    else {
        x = (unsigned char) x << x;
        if (x < 2)
            x |= (x >> 1) & x;
        else
            x |= (x >> x) & x;
        return (x ^ x);
    }
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="298" endline="319">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x;
    int x, x, x = 0;
    int x;
    if (!x (x, "s#ii:getsample", &x, &x, &x, &x))
        return 0;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    if (x < 0 || x >= x / x) {
        x (x, "Index out of range");
        return 0;
    }
    if (x == 1)
        x = (int) *x (x, x);
    else if (x == 2)
        x = (int) *x (x, x *2);
    else if (x == 4)
        x = (int) *x (x, x *4);
    return x (x);
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="321" endline="343">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x;
    int x, x, x = 0;
    int x;
    int x = 0;
    if (!x (x, "s#i:max", &x, &x, &x))
        return 0;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    for (x = 0; x < x; x += x) {
        if (x == 1)
            x = (int) *x (x, x);
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = (int) *x (x, x);
        if (x < 0)
            x = (-x);
        if (x > x)
            x = x;
    }
    return x (x);
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="345" endline="367">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x;
    int x, x, x = 0;
    int x;
    int x = 0x7fffffff, x = -0x7fffffff;
    if (!x (x, "s#i:minmax", &x, &x, &x))
        return x;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return x;
    }
    for (x = 0; x < x; x += x) {
        if (x == 1)
            x = (int) *x (x, x);
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = (int) *x (x, x);
        if (x > x)
            x = x;
        if (x < x)
            x = x;
    }
    return x ("(ii)", x, x);
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="369" endline="394">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x;
    int x, x, x = 0;
    int x;
    double x = 0.0;
    if (!x (x, "s#i:avg", &x, &x, &x))
        return 0;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    for (x = 0; x < x; x += x) {
        if (x == 1)
            x = (int) *x (x, x);
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = (int) *x (x, x);
        x += x;
    }
    if (x == 0)
        x = 0;
    else
        x = (int) (x / (double) (x / x));
    return x (x);
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="396" endline="421">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x;
    int x, x, x = 0;
    int x;
    double x = 0.0;
    if (!x (x, "s#i:rms", &x, &x, &x))
        return 0;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    for (x = 0; x < x; x += x) {
        if (x == 1)
            x = (int) *x (x, x);
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = (int) *x (x, x);
        x += (double) x * (double) x;
    }
    if (x == 0)
        x = 0;
    else
        x = (int) x (x / (double) (x / x));
    return x (x);
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="423" endline="432">
static double x (short *x, short *x, int x) {
    int x;
    double x = 0.0;
    for (x = 0; x < x; x++) {
        x = x + (double) x[x] * (double) x[x];
    }
    return x;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="466" endline="519">
static PyObject *x (PyObject *x, PyObject *x) {
    short *x, *x;
    int x, x;
    int x, x;
    double x, x;
    double x, x, x, x, x, x;
    if (!x (x, "s#s#:findfit", &x, &x, &x, &x))
        return 0;
    if (x & 1 || x & 1) {
        x (x, "Strings should be even-sized");
        return 0;
    }
    x >>= 1;
    x >>= 1;
    if (x < x) {
        x (x, "First sample should be longer");
        return 0;
    }
    x = x (x, x, x);
    x = x (x, x, x);
    x = x (x, x, x);
    x = (x * x - x * x) / x;
    x = x;
    x = 0;
    x = 0;
    for (x = 1; x <= x - x; x++) {
        x = (double) x[x - 1];
        x = (double) x[x + x - 1];
        x = x + x * x - x * x;
        x = x (x +x, x, x);
        x = (x * x - x * x) / x;
        if (x < x) {
            x = x;
            x = x;
        }
    }
    x = x (x +x, x, x) / x;
    return x ("(if)", x, x);
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="525" endline="550">
static PyObject *x (PyObject *x, PyObject *x) {
    short *x, *x;
    int x, x;
    double x, x, x;
    if (!x (x, "s#s#:findfactor", &x, &x, &x, &x))
        return 0;
    if (x & 1 || x & 1) {
        x (x, "Strings should be even-sized");
        return 0;
    }
    if (x != x) {
        x (x, "Samples should be same size");
        return 0;
    }
    x >>= 1;
    x = x (x, x, x);
    x = x (x, x, x);
    x = x / x;
    return x (x);
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="556" endline="598">
static PyObject *x (PyObject *x, PyObject *x) {
    short *x;
    int x, x;
    int x, x;
    double x, x;
    double x, x;
    if (!x (x, "s#i:findmax", &x, &x, &x))
        return 0;
    if (x & 1) {
        x (x, "Strings should be even-sized");
        return 0;
    }
    x >>= 1;
    if (x < x) {
        x (x, "Input sample should be longer");
        return 0;
    }
    x = x (x, x, x);
    x = x;
    x = 0;
    x = 0;
    for (x = 1; x <= x - x; x++) {
        x = (double) x[x - 1];
        x = (double) x[x + x - 1];
        x = x + x * x - x * x;
        if (x > x) {
            x = x;
            x = x;
        }
    }
    return x (x);
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="600" endline="655">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x;
    int x, x, x = 0, x = 0, x = 0, x = 0;
    int x;
    double x = 0.0;
    int x, x, x, x = 0;
    if (!x (x, "s#i:avgpp", &x, &x, &x))
        return 0;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    if (x == 1)
        x = (int) *x (x, 0);
    else if (x == 2)
        x = (int) *x (x, 0);
    else if (x == 4)
        x = (int) *x (x, 0);
    if (x == 1)
        x = (int) *x (x, x);
    else if (x == 2)
        x = (int) *x (x, x);
    else if (x == 4)
        x = (int) *x (x, x);
    x = x - x;
    for (x = x; x < x; x += x) {
        if (x == 1)
            x = (int) *x (x, x);
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = (int) *x (x, x);
        x = x - x;
        if (x * x < 0) {
            if (x) {
                x = x - x;
                if (x < 0)
                    x = -x;
                x += x;
                x++;
            }
            x = 1;
            x = x;
        }
        x = x;
        if (x != 0)
            x = x;
    }
    if (x == 0)
        x = 0;
    else
        x = (int) (x / (double) x);
    return x (x);
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="657" endline="708">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x;
    int x, x, x = 0, x = 0, x = 0, x = 0;
    int x;
    int x = 0;
    int x, x, x;
    if (!x (x, "s#i:maxpp", &x, &x, &x))
        return 0;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    if (x == 1)
        x = (int) *x (x, 0);
    else if (x == 2)
        x = (int) *x (x, 0);
    else if (x == 4)
        x = (int) *x (x, 0);
    if (x == 1)
        x = (int) *x (x, x);
    else if (x == 2)
        x = (int) *x (x, x);
    else if (x == 4)
        x = (int) *x (x, x);
    x = x - x;
    for (x = x; x < x; x += x) {
        if (x == 1)
            x = (int) *x (x, x);
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = (int) *x (x, x);
        x = x - x;
        if (x * x < 0) {
            if (x) {
                x = x - x;
                if (x < 0)
                    x = -x;
                if (x > x)
                    x = x;
            }
            x = 1;
            x = x;
        }
        x = x;
        if (x != 0)
            x = x;
    }
    return x (x);
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="710" endline="735">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x;
    int x, x, x = 0;
    int x;
    int x, x;
    if (!x (x, "s#i:cross", &x, &x, &x))
        return 0;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    x = -1;
    x = 17;
    for (x = 0; x < x; x += x) {
        if (x == 1)
            x = ((int) *x (x, x)) >> 7;
        else if (x == 2)
            x = ((int) *x (x, x)) >> 15;
        else if (x == 4)
            x = ((int) *x (x, x)) >> 31;
        x = x & 1;
        if (x != x)
            x++;
        x = x;
    }
    return x (x);
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="737" endline="776">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x, *x;
    int x, x, x = 0;
    double x, x, x;
    PyObject *x;
    int x;
    if (!x (x, "s#id:mul", &x, &x, &x, &x))
        return 0;
    if (x == 1)
        x = (double) 0x7f;
    else if (x == 2)
        x = (double) 0x7fff;
    else if (x == 4)
        x = (double) 0x7fffffff;
    else {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    x = x (x, x);
    if (x == 0)
        return 0;
    x = (signed char *) x (x);
    for (x = 0; x < x; x += x) {
        if (x == 1)
            x = (int) *x (x, x);
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = (int) *x (x, x);
        x = (double) x * x;
        if (x > x)
            x = x;
        else if (x < -x)
            x = -x;
        x = (int) x;
        if (x == 1)
            *x (x, x) = (signed char) x;
        else if (x == 2)
            *x (x, x) = (short) x;
        else if (x == 4)
            *x (x, x) = (x) x;
    }
    return x;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="778" endline="821">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x, *x;
    int x, x, x = 0, x = 0;
    double x, x, x, x;
    PyObject *x;
    int x;
    if (!x (x, "s#idd:tomono", &x, &x, &x, &x, &x))
        return 0;
    if (x == 1)
        x = (double) 0x7f;
    else if (x == 2)
        x = (double) 0x7fff;
    else if (x == 4)
        x = (double) 0x7fffffff;
    else {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    x = x (x, x / 2);
    if (x == 0)
        return 0;
    x = (signed char *) x (x);
    for (x = 0; x < x; x += x * 2) {
        if (x == 1)
            x = (int) *x (x, x);
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = (int) *x (x, x);
        if (x == 1)
            x = (int) *x (x, x +1);
        else if (x == 2)
            x = (int) *x (x, x +2);
        else if (x == 4)
            x = (int) *x (x, x +4);
        x = (double) x * x + (double) x * x;
        if (x > x)
            x = x;
        else if (x < -x)
            x = -x;
        x = (int) x;
        if (x == 1)
            *x (x, x / 2) = (signed char) x;
        else if (x == 2)
            *x (x, x / 2) = (short) x;
        else if (x == 4)
            *x (x, x / 2) = (x) x;
    }
    return x;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="823" endline="874">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x, *x;
    int x, x, x, x, x = 0;
    double x, x, x, x;
    PyObject *x;
    int x;
    if (!x (x, "s#idd:tostereo", &x, &x, &x, &x, &x))
        return 0;
    if (x == 1)
        x = (double) 0x7f;
    else if (x == 2)
        x = (double) 0x7fff;
    else if (x == 4)
        x = (double) 0x7fffffff;
    else {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    x = x (x, x *2);
    if (x == 0)
        return 0;
    x = (signed char *) x (x);
    for (x = 0; x < x; x += x) {
        if (x == 1)
            x = (int) *x (x, x);
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = (int) *x (x, x);
        x = (double) x * x;
        if (x > x)
            x = x;
        else if (x < -x)
            x = -x;
        x = (int) x;
        x = (double) x * x;
        if (x > x)
            x = x;
        else if (x < -x)
            x = -x;
        x = (int) x;
        if (x == 1)
            *x (x, x *2) = (signed char) x;
        else if (x == 2)
            *x (x, x *2) = (short) x;
        else if (x == 4)
            *x (x, x *2) = (x) x;
        if (x == 1)
            *x (x, x *2 + 1) = (signed char) x;
        else if (x == 2)
            *x (x, x *2 + 2) = (short) x;
        else if (x == 4)
            *x (x, x *2 + 4) = (x) x;
    }
    return x;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="876" endline="927">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x, *x, *x;
    int x, x, x, x = 0, x = 0, x, x;
    PyObject *x;
    int x;
    if (!x (x, "s#s#i:add", &x, &x, &x, &x, &x))
        return 0;
    if (x != x) {
        x (x, "Lengths should be the same");
        return 0;
    }
    if (x == 1)
        x = 0x7f;
    else if (x == 2)
        x = 0x7fff;
    else if (x == 4)
        x = 0x7fffffff;
    else {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    x = x (x, x);
    if (x == 0)
        return 0;
    x = (signed char *) x (x);
    for (x = 0; x < x; x += x) {
        if (x == 1)
            x = (int) *x (x, x);
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = (int) *x (x, x);
        if (x == 1)
            x = (int) *x (x, x);
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = (int) *x (x, x);
        x = x + x;
        if (x > x)
            x = x;
        else if (x < -x)
            x = -x;
        else if (x == 4 && (x ^ x) < 0 && (x ^ x) < 0)
            x = x > 0 ? x : -x;
        if (x == 1)
            *x (x, x) = (signed char) x;
        else if (x == 2)
            *x (x, x) = (short) x;
        else if (x == 4)
            *x (x, x) = (x) x;
    }
    return x;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="929" endline="963">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x, *x;
    int x, x, x = 0;
    PyObject *x;
    int x;
    int x;
    if (!x (x, "s#ii:bias", &x, &x, &x, &x))
        return 0;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    x = x (x, x);
    if (x == 0)
        return 0;
    x = (signed char *) x (x);
    for (x = 0; x < x; x += x) {
        if (x == 1)
            x = (int) *x (x, x);
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = (int) *x (x, x);
        if (x == 1)
            *x (x, x) = (signed char) (x + x);
        else if (x == 2)
            *x (x, x) = (short) (x + x);
        else if (x == 4)
            *x (x, x) = (x) (x + x);
    }
    return x;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="965" endline="1000">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x;
    unsigned char *x;
    int x, x, x = 0;
    PyObject *x;
    int x, x;
    if (!x (x, "s#i:reverse", &x, &x, &x))
        return 0;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    x = x (x, x);
    if (x == 0)
        return 0;
    x = (unsigned char *) x (x);
    for (x = 0; x < x; x += x) {
        if (x == 1)
            x = ((int) *x (x, x)) << 8;
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = ((int) *x (x, x)) >> 16;
        x = x - x - x;
        if (x == 1)
            *x (x, x) = (signed char) (x >> 8);
        else if (x == 2)
            *x (x, x) = (short) (x);
        else if (x == 4)
            *x (x, x) = (x) (x << 16);
    }
    return x;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="1002" endline="1036">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x;
    unsigned char *x;
    int x, x, x, x = 0;
    PyObject *x;
    int x, x;
    if (!x (x, "s#ii:lin2lin", &x, &x, &x, &x))
        return 0;
    if ((x != 1 && x != 2 && x != 4) || (x != 1 && x != 2 && x != 4)) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    x = x (x, (x / x) * x);
    if (x == 0)
        return 0;
    x = (unsigned char *) x (x);
    for (x = 0, x = 0; x < x; x += x, x += x) {
        if (x == 1)
            x = ((int) *x (x, x)) << 8;
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = ((int) *x (x, x)) >> 16;
        if (x == 1)
            *x (x, x) = (signed char) (x >> 8);
        else if (x == 2)
            *x (x, x) = (short) (x);
        else if (x == 4)
            *x (x, x) = (x) (x << 16);
    }
    return x;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="1038" endline="1047">
static int x (int x, int x) {
    while (x > 0) {
        int x = x % x;
        x = x;
        x = x;
    }
    return x;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="1049" endline="1233">
static PyObject *x (PyObject *x, PyObject *x) {
    char *x, *x;
    int x, x, x, x, x, x, x;
    int x, x, *x, *x, x;
    PyObject *x, *x, *x, *x = x;
    int x;
    x = 1;
    x = 0;
    if (!x (x, "s#iiiiO|ii:ratecv", &x, &x, &x, &x, &x, &x, &x, &x, &x))
        return x;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return x;
    }
    if (x < 1) {
        x (x, "# of channels should be >= 1");
        return x;
    }
    x = x * x;
    if (x / x != x) {
        x (x, "width * nchannels too big for a C int");
        return x;
    }
    if (x < 1 || x < 0) {
        x (x, "weightA should be >= 1, weightB should be >= 0");
        return x;
    }
    if (x % x != 0) {
        x (x, "not a whole number of frames");
        return x;
    }
    if (x <= 0 || x <= 0) {
        x (x, "sampling rate not > 0");
        return x;
    }
    x = x (x, x);
    x /= x;
    x /= x;
    x = (int *) x (x * sizeof (int));
    x = (int *) x (x * sizeof (int));
    if (x == x || x == x) {
        (void) x ();
        goto x;
    }
    x /= x;
    if (x == x) {
        x = -x;
        for (x = 0; x < x; x++)
            x[x] = x[x] = 0;
    }
    else {
        if (!x (x, "iO!;audioop.ratecv: illegal state argument", &x, &x, &x))
            goto x;
        if (x (x) != x) {
            x (x, "illegal state argument");
            goto x;
        }
        for (x = 0; x < x; x++) {
            if (!x (x (x, x), "ii:ratecv", &x[x], &x[x]))
                goto x;
        }
    }
    {
        int x;
        int x;
        int x = x / x;
        x = (x + 1) * x;
        x = x * x;
        if (x + 1 < 0 || x / x != x + 1 || x / x != x)
            x = x;
        else
            x = x (x, x);
        if (x == x) {
            x (x, "not enough memory for output buffer");
            goto x;
        }
    }
    x = x (x);
    for (;;) {
        while (x < 0) {
            if (x == 0) {
                x = x (x);
                if (x == x)
                    goto x;
                for (x = 0; x < x; x++)
                    x (x, x, x ("(ii)", x[x], x[x]));
                if (x ())
                    goto x;
                x = (int) (x - x (x));
                if (x == 0) {
                    x = x ("", 0);
                    Py_DECREF (x);
                    x = x;
                }
                else if (x (&x, x) < 0)
                    goto x;
                x = x ("(O(iO))", x, x, x);
                Py_DECREF (x);
                Py_DECREF (x);
                goto x;
            }
            for (x = 0; x < x; x++) {
                x[x] = x[x];
                if (x == 1)
                    x[x] = ((int) *x (x, 0)) << 8;
                else if (x == 2)
                    x[x] = (int) *x (x, 0);
                else if (x == 4)
                    x[x] = ((int) *x (x, 0)) >> 16;
                x += x;
                x[x] = (x * x[x] + x * x[x]) / (x + x);
            }
            x--;
            x += x;
        }
        while (x >= 0) {
            for (x = 0; x < x; x++) {
                x = (x[x] * x + x[x] * (x - x)) / x;
                if (x == 1)
                    *x (x, 0) = (signed char) (x >> 8);
                else if (x == 2)
                    *x (x, 0) = (short) (x);
                else if (x == 4)
                    *x (x, 0) = (x) (x << 16);
                x += x;
            }
            x -= x;
        }
    }
x :
    if (x != x)
        x (x);
    if (x != x)
        x (x);
    return x;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="1235" endline="1266">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x;
    unsigned char *x;
    int x, x, x = 0;
    PyObject *x;
    int x;
    if (!x (x, "s#i:lin2ulaw", &x, &x, &x))
        return 0;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    x = x (x, x / x);
    if (x == 0)
        return 0;
    x = (unsigned char *) x (x);
    for (x = 0; x < x; x += x) {
        if (x == 1)
            x = ((int) *x (x, x)) << 8;
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = ((int) *x (x, x)) >> 16;
        *x++ = x (x);
    }
    return x;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="1268" endline="1301">
static PyObject *x (PyObject *x, PyObject *x) {
    unsigned char *x;
    unsigned char x;
    signed char *x;
    int x, x, x;
    PyObject *x;
    int x;
    if (!x (x, "s#i:ulaw2lin", &x, &x, &x))
        return 0;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    x = x (x, x *x);
    if (x == 0)
        return 0;
    x = (signed char *) x (x);
    for (x = 0; x < x * x; x += x) {
        x = *x++;
        x = x (x);
        if (x == 1)
            *x (x, x) = (signed char) (x >> 8);
        else if (x == 2)
            *x (x, x) = (short) (x);
        else if (x == 4)
            *x (x, x) = (x) (x << 16);
    }
    return x;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="1303" endline="1334">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x;
    unsigned char *x;
    int x, x, x = 0;
    PyObject *x;
    int x;
    if (!x (x, "s#i:lin2alaw", &x, &x, &x))
        return 0;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    x = x (x, x / x);
    if (x == 0)
        return 0;
    x = (unsigned char *) x (x);
    for (x = 0; x < x; x += x) {
        if (x == 1)
            x = ((int) *x (x, x)) << 8;
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = ((int) *x (x, x)) >> 16;
        *x++ = x (x);
    }
    return x;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="1336" endline="1369">
static PyObject *x (PyObject *x, PyObject *x) {
    unsigned char *x;
    unsigned char x;
    signed char *x;
    int x, x, x;
    PyObject *x;
    int x;
    if (!x (x, "s#i:alaw2lin", &x, &x, &x))
        return 0;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    x = x (x, x *x);
    if (x == 0)
        return 0;
    x = (signed char *) x (x);
    for (x = 0; x < x * x; x += x) {
        x = *x++;
        x = x (x);
        if (x == 1)
            *x (x, x) = (signed char) (x >> 8);
        else if (x == 2)
            *x (x, x) = (short) (x);
        else if (x == 4)
            *x (x, x) = (x) (x << 16);
    }
    return x;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="1371" endline="1478">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x;
    signed char *x;
    int x, x, x = 0, x, x, x, x, x, x, x;
    PyObject *x, *x, *x;
    int x, x = 0, x;
    if (!x (x, "s#iO:lin2adpcm", &x, &x, &x, &x))
        return 0;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    x = x (x, x / (x * 2));
    if (x == 0)
        return 0;
    x = (signed char *) x (x);
    if (x == x) {
        x = 0;
        x = 7;
        x = 0;
    }
    else if (!x (x, "ii", &x, &x))
        return 0;
    x = x[x];
    x = 1;
    for (x = 0; x < x; x += x) {
        if (x == 1)
            x = ((int) *x (x, x)) << 8;
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = ((int) *x (x, x)) >> 16;
        x = x - x;
        x = (x < 0) ? 8 : 0;
        if (x)
            x = (-x);
        x = 0;
        x = (x >> 3);
        if (x >= x) {
            x = 4;
            x -= x;
            x += x;
        }
        x >>= 1;
        if (x >= x) {
            x |= 2;
            x -= x;
            x += x;
        }
        x >>= 1;
        if (x >= x) {
            x |= 1;
            x += x;
        }
        if (x)
            x -= x;
        else
            x += x;
        if (x > 32767)
            x = 32767;
        else if (x < -32768)
            x = -32768;
        x |= x;
        x += x[x];
        if (x < 0)
            x = 0;
        if (x > 88)
            x = 88;
        x = x[x];
        if (x) {
            x = (x << 4) & 0xf0;
        }
        else {
            *x++ = (x & 0x0f) | x;
        }
        x = !x;
    }
    x = x ("(O(ii))", x, x, x);
    Py_DECREF (x);
    return x;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="1480" endline="1568">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x;
    signed char *x;
    int x, x, x, x, x, x, x, x;
    PyObject *x, *x, *x;
    int x, x = 0, x;
    if (!x (x, "s#iO:adpcm2lin", &x, &x, &x, &x))
        return 0;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    if (x == x) {
        x = 0;
        x = 7;
        x = 0;
    }
    else if (!x (x, "ii", &x, &x))
        return 0;
    x = x (x, x *x * 2);
    if (x == 0)
        return 0;
    x = (signed char *) x (x);
    x = x[x];
    x = 0;
    for (x = 0; x < x * x * 2; x += x) {
        if (x) {
            x = x & 0xf;
        }
        else {
            x = *x++;
            x = (x >> 4) & 0xf;
        }
        x = !x;
        x += x[x];
        if (x < 0)
            x = 0;
        if (x > 88)
            x = 88;
        x = x & 8;
        x = x & 7;
        x = x >> 3;
        if (x & 4)
            x += x;
        if (x & 2)
            x += x >> 1;
        if (x & 1)
            x += x >> 2;
        if (x)
            x -= x;
        else
            x += x;
        if (x > 32767)
            x = 32767;
        else if (x < -32768)
            x = -32768;
        x = x[x];
        if (x == 1)
            *x (x, x) = (signed char) (x >> 8);
        else if (x == 2)
            *x (x, x) = (short) (x);
        else if (x == 4)
            *x (x, x) = (x) (x << 16);
    }
    x = x ("(O(ii))", x, x, x);
    Py_DECREF (x);
    return x;
}
</source>
<source file="examples/python//audioop.c.ifdefed" startline="1599" endline="1612">
PyMODINIT_FUNC x (void) {
    PyObject *x, *x;
    x = x ("audioop", x);
    if (x == x)
        return;
    x = x (x);
    if (x == x)
        return;
    x = x ("audioop.error", x, x);
    if (x != x)
        x (x, "error", x);
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="26" endline="31">
static Py_complex x (Py_complex x) {
    return x (x (x (x (x, x (x, x (x (x, x (x, x))))))));
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="39" endline="47">
static Py_complex x (Py_complex x) {
    Py_complex x;
    x = x (x);
    x = x (x (x, x (x (x (x, x)), x (x (x, x)))));
    return x (x, x);
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="55" endline="64">
static Py_complex x (Py_complex x) {
    const Py_complex x = x (x, x);
    const Py_complex x = x (x (x, x));
    return x (x (x (x (x, x (x)))));
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="72" endline="80">
static Py_complex x (Py_complex x) {
    Py_complex x;
    x = x (x);
    x = x (x (x, x (x (x (x, x)), x (x (x, x)))));
    return x (x, x);
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="88" endline="92">
static Py_complex x (Py_complex x) {
    return x (x, x (x (x (x, x), x (x, x))));
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="100" endline="104">
static Py_complex x (Py_complex x) {
    return x (x, x (x (x (x, x), x (x, x))));
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="112" endline="119">
static Py_complex x (Py_complex x) {
    Py_complex x;
    x.x = x (x.x) * x (x.x);
    x.x = -x (x.x) * x (x.x);
    return x;
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="127" endline="134">
static Py_complex x (Py_complex x) {
    Py_complex x;
    x.x = x (x.x) * x (x.x);
    x.x = x (x.x) * x (x.x);
    return x;
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="142" endline="150">
static Py_complex x (Py_complex x) {
    Py_complex x;
    double x = x (x.x);
    x.x = x * x (x.x);
    x.x = x * x (x.x);
    return x;
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="158" endline="166">
static Py_complex x (Py_complex x) {
    Py_complex x;
    double x = x (x.x, x.x);
    x.x = x (x.x, x.x);
    x.x = x (x);
    return x;
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="169" endline="177">
static Py_complex x (Py_complex x) {
    Py_complex x;
    double x = x (x.x, x.x);
    x.x = x (x.x, x.x) / x (10.);
    x.x = x (x);
    return x;
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="186" endline="193">
static Py_complex x (Py_complex x) {
    Py_complex x;
    x.x = -x.x;
    x.x = x.x;
    return x;
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="196" endline="203">
static Py_complex x (Py_complex x) {
    Py_complex x;
    x.x = x (x.x) * x (x.x);
    x.x = x (x.x) * x (x.x);
    return x;
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="211" endline="218">
static Py_complex x (Py_complex x) {
    Py_complex x;
    x.x = x (x.x) * x (x.x);
    x.x = x (x.x) * x (x.x);
    return x;
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="226" endline="250">
static Py_complex x (Py_complex x) {
    Py_complex x;
    double x, x;
    if (x.x == 0.&& x.x == 0.)
        x = x;
    else {
        x = x (0.5 * (x (x.x) + x (x.x, x.x)));
        x = 0.5 * x.x / x;
        if (x.x > 0.) {
            x.x = x;
            x.x = x;
        }
        else if (x.x >= 0.) {
            x.x = x;
            x.x = x;
        }
        else {
            x.x = -x;
            x.x = -x;
        }
    }
    return x;
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="258" endline="277">
static Py_complex x (Py_complex x) {
    Py_complex x;
    double x, x, x, x;
    double x, x, x, x;
    double x;
    x = x (x.x);
    x = x (x.x);
    x = x (x.x);
    x = x (x.x);
    x = x * x;
    x = x * x;
    x = x * x;
    x = -x * x;
    x = x * x + x * x;
    x.x = (x * x + x * x) / x;
    x.x = (x * x - x * x) / x;
    return x;
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="285" endline="304">
static Py_complex x (Py_complex x) {
    Py_complex x;
    double x, x, x, x;
    double x, x, x, x;
    double x;
    x = x (x.x);
    x = x (x.x);
    x = x (x.x);
    x = x (x.x);
    x = x * x;
    x = x * x;
    x = x * x;
    x = x * x;
    x = x * x + x * x;
    x.x = (x * x + x * x) / x;
    x.x = (x * x - x * x) / x;
    return x;
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="311" endline="330">
static PyObject *x (PyObject *x, PyObject *x) {
    Py_complex x;
    Py_complex x;
    if (!x (x, "D|D", &x, &x))
        return x;
    x = 0;
    x ("complex function", return 0)
    x = x (x);
    if (x (x) == 2)
        x = x (x, x (x));
    x (x)
    if (x != 0)
        return x ();
    x (x.x, x.x);
    return x (x);
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="339" endline="349">
static PyObject *x (void) {
    if (x == x)
        x (x, "math domain error");
    else if (x == x)
        x (x, "math range error");
    else
        x (x);
    return x;
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="351" endline="366">
static PyObject *x (PyObject *x, Py_complex (*x) (Py_complex)) {
    Py_complex x;
    if (!x (x, "D", &x))
        return x;
    x = 0;
    x ("complex function", return 0)
    x = (*x) (x);
    PyFPE_END_PROTECT (x) x (x.x, x.x);
    if (x != 0)
        return x ();
    else
        return x (x);
}
</source>
<source file="examples/python//cmathmodule.c.ifdefed" startline="414" endline="426">
PyMODINIT_FUNC x (void) {
    PyObject *x;
    x = x ("cmath", x, x);
    if (x == x)
        return;
    x (x, "pi", x (x (1.0) * 4.0));
    x (x, "e", x (x (1.0)));
}
</source>
<source file="examples/python//fcntlmodule.c.ifdefed" startline="18" endline="27">
static int x (PyObject *x, int *x) {
    int x = x (x);
    if (x < 0)
        return 0;
    *x = x;
    return 1;
}
</source>
<source file="examples/python//fcntlmodule.c.ifdefed" startline="32" endline="77">
static PyObject *x (PyObject *x, PyObject *x) {
    int x;
    int x;
    int x;
    int x;
    char *x;
    Py_ssize_t x;
    char x [1024];
    if (x (x, "O&is#:fcntl", x, &x, &x, &x, &x)) {
        if (x > sizeof x) {
            x (x, "fcntl string arg too long");
            return x;
        }
        x (x, x, x);
        Py_BEGIN_ALLOW_THREADS x = x (x, x, x);
        Py_END_ALLOW_THREADS
        if (x < 0) {
            PyErr_SetFromErrno (x);
            return x;
        }
        return x (x, x);
    }
    x ();
    x = 0;
    if (!x (x, "O&i|i;fcntl requires a file or file descriptor," " an integer and optionally a third integer or a string", x, &x, &x, &x)) {
        return x;
    }
    Py_BEGIN_ALLOW_THREADS x = x (x, x, x);
    Py_END_ALLOW_THREADS
    if (x < 0) {
        PyErr_SetFromErrno (x);
        return x;
    }
    return x ((long) x);
}
</source>
<source file="examples/python//fcntlmodule.c.ifdefed" startline="95" endline="203">
static PyObject *x (PyObject *x, PyObject *x) {
    int x;
    int x;
    int x;
    int x;
    char *x;
    Py_ssize_t x;
    int x = 1;
    char x [x + 1];
    if (x (x, "O&Iw#|i:ioctl", x, &x, &x, &x, &x, &x)) {
        char *x;
        if (x) {
            if (x <= x) {
                x (x, x, x);
                x[x] = '\0';
                x = x;
            }
            else {
                x = x;
            }
        }
        else {
            if (x > x) {
                x (x, "ioctl string arg too long");
                return x;
            }
            else {
                x (x, x, x);
                x[x] = '\0';
                x = x;
            }
        }
        if (x == x) {
            Py_BEGIN_ALLOW_THREADS x = x (x, x, x);
            Py_END_ALLOW_THREADS
        }
        else {
            x = x (x, x, x);
        }
        if (x && (x < x)) {
            x (x, x, x);
        }
        if (x < 0) {
            PyErr_SetFromErrno (x);
            return x;
        }
        if (x) {
            return x (x);
        }
        else {
            return x (x, x);
        }
    }
    x ();
    if (x (x, "O&Is#:ioctl", x, &x, &x, &x, &x)) {
        if (x > x) {
            x (x, "ioctl string arg too long");
            return x;
        }
        x (x, x, x);
        x[x] = '\0';
        Py_BEGIN_ALLOW_THREADS x = x (x, x, x);
        Py_END_ALLOW_THREADS
        if (x < 0) {
            PyErr_SetFromErrno (x);
            return x;
        }
        return x (x, x);
    }
    x ();
    x = 0;
    if (!x (x, "O&I|i;ioctl requires a file or file descriptor," " an integer and optionally an integer or buffer argument", x, &x, &x, &x)) {
        return x;
    }
    Py_BEGIN_ALLOW_THREADS x = x (x, x, x);
    Py_END_ALLOW_THREADS
    if (x < 0) {
        PyErr_SetFromErrno (x);
        return x;
    }
    return x ((long) x);
}
</source>
<source file="examples/python//fcntlmodule.c.ifdefed" startline="239" endline="287">
static PyObject *x (PyObject *x, PyObject *x) {
    int x;
    int x;
    int x;
    if (!x (x, "O&i:flock", x, &x, &x))
        return x;
    {
        struct x x;
        if (x == x)
            x.x = x;
        else if (x & x)
            x.x = x;
        else if (x & x)
            x.x = x;
        else {
            x (x, "unrecognized flock argument");
            return x;
        }
        x.x = x.x = x.x = 0;
        Py_BEGIN_ALLOW_THREADS x = x (x, (x & x) ? x : x, &x);
        Py_END_ALLOW_THREADS
    }
    if (x < 0) {
        PyErr_SetFromErrno (x);
        return x;
    }
    Py_INCREF (x);
    return x;
}
</source>
<source file="examples/python//fcntlmodule.c.ifdefed" startline="298" endline="368">
static PyObject *x (PyObject *x, PyObject *x) {
    int x, x, x, x = 0;
    PyObject *x = x, *x = x;
    if (!x (x, "O&i|OOi:lockf", x, &x, &x, &x, &x, &x))
        return x;
    {
        struct x x;
        if (x == x)
            x.x = x;
        else if (x & x)
            x.x = x;
        else if (x & x)
            x.x = x;
        else {
            x (x, "unrecognized lockf argument");
            return x;
        }
        x.x = x.x = 0;
        if (x != x) {
            x.x = x (x) ? x (x) : x (x);
            if (x ())
                return x;
        }
        if (x != x) {
            x.x = x (x) ? x (x) : x (x);
            if (x ())
                return x;
        }
        x.x = x;
        Py_BEGIN_ALLOW_THREADS x = x (x, (x & x) ? x : x, &x);
        Py_END_ALLOW_THREADS
    }
    if (x < 0) {
        PyErr_SetFromErrno (x);
        return x;
    }
    Py_INCREF (x);
    return x;
}
</source>
<source file="examples/python//fcntlmodule.c.ifdefed" startline="414" endline="423">
static int x (PyObject *x, char *x, long x) {
    PyObject *x = x (x);
    if (!x || x (x, x, x) < 0)
        return -1;
    Py_DECREF (x);
    return 0;
}
</source>
<source file="examples/python//fcntlmodule.c.ifdefed" startline="427" endline="588">
static int x (PyObject *x) {
    if (x (x, "LOCK_SH", (long) x))
        return -1;
    if (x (x, "LOCK_EX", (long) x))
        return -1;
    if (x (x, "LOCK_NB", (long) x))
        return -1;
    if (x (x, "LOCK_UN", (long) x))
        return -1;
    return 0;
}
</source>
<source file="examples/python//fcntlmodule.c.ifdefed" startline="590" endline="603">
PyMODINIT_FUNC x (void) {
    PyObject *x, *x;
    x = x ("fcntl", x, x);
    if (x == x)
        return;
    x = x (x);
    x (x);
}
</source>
<source file="examples/python//fpectlmodule.c.ifdefed" startline="103" endline="110">
static PyObject *x (PyObject *x, PyObject *x) {
    x (x);
    Py_INCREF (x);
    return x;
}
</source>
<source file="examples/python//fpectlmodule.c.ifdefed" startline="112" endline="257">
static void x (Sigfunc *x) {
    x ("Operation not implemented\n", x);
}
</source>
<source file="examples/python//fpectlmodule.c.ifdefed" startline="259" endline="277">
static PyObject *x (PyObject *x, PyObject *x) {
    x ("Operation not implemented\n", x);
    Py_INCREF (x);
    return x;
}
</source>
<source file="examples/python//fpectlmodule.c.ifdefed" startline="279" endline="287">
static void x (int x) {
    x (x);
    if (x) {
        x (x, 1);
    }
    else {
        x ("Unprotected floating point exception");
    }
}
</source>
<source file="examples/python//fpectlmodule.c.ifdefed" startline="289" endline="299">
PyMODINIT_FUNC x (void) {
    PyObject *x, *x;
    x = x ("fpectl", x);
    if (x == x)
        return;
    x = x (x);
    x = x ("fpectl.error", x, x);
    if (x != x)
        x (x, "error", x);
}
</source>
<source file="examples/python//fpetestmodule.c.ifdefed" startline="61" endline="99">
static PyObject *x (PyObject *x, PyObject *x) {
    double x;
    x (x, "overflow");
    x = x (1.e160);
    x (x);
    x (x, "\ndiv by 0");
    x = x (0.0);
    x (x);
    x (x, "\nnested outer");
    x = x (0, 0.0);
    x (x);
    x (x, "\nnested inner");
    x = x (1, 1.0);
    x (x);
    x (x, "\ntrailing outer");
    x = x (2, 2.0);
    x (x);
    x (x, "\nnested prior");
    x = x (0, 0.0);
    x (x);
    x (x, "\nnested interior");
    x = x (1, 1.0);
    x (x);
    x (x, "\nnested trailing");
    x = x (2, 2.0);
    x (x);
    Py_INCREF (x);
    return x;
}
</source>
<source file="examples/python//fpetestmodule.c.ifdefed" startline="101" endline="110">
static void x (double x) {
    if (x == 3.1416) {
        x (x, "\tPASS\n");
        x ();
    }
    else {
        x (x, "\tFAIL\n");
    }
    x ();
}
</source>
<source file="examples/python//fpetestmodule.c.ifdefed" startline="112" endline="130">
static double x (int x, double x) {
    double x = 1.0;
    x ("Division by zero, outer zone", return 3.1416)
    if (x == 0) {
        x = 1./ x;
    }
    else if (x == 1) {
        x ("Division by zero, inner zone", return 3.1416)
        x = 1./ (1.- x);
        x (x)
    }
    else if (x == 2) {
        x = 1./ (2.- x);
    }
    x (x)
    return x;
}
</source>
<source file="examples/python//fpetestmodule.c.ifdefed" startline="132" endline="145">
static double x (int x, double x) {
    double x = 1.0;
    x ("Division by zero, prior error", return 3.1416)
    if (x == 0) {
        x = 1./ x;
    }
    else if (x == 1) {
        x = x (x);
    }
    else if (x == 2) {
        x = 1./ (2.- x);
    }
    x (x)
    return x;
}
</source>
<source file="examples/python//fpetestmodule.c.ifdefed" startline="147" endline="155">
static double x (double x) {
    double x;
    x ("Division by zero, nest3 error", return 3.1416)
    x = 1./ (1.- x);
    x (x)
    return x;
}
</source>
<source file="examples/python//fpetestmodule.c.ifdefed" startline="157" endline="164">
static double x (double x) {
    double x;
    x ("Division by zero", return 3.1416)
    x = 1./ x;
    x (x)
    return x;
}
</source>
<source file="examples/python//fpetestmodule.c.ifdefed" startline="166" endline="173">
static double x (double x) {
    double x;
    x ("Overflow", return 3.1416)
    x = x * x;
    x (x)
    return x;
}
</source>
<source file="examples/python//fpetestmodule.c.ifdefed" startline="175" endline="186">
PyMODINIT_FUNC x (void) {
    PyObject *x, *x;
    x = x ("fpetest", x);
    if (x == x)
        return;
    x = x (x);
    x = x ("fpetest.error", x, x);
    if (x != x)
        x (x, "error", x);
}
</source>
<source file="examples/python//grpmodule.c.ifdefed" startline="35" endline="84">
static PyObject *x (struct x *x) {
    int x = 0;
    PyObject *x = x (&x), *x;
    char **x;
    if (x == x)
        return x;
    if ((x = x (0)) == x) {
        Py_DECREF (x);
        return x;
    }
    for (x = x->x; *x != x; x++) {
        PyObject *x = x (*x);
        if (x == x || x (x, x) != 0) {
            Py_XDECREF (x);
            Py_DECREF (x);
            Py_DECREF (x);
            return x;
        }
        Py_DECREF (x);
    }
    x (x ++, x (x -> x));
    if (x->x)
        x (x++, x (x->x));
    else {
        x (x ++, x);
        Py_INCREF (x);
    }
    x (x ++, x ((long) x -> x));
    x (x ++, x);
    if (x ()) {
        Py_DECREF (x);
        Py_DECREF (x);
        return x;
    }
    return x;
}
</source>
<source file="examples/python//grpmodule.c.ifdefed" startline="86" endline="104">
static PyObject *x (PyObject *x, PyObject *x) {
    PyObject *x;
    unsigned int x;
    struct x *x;
    x = x (x);
    if (!x)
        return x;
    x = x (x);
    Py_DECREF (x);
    if ((x = x (x)) == x) {
        x (x, "getgrgid(): gid not found: %d", x);
        return x;
    }
    return x (x);
}
</source>
<source file="examples/python//grpmodule.c.ifdefed" startline="106" endline="126">
static PyObject *x (PyObject *x, PyObject *x) {
    PyObject *x;
    char *x;
    struct x *x;
    x = x (x);
    if (!x)
        return x;
    x = x (x);
    if ((x = x (x)) == x) {
        x (x, "getgrnam(): name not found: %s", x);
        Py_DECREF (x);
        return x;
    }
    Py_DECREF (x);
    return x (x);
}
</source>
<source file="examples/python//grpmodule.c.ifdefed" startline="128" endline="148">
static PyObject *x (PyObject *x, PyObject *x) {
    PyObject *x;
    struct x *x;
    if ((x = x (0)) == x)
        return x;
    x ();
    while ((x = x ()) != x) {
        PyObject *x = x (x);
        if (x == x || x (x, x) != 0) {
            Py_XDECREF (x);
            Py_DECREF (x);
            return x;
        }
        Py_DECREF (x);
    }
    x ();
    return x;
}
</source>
<source file="examples/python//grpmodule.c.ifdefed" startline="182" endline="194">
PyMODINIT_FUNC x (void) {
    PyObject *x, *x;
    x = x ("grp", x, x);
    if (x == x)
        return;
    x = x (x);
    if (!x)
        x (&x, &x);
    x (x, "struct_group", (x *) & x);
    x = 1;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="53" endline="63">
static PyInt16 x (PyInt16 x, PyInt16 *x, int x) {
    int x;
    for (x = 0; x < x; x++) {
        if (x <= *x++)
            return (x);
    }
    return (x);
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="139" endline="174">
static unsigned char x (PyInt16 x) {
    PyInt16 x;
    PyInt16 x;
    unsigned char x;
    x = x >> 2;
    if (x < 0) {
        x = -x;
        x = 0x7F;
    }
    else {
        x = 0xFF;
    }
    if (x > x)
        x = x;
    x += (x >> 2);
    x = x (x, x, 8);
    if (x >= 8)
        return (unsigned char) (0x7F ^ x);
    else {
        x = (unsigned char) (x << 4) | ((x >> (x + 1)) & 0xF);
        return (x ^ x);
    }
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="236" endline="269">
static unsigned char x (PyInt16 x) {
    PyInt16 x;
    short x;
    unsigned char x;
    x = x >> 3;
    if (x >= 0) {
        x = 0xD5;
    }
    else {
        x = 0x55;
        x = -x - 1;
    }
    x = x (x, x, 8);
    if (x >= 8)
        return (unsigned char) (0x7F ^ x);
    else {
        x = (unsigned char) x << x;
        if (x < 2)
            x |= (x >> 1) & x;
        else
            x |= (x >> x) & x;
        return (x ^ x);
    }
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="298" endline="319">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x;
    int x, x, x = 0;
    int x;
    if (!x (x, "s#ii:getsample", &x, &x, &x, &x))
        return 0;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    if (x < 0 || x >= x / x) {
        x (x, "Index out of range");
        return 0;
    }
    if (x == 1)
        x = (int) *x (x, x);
    else if (x == 2)
        x = (int) *x (x, x *2);
    else if (x == 4)
        x = (int) *x (x, x *4);
    return x (x);
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="321" endline="343">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x;
    int x, x, x = 0;
    int x;
    int x = 0;
    if (!x (x, "s#i:max", &x, &x, &x))
        return 0;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    for (x = 0; x < x; x += x) {
        if (x == 1)
            x = (int) *x (x, x);
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = (int) *x (x, x);
        if (x < 0)
            x = (-x);
        if (x > x)
            x = x;
    }
    return x (x);
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="345" endline="367">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x;
    int x, x, x = 0;
    int x;
    int x = 0x7fffffff, x = -0x7fffffff;
    if (!x (x, "s#i:minmax", &x, &x, &x))
        return x;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return x;
    }
    for (x = 0; x < x; x += x) {
        if (x == 1)
            x = (int) *x (x, x);
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = (int) *x (x, x);
        if (x > x)
            x = x;
        if (x < x)
            x = x;
    }
    return x ("(ii)", x, x);
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="369" endline="394">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x;
    int x, x, x = 0;
    int x;
    double x = 0.0;
    if (!x (x, "s#i:avg", &x, &x, &x))
        return 0;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    for (x = 0; x < x; x += x) {
        if (x == 1)
            x = (int) *x (x, x);
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = (int) *x (x, x);
        x += x;
    }
    if (x == 0)
        x = 0;
    else
        x = (int) (x / (double) (x / x));
    return x (x);
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="396" endline="421">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x;
    int x, x, x = 0;
    int x;
    double x = 0.0;
    if (!x (x, "s#i:rms", &x, &x, &x))
        return 0;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    for (x = 0; x < x; x += x) {
        if (x == 1)
            x = (int) *x (x, x);
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = (int) *x (x, x);
        x += (double) x * (double) x;
    }
    if (x == 0)
        x = 0;
    else
        x = (int) x (x / (double) (x / x));
    return x (x);
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="423" endline="432">
static double x (short *x, short *x, int x) {
    int x;
    double x = 0.0;
    for (x = 0; x < x; x++) {
        x = x + (double) x[x] * (double) x[x];
    }
    return x;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="466" endline="519">
static PyObject *x (PyObject *x, PyObject *x) {
    short *x, *x;
    int x, x;
    int x, x;
    double x, x;
    double x, x, x, x, x, x;
    if (!x (x, "s#s#:findfit", &x, &x, &x, &x))
        return 0;
    if (x & 1 || x & 1) {
        x (x, "Strings should be even-sized");
        return 0;
    }
    x >>= 1;
    x >>= 1;
    if (x < x) {
        x (x, "First sample should be longer");
        return 0;
    }
    x = x (x, x, x);
    x = x (x, x, x);
    x = x (x, x, x);
    x = (x * x - x * x) / x;
    x = x;
    x = 0;
    x = 0;
    for (x = 1; x <= x - x; x++) {
        x = (double) x[x - 1];
        x = (double) x[x + x - 1];
        x = x + x * x - x * x;
        x = x (x +x, x, x);
        x = (x * x - x * x) / x;
        if (x < x) {
            x = x;
            x = x;
        }
    }
    x = x (x +x, x, x) / x;
    return x ("(if)", x, x);
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="525" endline="550">
static PyObject *x (PyObject *x, PyObject *x) {
    short *x, *x;
    int x, x;
    double x, x, x;
    if (!x (x, "s#s#:findfactor", &x, &x, &x, &x))
        return 0;
    if (x & 1 || x & 1) {
        x (x, "Strings should be even-sized");
        return 0;
    }
    if (x != x) {
        x (x, "Samples should be same size");
        return 0;
    }
    x >>= 1;
    x = x (x, x, x);
    x = x (x, x, x);
    x = x / x;
    return x (x);
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="556" endline="598">
static PyObject *x (PyObject *x, PyObject *x) {
    short *x;
    int x, x;
    int x, x;
    double x, x;
    double x, x;
    if (!x (x, "s#i:findmax", &x, &x, &x))
        return 0;
    if (x & 1) {
        x (x, "Strings should be even-sized");
        return 0;
    }
    x >>= 1;
    if (x < x) {
        x (x, "Input sample should be longer");
        return 0;
    }
    x = x (x, x, x);
    x = x;
    x = 0;
    x = 0;
    for (x = 1; x <= x - x; x++) {
        x = (double) x[x - 1];
        x = (double) x[x + x - 1];
        x = x + x * x - x * x;
        if (x > x) {
            x = x;
            x = x;
        }
    }
    return x (x);
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="600" endline="655">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x;
    int x, x, x = 0, x = 0, x = 0, x = 0;
    int x;
    double x = 0.0;
    int x, x, x, x = 0;
    if (!x (x, "s#i:avgpp", &x, &x, &x))
        return 0;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    if (x == 1)
        x = (int) *x (x, 0);
    else if (x == 2)
        x = (int) *x (x, 0);
    else if (x == 4)
        x = (int) *x (x, 0);
    if (x == 1)
        x = (int) *x (x, x);
    else if (x == 2)
        x = (int) *x (x, x);
    else if (x == 4)
        x = (int) *x (x, x);
    x = x - x;
    for (x = x; x < x; x += x) {
        if (x == 1)
            x = (int) *x (x, x);
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = (int) *x (x, x);
        x = x - x;
        if (x * x < 0) {
            if (x) {
                x = x - x;
                if (x < 0)
                    x = -x;
                x += x;
                x++;
            }
            x = 1;
            x = x;
        }
        x = x;
        if (x != 0)
            x = x;
    }
    if (x == 0)
        x = 0;
    else
        x = (int) (x / (double) x);
    return x (x);
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="657" endline="708">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x;
    int x, x, x = 0, x = 0, x = 0, x = 0;
    int x;
    int x = 0;
    int x, x, x;
    if (!x (x, "s#i:maxpp", &x, &x, &x))
        return 0;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    if (x == 1)
        x = (int) *x (x, 0);
    else if (x == 2)
        x = (int) *x (x, 0);
    else if (x == 4)
        x = (int) *x (x, 0);
    if (x == 1)
        x = (int) *x (x, x);
    else if (x == 2)
        x = (int) *x (x, x);
    else if (x == 4)
        x = (int) *x (x, x);
    x = x - x;
    for (x = x; x < x; x += x) {
        if (x == 1)
            x = (int) *x (x, x);
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = (int) *x (x, x);
        x = x - x;
        if (x * x < 0) {
            if (x) {
                x = x - x;
                if (x < 0)
                    x = -x;
                if (x > x)
                    x = x;
            }
            x = 1;
            x = x;
        }
        x = x;
        if (x != 0)
            x = x;
    }
    return x (x);
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="710" endline="735">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x;
    int x, x, x = 0;
    int x;
    int x, x;
    if (!x (x, "s#i:cross", &x, &x, &x))
        return 0;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    x = -1;
    x = 17;
    for (x = 0; x < x; x += x) {
        if (x == 1)
            x = ((int) *x (x, x)) >> 7;
        else if (x == 2)
            x = ((int) *x (x, x)) >> 15;
        else if (x == 4)
            x = ((int) *x (x, x)) >> 31;
        x = x & 1;
        if (x != x)
            x++;
        x = x;
    }
    return x (x);
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="737" endline="776">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x, *x;
    int x, x, x = 0;
    double x, x, x;
    PyObject *x;
    int x;
    if (!x (x, "s#id:mul", &x, &x, &x, &x))
        return 0;
    if (x == 1)
        x = (double) 0x7f;
    else if (x == 2)
        x = (double) 0x7fff;
    else if (x == 4)
        x = (double) 0x7fffffff;
    else {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    x = x (x, x);
    if (x == 0)
        return 0;
    x = (signed char *) x (x);
    for (x = 0; x < x; x += x) {
        if (x == 1)
            x = (int) *x (x, x);
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = (int) *x (x, x);
        x = (double) x * x;
        if (x > x)
            x = x;
        else if (x < -x)
            x = -x;
        x = (int) x;
        if (x == 1)
            *x (x, x) = (signed char) x;
        else if (x == 2)
            *x (x, x) = (short) x;
        else if (x == 4)
            *x (x, x) = (x) x;
    }
    return x;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="778" endline="821">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x, *x;
    int x, x, x = 0, x = 0;
    double x, x, x, x;
    PyObject *x;
    int x;
    if (!x (x, "s#idd:tomono", &x, &x, &x, &x, &x))
        return 0;
    if (x == 1)
        x = (double) 0x7f;
    else if (x == 2)
        x = (double) 0x7fff;
    else if (x == 4)
        x = (double) 0x7fffffff;
    else {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    x = x (x, x / 2);
    if (x == 0)
        return 0;
    x = (signed char *) x (x);
    for (x = 0; x < x; x += x * 2) {
        if (x == 1)
            x = (int) *x (x, x);
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = (int) *x (x, x);
        if (x == 1)
            x = (int) *x (x, x +1);
        else if (x == 2)
            x = (int) *x (x, x +2);
        else if (x == 4)
            x = (int) *x (x, x +4);
        x = (double) x * x + (double) x * x;
        if (x > x)
            x = x;
        else if (x < -x)
            x = -x;
        x = (int) x;
        if (x == 1)
            *x (x, x / 2) = (signed char) x;
        else if (x == 2)
            *x (x, x / 2) = (short) x;
        else if (x == 4)
            *x (x, x / 2) = (x) x;
    }
    return x;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="823" endline="874">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x, *x;
    int x, x, x, x, x = 0;
    double x, x, x, x;
    PyObject *x;
    int x;
    if (!x (x, "s#idd:tostereo", &x, &x, &x, &x, &x))
        return 0;
    if (x == 1)
        x = (double) 0x7f;
    else if (x == 2)
        x = (double) 0x7fff;
    else if (x == 4)
        x = (double) 0x7fffffff;
    else {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    x = x (x, x *2);
    if (x == 0)
        return 0;
    x = (signed char *) x (x);
    for (x = 0; x < x; x += x) {
        if (x == 1)
            x = (int) *x (x, x);
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = (int) *x (x, x);
        x = (double) x * x;
        if (x > x)
            x = x;
        else if (x < -x)
            x = -x;
        x = (int) x;
        x = (double) x * x;
        if (x > x)
            x = x;
        else if (x < -x)
            x = -x;
        x = (int) x;
        if (x == 1)
            *x (x, x *2) = (signed char) x;
        else if (x == 2)
            *x (x, x *2) = (short) x;
        else if (x == 4)
            *x (x, x *2) = (x) x;
        if (x == 1)
            *x (x, x *2 + 1) = (signed char) x;
        else if (x == 2)
            *x (x, x *2 + 2) = (short) x;
        else if (x == 4)
            *x (x, x *2 + 4) = (x) x;
    }
    return x;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="876" endline="927">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x, *x, *x;
    int x, x, x, x = 0, x = 0, x, x;
    PyObject *x;
    int x;
    if (!x (x, "s#s#i:add", &x, &x, &x, &x, &x))
        return 0;
    if (x != x) {
        x (x, "Lengths should be the same");
        return 0;
    }
    if (x == 1)
        x = 0x7f;
    else if (x == 2)
        x = 0x7fff;
    else if (x == 4)
        x = 0x7fffffff;
    else {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    x = x (x, x);
    if (x == 0)
        return 0;
    x = (signed char *) x (x);
    for (x = 0; x < x; x += x) {
        if (x == 1)
            x = (int) *x (x, x);
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = (int) *x (x, x);
        if (x == 1)
            x = (int) *x (x, x);
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = (int) *x (x, x);
        x = x + x;
        if (x > x)
            x = x;
        else if (x < -x)
            x = -x;
        else if (x == 4 && (x ^ x) < 0 && (x ^ x) < 0)
            x = x > 0 ? x : -x;
        if (x == 1)
            *x (x, x) = (signed char) x;
        else if (x == 2)
            *x (x, x) = (short) x;
        else if (x == 4)
            *x (x, x) = (x) x;
    }
    return x;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="929" endline="963">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x, *x;
    int x, x, x = 0;
    PyObject *x;
    int x;
    int x;
    if (!x (x, "s#ii:bias", &x, &x, &x, &x))
        return 0;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    x = x (x, x);
    if (x == 0)
        return 0;
    x = (signed char *) x (x);
    for (x = 0; x < x; x += x) {
        if (x == 1)
            x = (int) *x (x, x);
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = (int) *x (x, x);
        if (x == 1)
            *x (x, x) = (signed char) (x + x);
        else if (x == 2)
            *x (x, x) = (short) (x + x);
        else if (x == 4)
            *x (x, x) = (x) (x + x);
    }
    return x;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="965" endline="1000">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x;
    unsigned char *x;
    int x, x, x = 0;
    PyObject *x;
    int x, x;
    if (!x (x, "s#i:reverse", &x, &x, &x))
        return 0;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    x = x (x, x);
    if (x == 0)
        return 0;
    x = (unsigned char *) x (x);
    for (x = 0; x < x; x += x) {
        if (x == 1)
            x = ((int) *x (x, x)) << 8;
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = ((int) *x (x, x)) >> 16;
        x = x - x - x;
        if (x == 1)
            *x (x, x) = (signed char) (x >> 8);
        else if (x == 2)
            *x (x, x) = (short) (x);
        else if (x == 4)
            *x (x, x) = (x) (x << 16);
    }
    return x;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="1002" endline="1036">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x;
    unsigned char *x;
    int x, x, x, x = 0;
    PyObject *x;
    int x, x;
    if (!x (x, "s#ii:lin2lin", &x, &x, &x, &x))
        return 0;
    if ((x != 1 && x != 2 && x != 4) || (x != 1 && x != 2 && x != 4)) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    x = x (x, (x / x) * x);
    if (x == 0)
        return 0;
    x = (unsigned char *) x (x);
    for (x = 0, x = 0; x < x; x += x, x += x) {
        if (x == 1)
            x = ((int) *x (x, x)) << 8;
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = ((int) *x (x, x)) >> 16;
        if (x == 1)
            *x (x, x) = (signed char) (x >> 8);
        else if (x == 2)
            *x (x, x) = (short) (x);
        else if (x == 4)
            *x (x, x) = (x) (x << 16);
    }
    return x;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="1038" endline="1047">
static int x (int x, int x) {
    while (x > 0) {
        int x = x % x;
        x = x;
        x = x;
    }
    return x;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="1049" endline="1233">
static PyObject *x (PyObject *x, PyObject *x) {
    char *x, *x;
    int x, x, x, x, x, x, x;
    int x, x, *x, *x, x;
    PyObject *x, *x, *x, *x = x;
    int x;
    x = 1;
    x = 0;
    if (!x (x, "s#iiiiO|ii:ratecv", &x, &x, &x, &x, &x, &x, &x, &x, &x))
        return x;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return x;
    }
    if (x < 1) {
        x (x, "# of channels should be >= 1");
        return x;
    }
    x = x * x;
    if (x / x != x) {
        x (x, "width * nchannels too big for a C int");
        return x;
    }
    if (x < 1 || x < 0) {
        x (x, "weightA should be >= 1, weightB should be >= 0");
        return x;
    }
    if (x % x != 0) {
        x (x, "not a whole number of frames");
        return x;
    }
    if (x <= 0 || x <= 0) {
        x (x, "sampling rate not > 0");
        return x;
    }
    x = x (x, x);
    x /= x;
    x /= x;
    x = (int *) x (x * sizeof (int));
    x = (int *) x (x * sizeof (int));
    if (x == x || x == x) {
        (void) x ();
        goto x;
    }
    x /= x;
    if (x == x) {
        x = -x;
        for (x = 0; x < x; x++)
            x[x] = x[x] = 0;
    }
    else {
        if (!x (x, "iO!;audioop.ratecv: illegal state argument", &x, &x, &x))
            goto x;
        if (x (x) != x) {
            x (x, "illegal state argument");
            goto x;
        }
        for (x = 0; x < x; x++) {
            if (!x (x (x, x), "ii:ratecv", &x[x], &x[x]))
                goto x;
        }
    }
    {
        int x;
        int x;
        int x = x / x;
        x = (x + 1) * x;
        x = x * x;
        if (x + 1 < 0 || x / x != x + 1 || x / x != x)
            x = x;
        else
            x = x (x, x);
        if (x == x) {
            x (x, "not enough memory for output buffer");
            goto x;
        }
    }
    x = x (x);
    for (;;) {
        while (x < 0) {
            if (x == 0) {
                x = x (x);
                if (x == x)
                    goto x;
                for (x = 0; x < x; x++)
                    x (x, x, x ("(ii)", x[x], x[x]));
                if (x ())
                    goto x;
                x = (int) (x - x (x));
                if (x == 0) {
                    x = x ("", 0);
                    Py_DECREF (x);
                    x = x;
                }
                else if (x (&x, x) < 0)
                    goto x;
                x = x ("(O(iO))", x, x, x);
                Py_DECREF (x);
                Py_DECREF (x);
                goto x;
            }
            for (x = 0; x < x; x++) {
                x[x] = x[x];
                if (x == 1)
                    x[x] = ((int) *x (x, 0)) << 8;
                else if (x == 2)
                    x[x] = (int) *x (x, 0);
                else if (x == 4)
                    x[x] = ((int) *x (x, 0)) >> 16;
                x += x;
                x[x] = (x * x[x] + x * x[x]) / (x + x);
            }
            x--;
            x += x;
        }
        while (x >= 0) {
            for (x = 0; x < x; x++) {
                x = (x[x] * x + x[x] * (x - x)) / x;
                if (x == 1)
                    *x (x, 0) = (signed char) (x >> 8);
                else if (x == 2)
                    *x (x, 0) = (short) (x);
                else if (x == 4)
                    *x (x, 0) = (x) (x << 16);
                x += x;
            }
            x -= x;
        }
    }
x :
    if (x != x)
        x (x);
    if (x != x)
        x (x);
    return x;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="1235" endline="1266">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x;
    unsigned char *x;
    int x, x, x = 0;
    PyObject *x;
    int x;
    if (!x (x, "s#i:lin2ulaw", &x, &x, &x))
        return 0;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    x = x (x, x / x);
    if (x == 0)
        return 0;
    x = (unsigned char *) x (x);
    for (x = 0; x < x; x += x) {
        if (x == 1)
            x = ((int) *x (x, x)) << 8;
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = ((int) *x (x, x)) >> 16;
        *x++ = x (x);
    }
    return x;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="1268" endline="1301">
static PyObject *x (PyObject *x, PyObject *x) {
    unsigned char *x;
    unsigned char x;
    signed char *x;
    int x, x, x;
    PyObject *x;
    int x;
    if (!x (x, "s#i:ulaw2lin", &x, &x, &x))
        return 0;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    x = x (x, x *x);
    if (x == 0)
        return 0;
    x = (signed char *) x (x);
    for (x = 0; x < x * x; x += x) {
        x = *x++;
        x = x (x);
        if (x == 1)
            *x (x, x) = (signed char) (x >> 8);
        else if (x == 2)
            *x (x, x) = (short) (x);
        else if (x == 4)
            *x (x, x) = (x) (x << 16);
    }
    return x;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="1303" endline="1334">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x;
    unsigned char *x;
    int x, x, x = 0;
    PyObject *x;
    int x;
    if (!x (x, "s#i:lin2alaw", &x, &x, &x))
        return 0;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    x = x (x, x / x);
    if (x == 0)
        return 0;
    x = (unsigned char *) x (x);
    for (x = 0; x < x; x += x) {
        if (x == 1)
            x = ((int) *x (x, x)) << 8;
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = ((int) *x (x, x)) >> 16;
        *x++ = x (x);
    }
    return x;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="1336" endline="1369">
static PyObject *x (PyObject *x, PyObject *x) {
    unsigned char *x;
    unsigned char x;
    signed char *x;
    int x, x, x;
    PyObject *x;
    int x;
    if (!x (x, "s#i:alaw2lin", &x, &x, &x))
        return 0;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    x = x (x, x *x);
    if (x == 0)
        return 0;
    x = (signed char *) x (x);
    for (x = 0; x < x * x; x += x) {
        x = *x++;
        x = x (x);
        if (x == 1)
            *x (x, x) = (signed char) (x >> 8);
        else if (x == 2)
            *x (x, x) = (short) (x);
        else if (x == 4)
            *x (x, x) = (x) (x << 16);
    }
    return x;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="1371" endline="1478">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x;
    signed char *x;
    int x, x, x = 0, x, x, x, x, x, x, x;
    PyObject *x, *x, *x;
    int x, x = 0, x;
    if (!x (x, "s#iO:lin2adpcm", &x, &x, &x, &x))
        return 0;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    x = x (x, x / (x * 2));
    if (x == 0)
        return 0;
    x = (signed char *) x (x);
    if (x == x) {
        x = 0;
        x = 7;
        x = 0;
    }
    else if (!x (x, "ii", &x, &x))
        return 0;
    x = x[x];
    x = 1;
    for (x = 0; x < x; x += x) {
        if (x == 1)
            x = ((int) *x (x, x)) << 8;
        else if (x == 2)
            x = (int) *x (x, x);
        else if (x == 4)
            x = ((int) *x (x, x)) >> 16;
        x = x - x;
        x = (x < 0) ? 8 : 0;
        if (x)
            x = (-x);
        x = 0;
        x = (x >> 3);
        if (x >= x) {
            x = 4;
            x -= x;
            x += x;
        }
        x >>= 1;
        if (x >= x) {
            x |= 2;
            x -= x;
            x += x;
        }
        x >>= 1;
        if (x >= x) {
            x |= 1;
            x += x;
        }
        if (x)
            x -= x;
        else
            x += x;
        if (x > 32767)
            x = 32767;
        else if (x < -32768)
            x = -32768;
        x |= x;
        x += x[x];
        if (x < 0)
            x = 0;
        if (x > 88)
            x = 88;
        x = x[x];
        if (x) {
            x = (x << 4) & 0xf0;
        }
        else {
            *x++ = (x & 0x0f) | x;
        }
        x = !x;
    }
    x = x ("(O(ii))", x, x, x);
    Py_DECREF (x);
    return x;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="1480" endline="1568">
static PyObject *x (PyObject *x, PyObject *x) {
    signed char *x;
    signed char *x;
    int x, x, x, x, x, x, x, x;
    PyObject *x, *x, *x;
    int x, x = 0, x;
    if (!x (x, "s#iO:adpcm2lin", &x, &x, &x, &x))
        return 0;
    if (x != 1 && x != 2 && x != 4) {
        x (x, "Size should be 1, 2 or 4");
        return 0;
    }
    if (x == x) {
        x = 0;
        x = 7;
        x = 0;
    }
    else if (!x (x, "ii", &x, &x))
        return 0;
    x = x (x, x *x * 2);
    if (x == 0)
        return 0;
    x = (signed char *) x (x);
    x = x[x];
    x = 0;
    for (x = 0; x < x * x * 2; x += x) {
        if (x) {
            x = x & 0xf;
        }
        else {
            x = *x++;
            x = (x >> 4) & 0xf;
        }
        x = !x;
        x += x[x];
        if (x < 0)
            x = 0;
        if (x > 88)
            x = 88;
        x = x & 8;
        x = x & 7;
        x = x >> 3;
        if (x & 4)
            x += x;
        if (x & 2)
            x += x >> 1;
        if (x & 1)
            x += x >> 2;
        if (x)
            x -= x;
        else
            x += x;
        if (x > 32767)
            x = 32767;
        else if (x < -32768)
            x = -32768;
        x = x[x];
        if (x == 1)
            *x (x, x) = (signed char) (x >> 8);
        else if (x == 2)
            *x (x, x) = (short) (x);
        else if (x == 4)
            *x (x, x) = (x) (x << 16);
    }
    x = x ("(O(ii))", x, x, x);
    Py_DECREF (x);
    return x;
}
</source>
<source file="examples/python//smallPython/audioop.c.ifdefed" startline="1599" endline="1612">
PyMODINIT_FUNC x (void) {
    PyObject *x, *x;
    x = x ("audioop", x);
    if (x == x)
        return;
    x = x (x);
    if (x == x)
        return;
    x = x ("audioop.error", x, x);
    if (x != x)
        x (x, "error", x);
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="26" endline="31">
static Py_complex x (Py_complex x) {
    return x (x (x (x (x, x (x, x (x (x, x (x, x))))))));
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="39" endline="47">
static Py_complex x (Py_complex x) {
    Py_complex x;
    x = x (x);
    x = x (x (x, x (x (x (x, x)), x (x (x, x)))));
    return x (x, x);
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="55" endline="64">
static Py_complex x (Py_complex x) {
    const Py_complex x = x (x, x);
    const Py_complex x = x (x (x, x));
    return x (x (x (x (x, x (x)))));
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="72" endline="80">
static Py_complex x (Py_complex x) {
    Py_complex x;
    x = x (x);
    x = x (x (x, x (x (x (x, x)), x (x (x, x)))));
    return x (x, x);
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="88" endline="92">
static Py_complex x (Py_complex x) {
    return x (x, x (x (x (x, x), x (x, x))));
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="100" endline="104">
static Py_complex x (Py_complex x) {
    return x (x, x (x (x (x, x), x (x, x))));
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="112" endline="119">
static Py_complex x (Py_complex x) {
    Py_complex x;
    x.x = x (x.x) * x (x.x);
    x.x = -x (x.x) * x (x.x);
    return x;
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="127" endline="134">
static Py_complex x (Py_complex x) {
    Py_complex x;
    x.x = x (x.x) * x (x.x);
    x.x = x (x.x) * x (x.x);
    return x;
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="142" endline="150">
static Py_complex x (Py_complex x) {
    Py_complex x;
    double x = x (x.x);
    x.x = x * x (x.x);
    x.x = x * x (x.x);
    return x;
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="158" endline="166">
static Py_complex x (Py_complex x) {
    Py_complex x;
    double x = x (x.x, x.x);
    x.x = x (x.x, x.x);
    x.x = x (x);
    return x;
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="169" endline="177">
static Py_complex x (Py_complex x) {
    Py_complex x;
    double x = x (x.x, x.x);
    x.x = x (x.x, x.x) / x (10.);
    x.x = x (x);
    return x;
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="186" endline="193">
static Py_complex x (Py_complex x) {
    Py_complex x;
    x.x = -x.x;
    x.x = x.x;
    return x;
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="196" endline="203">
static Py_complex x (Py_complex x) {
    Py_complex x;
    x.x = x (x.x) * x (x.x);
    x.x = x (x.x) * x (x.x);
    return x;
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="211" endline="218">
static Py_complex x (Py_complex x) {
    Py_complex x;
    x.x = x (x.x) * x (x.x);
    x.x = x (x.x) * x (x.x);
    return x;
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="226" endline="250">
static Py_complex x (Py_complex x) {
    Py_complex x;
    double x, x;
    if (x.x == 0.&& x.x == 0.)
        x = x;
    else {
        x = x (0.5 * (x (x.x) + x (x.x, x.x)));
        x = 0.5 * x.x / x;
        if (x.x > 0.) {
            x.x = x;
            x.x = x;
        }
        else if (x.x >= 0.) {
            x.x = x;
            x.x = x;
        }
        else {
            x.x = -x;
            x.x = -x;
        }
    }
    return x;
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="258" endline="277">
static Py_complex x (Py_complex x) {
    Py_complex x;
    double x, x, x, x;
    double x, x, x, x;
    double x;
    x = x (x.x);
    x = x (x.x);
    x = x (x.x);
    x = x (x.x);
    x = x * x;
    x = x * x;
    x = x * x;
    x = -x * x;
    x = x * x + x * x;
    x.x = (x * x + x * x) / x;
    x.x = (x * x - x * x) / x;
    return x;
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="285" endline="304">
static Py_complex x (Py_complex x) {
    Py_complex x;
    double x, x, x, x;
    double x, x, x, x;
    double x;
    x = x (x.x);
    x = x (x.x);
    x = x (x.x);
    x = x (x.x);
    x = x * x;
    x = x * x;
    x = x * x;
    x = x * x;
    x = x * x + x * x;
    x.x = (x * x + x * x) / x;
    x.x = (x * x - x * x) / x;
    return x;
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="311" endline="330">
static PyObject *x (PyObject *x, PyObject *x) {
    Py_complex x;
    Py_complex x;
    if (!x (x, "D|D", &x, &x))
        return x;
    x = 0;
    x ("complex function", return 0)
    x = x (x);
    if (x (x) == 2)
        x = x (x, x (x));
    x (x)
    if (x != 0)
        return x ();
    x (x.x, x.x);
    return x (x);
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="339" endline="349">
static PyObject *x (void) {
    if (x == x)
        x (x, "math domain error");
    else if (x == x)
        x (x, "math range error");
    else
        x (x);
    return x;
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="351" endline="366">
static PyObject *x (PyObject *x, Py_complex (*x) (Py_complex)) {
    Py_complex x;
    if (!x (x, "D", &x))
        return x;
    x = 0;
    x ("complex function", return 0)
    x = (*x) (x);
    PyFPE_END_PROTECT (x) x (x.x, x.x);
    if (x != 0)
        return x ();
    else
        return x (x);
}
</source>
<source file="examples/python//smallPython/cmathmodule.c.ifdefed" startline="414" endline="426">
PyMODINIT_FUNC x (void) {
    PyObject *x;
    x = x ("cmath", x, x);
    if (x == x)
        return;
    x (x, "pi", x (x (1.0) * 4.0));
    x (x, "e", x (x (1.0)));
}
</source>
<source file="examples/python//smallPython/fcntlmodule.c.ifdefed" startline="18" endline="27">
static int x (PyObject *x, int *x) {
    int x = x (x);
    if (x < 0)
        return 0;
    *x = x;
    return 1;
}
</source>
<source file="examples/python//smallPython/fcntlmodule.c.ifdefed" startline="32" endline="77">
static PyObject *x (PyObject *x, PyObject *x) {
    int x;
    int x;
    int x;
    int x;
    char *x;
    Py_ssize_t x;
    char x [1024];
    if (x (x, "O&is#:fcntl", x, &x, &x, &x, &x)) {
        if (x > sizeof x) {
            x (x, "fcntl string arg too long");
            return x;
        }
        x (x, x, x);
        Py_BEGIN_ALLOW_THREADS x = x (x, x, x);
        Py_END_ALLOW_THREADS
        if (x < 0) {
            PyErr_SetFromErrno (x);
            return x;
        }
        return x (x, x);
    }
    x ();
    x = 0;
    if (!x (x, "O&i|i;fcntl requires a file or file descriptor," " an integer and optionally a third integer or a string", x, &x, &x, &x)) {
        return x;
    }
    Py_BEGIN_ALLOW_THREADS x = x (x, x, x);
    Py_END_ALLOW_THREADS
    if (x < 0) {
        PyErr_SetFromErrno (x);
        return x;
    }
    return x ((long) x);
}
</source>
<source file="examples/python//smallPython/fcntlmodule.c.ifdefed" startline="95" endline="203">
static PyObject *x (PyObject *x, PyObject *x) {
    int x;
    int x;
    int x;
    int x;
    char *x;
    Py_ssize_t x;
    int x = 1;
    char x [x + 1];
    if (x (x, "O&Iw#|i:ioctl", x, &x, &x, &x, &x, &x)) {
        char *x;
        if (x) {
            if (x <= x) {
                x (x, x, x);
                x[x] = '\0';
                x = x;
            }
            else {
                x = x;
            }
        }
        else {
            if (x > x) {
                x (x, "ioctl string arg too long");
                return x;
            }
            else {
                x (x, x, x);
                x[x] = '\0';
                x = x;
            }
        }
        if (x == x) {
            Py_BEGIN_ALLOW_THREADS x = x (x, x, x);
            Py_END_ALLOW_THREADS
        }
        else {
            x = x (x, x, x);
        }
        if (x && (x < x)) {
            x (x, x, x);
        }
        if (x < 0) {
            PyErr_SetFromErrno (x);
            return x;
        }
        if (x) {
            return x (x);
        }
        else {
            return x (x, x);
        }
    }
    x ();
    if (x (x, "O&Is#:ioctl", x, &x, &x, &x, &x)) {
        if (x > x) {
            x (x, "ioctl string arg too long");
            return x;
        }
        x (x, x, x);
        x[x] = '\0';
        Py_BEGIN_ALLOW_THREADS x = x (x, x, x);
        Py_END_ALLOW_THREADS
        if (x < 0) {
            PyErr_SetFromErrno (x);
            return x;
        }
        return x (x, x);
    }
    x ();
    x = 0;
    if (!x (x, "O&I|i;ioctl requires a file or file descriptor," " an integer and optionally an integer or buffer argument", x, &x, &x, &x)) {
        return x;
    }
    Py_BEGIN_ALLOW_THREADS x = x (x, x, x);
    Py_END_ALLOW_THREADS
    if (x < 0) {
        PyErr_SetFromErrno (x);
        return x;
    }
    return x ((long) x);
}
</source>
<source file="examples/python//smallPython/fcntlmodule.c.ifdefed" startline="239" endline="287">
static PyObject *x (PyObject *x, PyObject *x) {
    int x;
    int x;
    int x;
    if (!x (x, "O&i:flock", x, &x, &x))
        return x;
    {
        struct x x;
        if (x == x)
            x.x = x;
        else if (x & x)
            x.x = x;
        else if (x & x)
            x.x = x;
        else {
            x (x, "unrecognized flock argument");
            return x;
        }
        x.x = x.x = x.x = 0;
        Py_BEGIN_ALLOW_THREADS x = x (x, (x & x) ? x : x, &x);
        Py_END_ALLOW_THREADS
    }
    if (x < 0) {
        PyErr_SetFromErrno (x);
        return x;
    }
    Py_INCREF (x);
    return x;
}
</source>
<source file="examples/python//smallPython/fcntlmodule.c.ifdefed" startline="298" endline="368">
static PyObject *x (PyObject *x, PyObject *x) {
    int x, x, x, x = 0;
    PyObject *x = x, *x = x;
    if (!x (x, "O&i|OOi:lockf", x, &x, &x, &x, &x, &x))
        return x;
    {
        struct x x;
        if (x == x)
            x.x = x;
        else if (x & x)
            x.x = x;
        else if (x & x)
            x.x = x;
        else {
            x (x, "unrecognized lockf argument");
            return x;
        }
        x.x = x.x = 0;
        if (x != x) {
            x.x = x (x) ? x (x) : x (x);
            if (x ())
                return x;
        }
        if (x != x) {
            x.x = x (x) ? x (x) : x (x);
            if (x ())
                return x;
        }
        x.x = x;
        Py_BEGIN_ALLOW_THREADS x = x (x, (x & x) ? x : x, &x);
        Py_END_ALLOW_THREADS
    }
    if (x < 0) {
        PyErr_SetFromErrno (x);
        return x;
    }
    Py_INCREF (x);
    return x;
}
</source>
<source file="examples/python//smallPython/fcntlmodule.c.ifdefed" startline="414" endline="423">
static int x (PyObject *x, char *x, long x) {
    PyObject *x = x (x);
    if (!x || x (x, x, x) < 0)
        return -1;
    Py_DECREF (x);
    return 0;
}
</source>
<source file="examples/python//smallPython/fcntlmodule.c.ifdefed" startline="427" endline="588">
static int x (PyObject *x) {
    if (x (x, "LOCK_SH", (long) x))
        return -1;
    if (x (x, "LOCK_EX", (long) x))
        return -1;
    if (x (x, "LOCK_NB", (long) x))
        return -1;
    if (x (x, "LOCK_UN", (long) x))
        return -1;
    return 0;
}
</source>
<source file="examples/python//smallPython/fcntlmodule.c.ifdefed" startline="590" endline="603">
PyMODINIT_FUNC x (void) {
    PyObject *x, *x;
    x = x ("fcntl", x, x);
    if (x == x)
        return;
    x = x (x);
    x (x);
}
</source>
<source file="examples/python//smallPython/fpectlmodule.c.ifdefed" startline="103" endline="110">
static PyObject *x (PyObject *x, PyObject *x) {
    x (x);
    Py_INCREF (x);
    return x;
}
</source>
<source file="examples/python//smallPython/fpectlmodule.c.ifdefed" startline="112" endline="257">
static void x (Sigfunc *x) {
    x ("Operation not implemented\n", x);
}
</source>
<source file="examples/python//smallPython/fpectlmodule.c.ifdefed" startline="259" endline="277">
static PyObject *x (PyObject *x, PyObject *x) {
    x ("Operation not implemented\n", x);
    Py_INCREF (x);
    return x;
}
</source>
<source file="examples/python//smallPython/fpectlmodule.c.ifdefed" startline="279" endline="287">
static void x (int x) {
    x (x);
    if (x) {
        x (x, 1);
    }
    else {
        x ("Unprotected floating point exception");
    }
}
</source>
<source file="examples/python//smallPython/fpectlmodule.c.ifdefed" startline="289" endline="299">
PyMODINIT_FUNC x (void) {
    PyObject *x, *x;
    x = x ("fpectl", x);
    if (x == x)
        return;
    x = x (x);
    x = x ("fpectl.error", x, x);
    if (x != x)
        x (x, "error", x);
}
</source>
<source file="examples/python//smallPython/fpetestmodule.c.ifdefed" startline="61" endline="99">
static PyObject *x (PyObject *x, PyObject *x) {
    double x;
    x (x, "overflow");
    x = x (1.e160);
    x (x);
    x (x, "\ndiv by 0");
    x = x (0.0);
    x (x);
    x (x, "\nnested outer");
    x = x (0, 0.0);
    x (x);
    x (x, "\nnested inner");
    x = x (1, 1.0);
    x (x);
    x (x, "\ntrailing outer");
    x = x (2, 2.0);
    x (x);
    x (x, "\nnested prior");
    x = x (0, 0.0);
    x (x);
    x (x, "\nnested interior");
    x = x (1, 1.0);
    x (x);
    x (x, "\nnested trailing");
    x = x (2, 2.0);
    x (x);
    Py_INCREF (x);
    return x;
}
</source>
<source file="examples/python//smallPython/fpetestmodule.c.ifdefed" startline="101" endline="110">
static void x (double x) {
    if (x == 3.1416) {
        x (x, "\tPASS\n");
        x ();
    }
    else {
        x (x, "\tFAIL\n");
    }
    x ();
}
</source>
<source file="examples/python//smallPython/fpetestmodule.c.ifdefed" startline="112" endline="130">
static double x (int x, double x) {
    double x = 1.0;
    x ("Division by zero, outer zone", return 3.1416)
    if (x == 0) {
        x = 1./ x;
    }
    else if (x == 1) {
        x ("Division by zero, inner zone", return 3.1416)
        x = 1./ (1.- x);
        x (x)
    }
    else if (x == 2) {
        x = 1./ (2.- x);
    }
    x (x)
    return x;
}
</source>
<source file="examples/python//smallPython/fpetestmodule.c.ifdefed" startline="132" endline="145">
static double x (int x, double x) {
    double x = 1.0;
    x ("Division by zero, prior error", return 3.1416)
    if (x == 0) {
        x = 1./ x;
    }
    else if (x == 1) {
        x = x (x);
    }
    else if (x == 2) {
        x = 1./ (2.- x);
    }
    x (x)
    return x;
}
</source>
<source file="examples/python//smallPython/fpetestmodule.c.ifdefed" startline="147" endline="155">
static double x (double x) {
    double x;
    x ("Division by zero, nest3 error", return 3.1416)
    x = 1./ (1.- x);
    x (x)
    return x;
}
</source>
<source file="examples/python//smallPython/fpetestmodule.c.ifdefed" startline="157" endline="164">
static double x (double x) {
    double x;
    x ("Division by zero", return 3.1416)
    x = 1./ x;
    x (x)
    return x;
}
</source>
<source file="examples/python//smallPython/fpetestmodule.c.ifdefed" startline="166" endline="173">
static double x (double x) {
    double x;
    x ("Overflow", return 3.1416)
    x = x * x;
    x (x)
    return x;
}
</source>
<source file="examples/python//smallPython/fpetestmodule.c.ifdefed" startline="175" endline="186">
PyMODINIT_FUNC x (void) {
    PyObject *x, *x;
    x = x ("fpetest", x);
    if (x == x)
        return;
    x = x (x);
    x = x ("fpetest.error", x, x);
    if (x != x)
        x (x, "error", x);
}
</source>
<source file="examples/python//smallPython/grpmodule.c.ifdefed" startline="35" endline="84">
static PyObject *x (struct x *x) {
    int x = 0;
    PyObject *x = x (&x), *x;
    char **x;
    if (x == x)
        return x;
    if ((x = x (0)) == x) {
        Py_DECREF (x);
        return x;
    }
    for (x = x->x; *x != x; x++) {
        PyObject *x = x (*x);
        if (x == x || x (x, x) != 0) {
            Py_XDECREF (x);
            Py_DECREF (x);
            Py_DECREF (x);
            return x;
        }
        Py_DECREF (x);
    }
    x (x ++, x (x -> x));
    if (x->x)
        x (x++, x (x->x));
    else {
        x (x ++, x);
        Py_INCREF (x);
    }
    x (x ++, x ((long) x -> x));
    x (x ++, x);
    if (x ()) {
        Py_DECREF (x);
        Py_DECREF (x);
        return x;
    }
    return x;
}
</source>
<source file="examples/python//smallPython/grpmodule.c.ifdefed" startline="86" endline="104">
static PyObject *x (PyObject *x, PyObject *x) {
    PyObject *x;
    unsigned int x;
    struct x *x;
    x = x (x);
    if (!x)
        return x;
    x = x (x);
    Py_DECREF (x);
    if ((x = x (x)) == x) {
        x (x, "getgrgid(): gid not found: %d", x);
        return x;
    }
    return x (x);
}
</source>
<source file="examples/python//smallPython/grpmodule.c.ifdefed" startline="106" endline="126">
static PyObject *x (PyObject *x, PyObject *x) {
    PyObject *x;
    char *x;
    struct x *x;
    x = x (x);
    if (!x)
        return x;
    x = x (x);
    if ((x = x (x)) == x) {
        x (x, "getgrnam(): name not found: %s", x);
        Py_DECREF (x);
        return x;
    }
    Py_DECREF (x);
    return x (x);
}
</source>
<source file="examples/python//smallPython/grpmodule.c.ifdefed" startline="128" endline="148">
static PyObject *x (PyObject *x, PyObject *x) {
    PyObject *x;
    struct x *x;
    if ((x = x (0)) == x)
        return x;
    x ();
    while ((x = x ()) != x) {
        PyObject *x = x (x);
        if (x == x || x (x, x) != 0) {
            Py_XDECREF (x);
            Py_DECREF (x);
            return x;
        }
        Py_DECREF (x);
    }
    x ();
    return x;
}
</source>
<source file="examples/python//smallPython/grpmodule.c.ifdefed" startline="182" endline="194">
PyMODINIT_FUNC x (void) {
    PyObject *x, *x;
    x = x ("grp", x, x);
    if (x == x)
        return;
    x = x (x);
    if (!x)
        x (&x, &x);
    x (x, "struct_group", (x *) & x);
    x = 1;
}
</source>
