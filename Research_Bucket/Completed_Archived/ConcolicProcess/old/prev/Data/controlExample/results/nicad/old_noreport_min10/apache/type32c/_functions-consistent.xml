<source file="examples/apache//smallApache/http_core.c.ifdefed" startline="47" endline="57">
static const char *x1 (x2 *x3, void *x4, const char *x5) {
    const char *x6 = x7 (x3, x8 | x9);
    if (x6 != x10) {
        return x6;
    }
    x3->x11->x12 = x13 (x14 (x5));
    return x10;
}
</source>
<source file="examples/apache//smallApache/http_core.c.ifdefed" startline="59" endline="77">
static const char *x1 (x2 *x3, void *x4, const char *x5) {
    const char *x6 = x7 (x3, x8 | x9);
    if (x6 != x10) {
        return x6;
    }
    if (!x11 (x5, "off") || !x12 (x5, "0")) {
        x3->x13->x14 = 0;
    }
    else {
        x3->x13->x14 = 1;
    }
    return x10;
}
</source>
<source file="examples/apache//smallApache/http_core.c.ifdefed" startline="79" endline="89">
static const char *x1 (x2 *x3, void *x4, const char *x5) {
    const char *x6 = x7 (x3, x8 | x9);
    if (x6 != x10) {
        return x6;
    }
    x3->x11->x12 = x13 (x5);
    return x10;
}
</source>
<source file="examples/apache//smallApache/http_core.c.ifdefed" startline="102" endline="113">
static const char *x1 (const x2 *x3) {
    if (x3->x4->x5 && (x6 (x3->x4->x5, "https") == 0))
        return "https";
    return "http";
}
</source>
<source file="examples/apache//smallApache/http_core.c.ifdefed" startline="115" endline="122">
static x1 x2 (const x3 *x4) {
    if (x4->x5->x6 && (x7 (x4->x5->x6, "https") == 0))
        return x8;
    return x9;
}
</source>
<source file="examples/apache//smallApache/http_core.c.ifdefed" startline="124" endline="170">
static int x1 (x2 *x3) {
    x4 *x5;
    x6 *x7 = x3->x7;
    if (x3->x8) {
        return x9 (x3);
    }
    x10 (x7 -> x11 == x12);
    while (x7->x11 == x12) {
        x13 (x3 -> x14, x15, x16);
        if ((x5 = x17 (x3))) {
            x3->x18 = x19;
            x13 (x3 -> x14, x20, x5);
            if (x5->x21 == x22)
                x23 (x5);
            if (x24)
                x25 (x3->x14, x5);
            if (x3->x18 != x26 || x3->x27 || x28 ()) {
                x7->x11 = x29;
            }
            else if (!x3->x30) {
                x7->x11 = x31;
            }
            x32 (x5 -> x33);
        }
        else {
            x7->x11 = x29;
        }
    }
    return x34;
}
</source>
<source file="examples/apache//smallApache/http_core.c.ifdefed" startline="172" endline="213">
static int x1 (x2 *x3) {
    x4 *x5;
    x6 *x7 = x8;
    x9 (x3 -> x10, x11, x8);
    while ((x5 = x12 (x3)) != x8) {
        x3->x13 = x14;
        x9 (x3 -> x10, x15, x5);
        if (x5->x16 == x17)
            x18 (x5);
        if (x19)
            x20 (x3->x10, x5);
        if (x3->x13 != x21 || x3->x22)
            break;
        x9 (x3 -> x10, x23, x5);
        x24 (x5 -> x25);
        if (x26 ())
            break;
        if (!x7) {
            x7 = x27 (x3->x28, &x29);
        }
        x30 (x7, x31, 1);
        x32 (x7, x3 -> x33 -> x34);
    }
    return x35;
}
</source>
<source file="examples/apache//smallApache/http_core.c.ifdefed" startline="215" endline="229">
static int x1 (x2 *x3) {
    if (!x3->x4 && !x3->x5) {
        x6 (x7, x8, x3, x3 -> x9);
        x6 (x10, x8, x3, x3 -> x9);
        x6 (x11, x8, x3, x3 -> x9);
        x6 (x12, x8, x3, x3 -> x9);
    }
    return x13;
}
</source>
<source file="examples/apache//smallApache/http_core.c.ifdefed" startline="231" endline="238">
static int x1 (x2 *x3) {
    if ((x3->x4 == x5) && x3->x6 && (x3->x6[0] == '*') && (x3->x6[1] == '\0')) {
        return x7;
    }
    return x8;
}
</source>
<source file="examples/apache//smallApache/http_core.c.ifdefed" startline="240" endline="278">
static void x1 (x2 *x3) {
    int x4 = 0;
    if (x5 (x6, &x4) == x7 && x4 == 1) {
        x8 (x9, x10, x10, x11);
    }
    else {
        x8 (x12, x10, x10, x11);
    }
    x13 (x14, x10, x10, x15);
    x13 (x16, x10, x10, x15);
    x17 (x18, x10, x10, x11);
    x19 (x20, x10, x10, x11);
    x21 (x22, x10, x10, x11);
    x23 = x24 ("HTTP_IN", x25, x10, x26);
    x27 = x28 ("HTTP_HEADER", x29, x10, x26);
    x30 = x28 ("CHUNK", x31, x10, x32);
    x33 = x28 ("HTTP_OUTERROR", x34, x10, x26);
    x35 = x28 ("BYTERANGE", x36, x10, x26);
    x37 (x3);
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="51" endline="257">
static int x1 (x2 *x3, int x4) {
    x5 x6;
    const char *x7;
    x8 *x9;
    x10 *x11;
    x12 *x13;
    x14 *x15;
    x16 *x17;
    x18 *x19;
    if (x3->x20 != x21) {
        return x22;
    }
    x13 = (x12 *) x23 (x3->x24->x25, &x26);
    if (!(x9 = x27 (x3, x13, x3->x28))) {
        return x22;
    }
    x11 = (x10 *) x23 (x3->x29, &x26);
    if (!x11) {
        x11 = x30 (x3->x31, sizeof (x10));
        x32 (x3 -> x29, & x26, x11);
    }
    x11->x9 = x9;
    x7 = x33 (x3->x34, "Authorization");
    if (x7) {
        return x22;
    }
    x6 = x35 (x3);
    if (x6 != x36) {
        if (x6 == x22) {
            if (!x4) {
                if (x3->x37) {
                    x38 (x39, x40, x41, x3 -> x24, "Adding CACHE_SAVE_SUBREQ filter for %s", x3 -> x42);
                    x43 (x44, x45, x3, x3 -> x46);
                }
                else {
                    x38 (x39, x40, x41, x3 -> x24, "Adding CACHE_SAVE filter for %s", x3 -> x42);
                    x43 (x47, x45, x3, x3 -> x46);
                }
                x38 (x39, x40, x41, x3 -> x24, "Adding CACHE_REMOVE_URL filter for %s", x3 -> x42);
                x11->x48 = x43 (x49, x11, x3, x3->x46);
            }
            else {
                if (x11->x50) {
                    x38 (x39, x40, x41, x3 -> x24, "Restoring request headers for %s", x3 -> x42);
                    x3->x34 = x11->x50;
                }
                x32 (x3 -> x29, & x26, x45);
            }
        }
        else {
            x38 (x39, x51, x6, x3 -> x24, "cache: error returned while checking for cached " "file by %s cache", x11 -> x52);
        }
        return x22;
    }
    if (x4) {
        if (x11->x50) {
            x38 (x39, x40, x41, x3 -> x24, "Restoring request headers.");
            x3->x34 = x11->x50;
        }
        x32 (x3 -> x29, & x26, x45);
    }
    x6 = x53 (x3);
    if (x6 != x36) {
        if (x4) {
            return x22;
        }
        return x6;
    }
    if (x4) {
        return x36;
    }
    x54 (x3);
    if (x3->x37) {
        x19 = x55;
    }
    else {
        x19 = x56;
    }
    x43 (x19, x45, x3, x3 -> x46);
    x17 = x3->x57;
    while (x17 && (x17->x58 != x19)) {
        x59 (x17);
        x17 = x17->x17;
    }
    x15 = x60 (x3->x31, x3->x46->x61);
    x6 = x62 (x3->x57, x15);
    if (x6 != x41) {
        if (x6 != x63) {
            x38 (x39, x51, x6, x3 -> x24, "cache: error returned while trying to return %s " "cached data", x11 -> x52);
        }
        return x6;
    }
    return x36;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="265" endline="299">
static int x1 (x2 *x3, x4 *x5) {
    x6 *x7 = x3->x7;
    x8 *x9;
    x9 = (x8 *) x10 (x7->x11, &x12);
    if (!x9) {
        x13 (x14, x15, 0, x7 -> x16, "CACHE_OUT enabled unexpectedly");
        x17 (x3);
        return x18 (x3->x19, x5);
    }
    x13 (x14, x20, x21, x7 -> x16, "cache: running CACHE_OUT filter");
    x7->x22 = x9->x23->x24->x25.x22;
    x9->x26->x27 (x9->x23, x7->x28, x5);
    x17 (x3);
    x13 (x14, x20, x21, x7 -> x16, "cache: serving %s", x7 -> x29);
    return x18 (x3->x19, x5);
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="318" endline="869">
static int x1 (x2 *x3, x4 *x5) {
    int x6 = !x7;
    x8 *x9 = x3->x9;
    x10 *x11;
    x12 *x13;
    const char *x14, *x15;
    const char *x16, *x17, *x18, *x19;
    x20 x21, x22, x23, x24;
    x25 x26;
    x27 *x28 = x29;
    char *x30;
    x31 *x32;
    x13 = (x12 *) x33 (x9->x34->x35, &x36);
    x11 = (x10 *) x33 (x9->x37, &x36);
    if (!x11) {
        x11 = x38 (x9->x39, sizeof (x10));
        x40 (x9 -> x37, & x36, x11);
    }
    x30 = x29;
    x32 = x9->x39;
    if (x11->x41) {
        return x42;
    }
    if (x11->x43) {
        x6 = x11->x44->x45 (x11->x46, x9, x5);
        if (x6 != x42) {
            x47 (x48, x49, x6, x9 -> x34, "cache: Cache provider's store_body failed!");
            x50 (x3);
        }
        return x51 (x3->x52, x5);
    }
    x16 = x53 (x9->x54, "Expires");
    if (x16 == x29) {
        x16 = x53 (x9->x55, "Expires");
    }
    if (x16 != x29) {
        if (x56 == (x21 = x57 (x16))) {
            x16 = x29;
        }
    }
    else {
        x21 = x56;
    }
    x17 = x53 (x9->x54, "Last-Modified");
    if (x17 == x29) {
        x17 = x53 (x9->x55, "Last-Modified");
    }
    if (x17 != x29) {
        x23 = x57 (x17);
        if (x23 == x56) {
            x17 = x29;
        }
    }
    else {
        x23 = x56;
    }
    x19 = x53 (x9->x54, "Etag");
    if (x19 == x29) {
        x19 = x53 (x9->x55, "Etag");
    }
    x14 = x53 (x9->x54, "Cache-Control");
    if (x14 == x29) {
        x14 = x53 (x9->x55, "Cache-Control");
    }
    if (x9->x58 != x59 && x9->x58 != x60 && x9->x58 != x61 && x9->x58 != x62 && x9->x58 != x63) {
        if (x16 != x29 || x14 != x29) {
        }
        else {
            x30 = x64 (x32, "Response status %d", x9->x58);
        }
    }
    if (x30) {
    }
    else if (x16 != x29 && x21 == x56) {
        x30 = x65 (x32, "Broken expires header: ", x16, x29);
    }
    else if (x21 != x56 && x21 < x9->x66) {
        x30 = "Expires header already expired, not cacheable";
    }
    else if (!x13->x67 && x9->x68.x69 && x16 == x29 && !x70 (x29, x14, "max-age", x29)) {
        x30 = "Query string present but no explicit expiration time";
    }
    else if (x9->x58 == x63 && !x11->x46 && !x11->x71) {
        x30 = "HTTP Status 304 Not Modified";
    }
    else if (x9->x58 == x59 && x17 == x29 && x19 == x29 && (x16 == x29) && (x13->x72 == 0)) {
        x30 = "No Last-Modified, Etag, or Expires headers";
    }
    else if (x9->x73 && !x11->x71) {
        x30 = "HTTP HEAD request";
    }
    else if (!x13->x74 && x70 (x29, x14, "no-store", x29)) {
        x30 = "Cache-Control: no-store present";
    }
    else if (!x13->x75 && x70 (x29, x14, "private", x29)) {
        x30 = "Cache-Control: private present";
    }
    else if (x53 (x9->x76, "Authorization") != x29 && !(x70 (x29, x14, "s-maxage", x29) || x70 (x29, x14, "must-revalidate", x29) || x70 (x29, x14, "public", x29))) {
        x30 = "Authorization required";
    }
    else if (x70 (x29, x53 (x9->x55, "Vary"), "*", x29)) {
        x30 = "Vary header contains '*'";
    }
    else if (x53 (x9->x77, "no-cache") != x29) {
        x30 = "environment variable 'no-cache' is set";
    }
    else if (x9->x78) {
        x30 = "r->no_cache present";
    }
    if (x30) {
        x47 (x48, x49, 0, x9 -> x34, "cache: %s not cached. Reason: %s", x9 -> x79, x30);
        x50 (x3);
        return x51 (x3->x52, x5);
    }
    x11->x43 = 1;
    x15 = x53 (x9->x54, "Content-Length");
    if (x15 == x29) {
        x15 = x53 (x9->x55, "Content-Length");
    }
    if (x15) {
        char *x80;
        if (x81 (&x26, x15, &x80, 10) || *x80 || x26 < 0) {
            x15 = x29;
        }
    }
    if (!x15) {
        x82 *x83;
        int x84 = 0;
        int x85 = 0;
        x26 = 0;
        for (x83 = x86 (x5); x83 != x87 (x5); x83 = x88 (x83)) {
            if (x89 (x83)) {
                x84 = 1;
                break;
            }
            if (x90 (x83)) {
                x85 = 1;
                continue;
            }
            if (x83->x91 == (x92) -1) {
                break;
            }
            x26 += x83->x91;
        }
        if (!x84) {
            x26 = -1;
        }
    }
    if (x11->x71) {
        if (x9->x58 == x63) {
            x11->x46 = x11->x71;
            x28 = &x11->x46->x93->x28;
            x6 = x7;
        }
        else if (!x9->x73) {
            x11->x44->x94 (x11->x71);
            x11->x71 = x29;
            x9->x76 = x11->x95;
        }
    }
    if (!x11->x46 && !x9->x73) {
        x6 = x96 (x9, x26);
        x28 = x38 (x9->x39, sizeof (x27));
        x28->x58 = x9->x58;
    }
    if (x6 != x7) {
        x50 (x3);
        return x51 (x3->x52, x5);
    }
    x47 (x48, x49, 0, x9 -> x34, "cache: Caching url: %s", x9 -> x79);
    x47 (x48, x49, 0, x9 -> x34, "cache: Removing CACHE_REMOVE_URL filter.");
    x50 (x11 -> x97);
    x18 = x53 (x9->x54, "Date");
    if (x18 == x29) {
        x18 = x53 (x9->x55, "Date");
    }
    if (x18 != x29) {
        x28->x22 = x57 (x18);
    }
    else {
        x28->x22 = x56;
    }
    x24 = x98 ();
    if (x28->x22 == x56) {
        x28->x22 = x24;
    }
    x22 = x28->x22;
    x28->x99 = x24;
    x28->x66 = x9->x66;
    if (x23 != x56 && x23 > x22) {
        x23 = x22;
        x17 = x18;
        x47 (x48, x49, 0, x9 -> x34, "cache: Last modified is in the future, " "replacing with now");
    }
    if (x21 == x56) {
        char *x100;
        if (x70 (x9->x39, x14, "max-age", &x100) && x100 != x29) {
            x101 x102;
            x103 = 0;
            x102 = x104 (x100);
            if (x103) {
                x102 = x13->x105;
            }
            else {
                x102 = x102 * x106;
            }
            if (x102 > x13->x107) {
                x102 = x13->x107;
            }
            x21 = x22 + x102;
        }
        else if ((x23 != x56) && (x23 < x22)) {
            x20 x102 = (x20) ((x22 - x23) * x13->x108);
            if (x102 > x13->x107) {
                x102 = x13->x107;
            }
            x21 = x22 + x102;
        }
        else {
            x21 = x22 + x13->x105;
        }
    }
    x28->x109 = x21;
    if (x11->x71) {
        x9->x58 = x28->x58;
        x9->x110 = x29;
        x9->x55 = x111 (x9->x39, x9->x55, x9->x54);
        x9->x55 = x112 (x9->x39, x9->x55, x9->x34);
        x113 (x9 -> x54);
        x114 (x11 -> x46, x9, 1);
    }
    x6 = x11->x44->x115 (x11->x46, x9, x28);
    if (x11->x71) {
        x4 *x116;
        x82 *x117;
        int x58;
        x116 = x118 (x9->x39, x9->x119->x120);
        x9->x76 = x11->x95;
        x58 = x121 (x9);
        if (x58 != x7) {
            x9->x58 = x58;
            x117 = x122 (x116->x120);
            x123 (x116, x117);
        }
        else {
            x11->x44->x124 (x11->x46, x9->x39, x116);
        }
        x11->x41 = 1;
        if (x6 != x42) {
            x47 (x48, x49, x6, x9 -> x34, "cache: updating headers with store_headers failed. " "Removing cached url.");
            x6 = x11->x44->x125 (x11->x71, x9->x39);
            if (x6 != x7) {
                x47 (x48, x49, x6, x9 -> x34, "cache: attempt to remove url from cache unsuccessful.");
            }
        }
        return x51 (x3->x52, x116);
    }
    if (x6 != x42) {
        x47 (x48, x49, x6, x9 -> x34, "cache: store_headers failed");
        x50 (x3);
        return x51 (x3->x52, x5);
    }
    x6 = x11->x44->x45 (x11->x46, x9, x5);
    if (x6 != x42) {
        x47 (x48, x49, x6, x9 -> x34, "cache: store_body failed");
        x50 (x3);
    }
    return x51 (x3->x52, x5);
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="892" endline="917">
static int x1 (x2 *x3, x4 *x5) {
    x6 *x7 = x3->x7;
    x8 *x9;
    x9 = (x8 *) x3->x10;
    if (!x9) {
        x11 (x12, x13, 0, x7 -> x14, "cache: CACHE_REMOVE_URL enabled unexpectedly");
        x15 (x3);
        return x16 (x3->x17, x5);
    }
    x18 (x9, x7 -> x19);
    x15 (x3);
    return x16 (x3->x17, x5);
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="922" endline="957">
static void *x1 (x2 *x3, x4 *x5) {
    x6 *x7 = x8 (x3, sizeof (x6));
    x7->x9 = x10 (x3, 10, sizeof (struct x11));
    x7->x12 = x10 (x3, 10, sizeof (struct x13));
    x7->x14 = x15;
    x7->x16 = 0;
    x7->x17 = x18;
    x7->x19 = 0;
    x7->x20 = x21;
    x7->x22 = 0;
    x7->x23 = 0;
    x7->x24 = 0;
    x7->x25 = 0;
    x7->x26 = 0;
    x7->x27 = 0;
    x7->x28 = 0;
    x7->x29 = 0;
    x7->x30 = 0;
    x7->x31 = x10 (x3, 10, sizeof (char *));
    x7->x32 = x33;
    x7->x34 = 0;
    x7->x35 = 0;
    x7->x36 = x10 (x3, 10, sizeof (char *));
    x7->x37 = x38;
    return x7;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="959" endline="1010">
static void *x1 (x2 *x3, void *x4, void *x5) {
    x6 *x7 = x8 (x3, sizeof (x6));
    x6 *x9 = (x6 *) x4;
    x6 *x10 = (x6 *) x5;
    x7->x11 = x12 (x3, x9->x11, x10->x11);
    x7->x13 = x12 (x3, x9->x13, x10->x13);
    x7->x14 = (x10->x15 == 0) ? x9->x14 : x10->x14;
    x7->x16 = (x10->x17 == 0) ? x9->x16 : x10->x16;
    x7->x18 = (x10->x19 == 0) ? x9->x18 : x10->x18;
    x7->x20 = (x10->x21 == 0) ? x9->x20 : x10->x20;
    x7->x22 = (x10->x23 == 0) ? x9->x22 : x10->x22;
    x7->x24 = (x10->x25 == 0) ? x9->x24 : x10->x24;
    x7->x26 = (x10->x27 == 0) ? x9->x26 : x10->x26;
    x7->x28 = (x10->x29 == x30) ? x9->x28 : x10->x28;
    x7->x31 = (x10->x32 == 0) ? x9->x31 : x10->x31;
    x7->x33 = (x10->x34 == x35) ? x9->x33 : x10->x33;
    return x7;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="1011" endline="1023">
static const char *x1 (x2 *x3, void *x4, int x5) {
    x6 *x7;
    x7 = (x6 *) x8 (x3->x9->x10, &x11);
    x7->x12 = x5;
    x7->x13 = 1;
    return x14;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="1025" endline="1036">
static const char *x1 (x2 *x3, void *x4, int x5) {
    x6 *x7;
    x7 = (x6 *) x8 (x3->x9->x10, &x11);
    x7->x12 = x5;
    x7->x13 = 1;
    return x14;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="1038" endline="1049">
static const char *x1 (x2 *x3, void *x4, int x5) {
    x6 *x7;
    x7 = (x6 *) x8 (x3->x9->x10, &x11);
    x7->x12 = x5;
    x7->x13 = 1;
    return x14;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="1051" endline="1062">
static const char *x1 (x2 *x3, void *x4, int x5) {
    x6 *x7;
    x7 = (x6 *) x8 (x3->x9->x10, &x11);
    x7->x12 = x5;
    x7->x13 = 1;
    return x14;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="1064" endline="1090">
static const char *x1 (x2 *x3, void *x4, const char *x5) {
    x6 *x7;
    char **x8;
    x7 = (x6 *) x9 (x3->x10->x11, &x12);
    if (!x13 (x5, "None", 4)) {
        x7->x14->x15 = 0;
    }
    else {
        if ((x7->x16 == x17) || (x7->x14->x15)) {
            x8 = (char **) x18 (x7->x14);
            (*x8) = (char *) x5;
        }
    }
    x7->x16 = x19;
    return x20;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="1092" endline="1118">
static const char *x1 (x2 *x3, void *x4, const char *x5) {
    x6 *x7;
    char **x8;
    x7 = (x6 *) x9 (x3->x10->x11, &x12);
    if (!x13 (x5, "None", 4)) {
        x7->x14->x15 = 0;
    }
    else {
        if ((x7->x16 == x17) || (x7->x14->x15)) {
            x8 = (char **) x18 (x7->x14);
            (*x8) = (char *) x5;
        }
    }
    x7->x16 = x19;
    return x20;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="1120" endline="1148">
static const char *x1 (x2 *x3, void *x4, const char *x5, const char *x6) {
    x7 *x8;
    struct x9 *x10;
    if (*x5 == '/') {
        return x11 (x3->x12, "provider (%s) starts with a '/'.  Are url and provider switched?", x5);
    }
    x8 = (x7 *) x13 (x3->x14->x15, &x16);
    x10 = x17 (x8->x18);
    x10->x5 = x5;
    if (x19 (x3->x12, x6, &(x10->x6))) {
        return x20;
    }
    if (x10->x6.x21) {
        x10->x22 = x23 (x10->x6.x21);
    }
    else {
        x10->x22 = 1;
        x10->x6.x21 = "/";
    }
    return x20;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="1150" endline="1170">
static const char *x1 (x2 *x3, void *x4, const char *x5) {
    x6 *x7;
    struct x8 *x9;
    x7 = (x6 *) x10 (x3->x11->x12, &x13);
    x9 = x14 (x7->x15);
    if (x16 (x3->x17, x5, &(x9->x5))) {
        return x18;
    }
    if (x9->x5.x19) {
        x9->x20 = x21 (x9->x5.x19);
    }
    else {
        x9->x20 = 1;
        x9->x5.x19 = "/";
    }
    return x18;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="1172" endline="1183">
static const char *x1 (x2 *x3, void *x4, const char *x5) {
    x6 *x7;
    x7 = (x6 *) x8 (x3->x9->x10, &x11);
    x7->x12 = (x13) (x14 (x5) * x15);
    x7->x16 = 1;
    return x17;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="1185" endline="1196">
static const char *x1 (x2 *x3, void *x4, const char *x5) {
    x6 *x7;
    x7 = (x6 *) x8 (x3->x9->x10, &x11);
    x7->x12 = (x13) (x14 (x5) * x15);
    x7->x16 = 1;
    return x17;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="1198" endline="1213">
static const char *x1 (x2 *x3, void *x4, const char *x5) {
    x6 *x7;
    double x8;
    x7 = (x6 *) x9 (x3->x10->x11, &x12);
    if (x13 (x5, "%lg", &x8) != 1) {
        return "CacheLastModifiedFactor value must be a float";
    }
    x7->x14 = x8;
    x7->x15 = 1;
    return x16;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="1215" endline="1226">
static const char *x1 (x2 *x3, void *x4, int x5) {
    x6 *x7;
    x7 = (x6 *) x8 (x3->x9->x10, &x11);
    x7->x12 = x5;
    x7->x13 = 1;
    return x14;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="1228" endline="1239">
static int x1 (x2 *x3, x2 *x4, x2 *x5, x6 *x7) {
    x8 = x9 (x10);
    if (!x8) {
        x8 = x11;
    }
    return x12;
}
</source>
<source file="examples/apache//smallApache/mod_cache.c.ifdefed" startline="1290" endline="1358">
static void x1 (x2 *x3) {
    x4 (x5, x6, x6, x7);
    x8 = x9 ("CACHE_SAVE", x10, x6, x11 +1);
    x12 = x9 ("CACHE_SAVE_SUBREQ", x10, x6, x11 -1);
    x13 = x9 ("CACHE_OUT", x14, x6, x11 +1);
    x15 = x9 ("CACHE_OUT_SUBREQ", x14, x6, x11 -1);
    x16 = x9 ("CACHE_REMOVE_URL", x17, x6, x18);
    x19 (x20, x6, x6, x21);
}
</source>
<source file="examples/apache//smallApache/mod_file_cache.c.ifdefed" startline="119" endline="125">
static void *x1 (x2 *x3, x4 *x5) {
    x6 *x7 = x8 (x3, sizeof (*x7));
    x7->x9 = x10 (x3);
    return x7;
}
</source>
<source file="examples/apache//smallApache/mod_file_cache.c.ifdefed" startline="127" endline="206">
static void x1 (x2 *x3, const char *x4, int x5) {
    x6 *x7;
    x8 *x9;
    x8 x10;
    x11 *x12 = x13;
    x14 x15;
    const char *x16;
    x16 = x17 (x3->x18, x4);
    if (!x16) {
        x19 (x20, x21, x22, x3 -> x23, "mod_file_cache: invalid file path " "%s, skipping", x4);
        return;
    }
    if ((x15 = x24 (&x10.x25, x16, x26, x3->x27)) != x28) {
        x19 (x20, x21, x15, x3 -> x23, "mod_file_cache: unable to stat(%s), skipping", x16);
        return;
    }
    if (x10.x25.x29 != x30) {
        x19 (x20, x21, 0, x3 -> x23, "mod_file_cache: %s isn't a regular file, skipping", x16);
        return;
    }
    if (x10.x25.x31 > x32) {
        x19 (x20, x21, 0, x3 -> x23, "mod_file_cache: %s is too large to cache, skipping", x16);
        return;
    }
    x15 = x33 (&x12, x16, x34 | x35 | x36, x37, x3->x18);
    if (x15 != x28) {
        x19 (x20, x21, x15, x3 -> x23, "mod_file_cache: unable to open(%s, O_RDONLY), skipping", x16);
        return;
    }
    x38 (x12);
    x9 = x39 (x3->x18, sizeof (x8));
    x9->x25 = x10.x25;
    x9->x4 = x16;
    x40 (x9 -> x41, x9 -> x25.x42);
    x43 (x9 -> x44, sizeof x9 -> x44, "%" x45, x9 -> x25.x31);
    x7 = x46 (x3->x23->x47, &x48);
    x49 (x7 -> x50, x9 -> x4, x51 (x9 -> x4), x9);
}
</source>
<source file="examples/apache//smallApache/mod_file_cache.c.ifdefed" startline="208" endline="218">
static const char *x1 (x2 *x3, void *x4, const char *x5) {
    x6 (x7, x8, 0, x3 -> x9, "mod_file_cache: unable to cache file: %s. Sendfile is not supported on this OS", x5);
    return x10;
}
</source>
<source file="examples/apache//smallApache/mod_file_cache.c.ifdefed" startline="219" endline="229">
static const char *x1 (x2 *x3, void *x4, const char *x5) {
    x6 (x7, x8, 0, x3 -> x9, "mod_file_cache: unable to cache file: %s. MMAP is not supported by this OS", x5);
    return x10;
}
</source>
<source file="examples/apache//smallApache/mod_file_cache.c.ifdefed" startline="231" endline="236">
static int x1 (x2 *x3, x2 *x4, x2 *x5, x6 *x7) {
    return x8;
}
</source>
<source file="examples/apache//smallApache/mod_file_cache.c.ifdefed" startline="241" endline="270">
static int x1 (x2 *x3) {
    x4 *x5;
    x6 *x7;
    int x8;
    x5 = x9 (x3->x10->x11, &x12);
    if (!x13 (x5->x14)) {
        return x15;
    }
    x8 = x16 (x3);
    if (x8 != x17 || !x3->x18) {
        return x8;
    }
    x7 = (x6 *) x19 (x5->x14, x3->x18, x20);
    if (x7 == x21)
        return x15;
    x22 (x3 -> x23, & x12, x7);
    x3->x24 = x7->x24;
    return x17;
}
</source>
<source file="examples/apache//smallApache/mod_file_cache.c.ifdefed" startline="272" endline="291">
static int x1 (x2 *x3, x4 *x5) {
    return x6;
}
</source>
<source file="examples/apache//smallApache/mod_file_cache.c.ifdefed" startline="293" endline="310">
static int x1 (x2 *x3, x4 *x5) {
    return x6;
}
</source>
<source file="examples/apache//smallApache/mod_file_cache.c.ifdefed" startline="312" endline="384">
static int x1 (x2 *x3) {
    x4 *x5;
    int x6;
    int x7 = x8;
    if (x9 (x3->x10, "*/*")) {
        return x11;
    }
    if (x3->x12 != x13)
        return x11;
    x5 = x14 (x3->x15, &x16);
    if (x5 == x17) {
        return x11;
    }
    x3->x18 |= (x19 << x13);
    if ((x6 = x20 (x3)) != x8)
        return x6;
    x21 (x3, x5 -> x22.x23);
    {
        x24 x25;
        char *x26;
        x25 = x27 (x3, x3->x23);
        if (x25 == x5->x22.x23)
            x26 = x5->x28;
        else {
            x26 = x29 (x3->x30, x31);
            x32 (x26, x25);
        }
        x33 (x3 -> x34, "Last-Modified", x26);
    }
    x35 (x3);
    if ((x6 = x36 (x3)) != x8) {
        return x6;
    }
    x3->x37 = x5->x22.x38;
    x33 (x3 -> x34, "Content-Length", x5 -> x39);
    if (!x3->x40) {
        if (x5->x41 == x42)
            x7 = x43 (x3, x5);
        else
            x7 = x44 (x3, x5);
    }
    return x7;
}
</source>
<source file="examples/apache//smallApache/mod_file_cache.c.ifdefed" startline="395" endline="406">
static void x1 (x2 *x3) {
    x4 (x5, x6, x6, x7);
    x8 (x9, x6, x6, x10);
    x11 (x12, x6, x6, x10);
}
</source>
