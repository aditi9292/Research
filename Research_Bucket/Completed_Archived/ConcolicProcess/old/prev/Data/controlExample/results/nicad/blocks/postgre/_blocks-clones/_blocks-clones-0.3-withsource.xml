<clones>
<systeminfo processor="nicad3" system="_" granularity="locks" threshold="30%" minlines="3" maxlines="2500"/>
<cloneinfo npcs="349" npairs="79"/>
<runinfo ncompares="21913" cputime="6"/>

<clone nlines="17" similarity="70">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="688" endline="710" pcid="126">
{
	int			i;

	WRITE_NODE_TYPE("SETOP");

	_outPlanInfo(str, (Plan *) node);

	WRITE_ENUM_FIELD(cmd, SetOpCmd);
	WRITE_ENUM_FIELD(strategy, SetOpStrategy);
	WRITE_INT_FIELD(numCols);

	appendStringInfo(str, " :dupColIdx");
	for (i = 0; i < node->numCols; i++)
		appendStringInfo(str, " %d", node->dupColIdx[i]);

	appendStringInfo(str, " :dupOperators");
	for (i = 0; i < node->numCols; i++)
		appendStringInfo(str, " %u", node->dupOperators[i]);

	WRITE_INT_FIELD(flagColIdx);
	WRITE_INT_FIELD(firstFlag);
	WRITE_LONG_FIELD(numGroups);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="335" endline="354" pcid="101">
{
	int			i;

	WRITE_NODE_TYPE("RECURSIVEUNION");

	_outPlanInfo(str, (Plan *) node);

	WRITE_INT_FIELD(wtParam);
	WRITE_INT_FIELD(numCols);

	appendStringInfo(str, " :dupColIdx");
	for (i = 0; i < node->numCols; i++)
		appendStringInfo(str, " %d", node->dupColIdx[i]);

	appendStringInfo(str, " :dupOperators");
	for (i = 0; i < node->numCols; i++)
		appendStringInfo(str, " %u", node->dupOperators[i]);

	WRITE_LONG_FIELD(numGroups);
}
</source>
</clone>

<clone nlines="14" similarity="78">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="547" endline="566" pcid="119">
{
	int			i;

	WRITE_NODE_TYPE("AGG");

	_outPlanInfo(str, (Plan *) node);

	WRITE_ENUM_FIELD(aggstrategy, AggStrategy);
	WRITE_INT_FIELD(numCols);

	appendStringInfo(str, " :grpColIdx");
	for (i = 0; i < node->numCols; i++)
		appendStringInfo(str, " %d", node->grpColIdx[i]);

	appendStringInfo(str, " :grpOperators");
	for (i = 0; i < node->numCols; i++)
		appendStringInfo(str, " %u", node->grpOperators[i]);

	WRITE_LONG_FIELD(numGroups);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="603" endline="619" pcid="121">
{
	int			i;

	WRITE_NODE_TYPE("GROUP");

	_outPlanInfo(str, (Plan *) node);

	WRITE_INT_FIELD(numCols);

	appendStringInfo(str, " :grpColIdx");
	for (i = 0; i < node->numCols; i++)
		appendStringInfo(str, " %d", node->grpColIdx[i]);

	appendStringInfo(str, " :grpOperators");
	for (i = 0; i < node->numCols; i++)
		appendStringInfo(str, " %u", node->grpOperators[i]);
}
</source>
</clone>

<clone nlines="14" similarity="92">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="833" endline="851" pcid="51">
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="859" endline="877" pcid="53">
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member_ptr(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
</clone>

<clone nlines="14" similarity="71">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="833" endline="851" pcid="51">
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="909" endline="927" pcid="57">
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsOidList(list1));
	Assert(IsOidList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member_oid(list2, lfirst_oid(cell)))
			result = lappend_oid(result, lfirst_oid(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
</clone>

<clone nlines="14" similarity="71">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="833" endline="851" pcid="51">
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="884" endline="902" pcid="55">
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsIntegerList(list1));
	Assert(IsIntegerList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member_int(list2, lfirst_int(cell)))
			result = lappend_int(result, lfirst_int(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
</clone>

<clone nlines="14" similarity="71">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="859" endline="877" pcid="53">
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member_ptr(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="909" endline="927" pcid="57">
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsOidList(list1));
	Assert(IsOidList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member_oid(list2, lfirst_oid(cell)))
			result = lappend_oid(result, lfirst_oid(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
</clone>

<clone nlines="14" similarity="71">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="859" endline="877" pcid="53">
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member_ptr(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="884" endline="902" pcid="55">
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsIntegerList(list1));
	Assert(IsIntegerList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member_int(list2, lfirst_int(cell)))
			result = lappend_int(result, lfirst_int(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
</clone>

<clone nlines="14" similarity="71">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="909" endline="927" pcid="57">
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsOidList(list1));
	Assert(IsOidList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member_oid(list2, lfirst_oid(cell)))
			result = lappend_oid(result, lfirst_oid(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="884" endline="902" pcid="55">
{
	ListCell   *cell;
	List	   *result = NIL;

	Assert(IsIntegerList(list1));
	Assert(IsIntegerList(list2));

	if (list2 == NIL)
		return list_copy(list1);

	foreach(cell, list1)
	{
		if (!list_member_int(list2, lfirst_int(cell)))
			result = lappend_int(result, lfirst_int(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
</clone>

<clone nlines="13" similarity="84">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="637" endline="655" pcid="38">
{
	ListCell   *cell;
	ListCell   *prev;

	Assert(IsOidList(list));
	check_list_invariants(list);

	prev = NULL;
	foreach(cell, list)
	{
		if (lfirst_oid(cell) == datum)
			return list_delete_cell(list, cell, prev);

		prev = cell;
	}

	/* Didn't find a match: return the list unmodified */
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="614" endline="632" pcid="36">
{
	ListCell   *cell;
	ListCell   *prev;

	Assert(IsIntegerList(list));
	check_list_invariants(list);

	prev = NULL;
	foreach(cell, list)
	{
		if (lfirst_int(cell) == datum)
			return list_delete_cell(list, cell, prev);

		prev = cell;
	}

	/* Didn't find a match: return the list unmodified */
	return list;
}
</source>
</clone>

<clone nlines="13" similarity="84">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="637" endline="655" pcid="38">
{
	ListCell   *cell;
	ListCell   *prev;

	Assert(IsOidList(list));
	check_list_invariants(list);

	prev = NULL;
	foreach(cell, list)
	{
		if (lfirst_oid(cell) == datum)
			return list_delete_cell(list, cell, prev);

		prev = cell;
	}

	/* Didn't find a match: return the list unmodified */
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="591" endline="609" pcid="34">
{
	ListCell   *cell;
	ListCell   *prev;

	Assert(IsPointerList(list));
	check_list_invariants(list);

	prev = NULL;
	foreach(cell, list)
	{
		if (lfirst(cell) == datum)
			return list_delete_cell(list, cell, prev);

		prev = cell;
	}

	/* Didn't find a match: return the list unmodified */
	return list;
}
</source>
</clone>

<clone nlines="13" similarity="84">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="637" endline="655" pcid="38">
{
	ListCell   *cell;
	ListCell   *prev;

	Assert(IsOidList(list));
	check_list_invariants(list);

	prev = NULL;
	foreach(cell, list)
	{
		if (lfirst_oid(cell) == datum)
			return list_delete_cell(list, cell, prev);

		prev = cell;
	}

	/* Didn't find a match: return the list unmodified */
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="568" endline="586" pcid="32">
{
	ListCell   *cell;
	ListCell   *prev;

	Assert(IsPointerList(list));
	check_list_invariants(list);

	prev = NULL;
	foreach(cell, list)
	{
		if (equal(lfirst(cell), datum))
			return list_delete_cell(list, cell, prev);

		prev = cell;
	}

	/* Didn't find a match: return the list unmodified */
	return list;
}
</source>
</clone>

<clone nlines="13" similarity="84">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="614" endline="632" pcid="36">
{
	ListCell   *cell;
	ListCell   *prev;

	Assert(IsIntegerList(list));
	check_list_invariants(list);

	prev = NULL;
	foreach(cell, list)
	{
		if (lfirst_int(cell) == datum)
			return list_delete_cell(list, cell, prev);

		prev = cell;
	}

	/* Didn't find a match: return the list unmodified */
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="591" endline="609" pcid="34">
{
	ListCell   *cell;
	ListCell   *prev;

	Assert(IsPointerList(list));
	check_list_invariants(list);

	prev = NULL;
	foreach(cell, list)
	{
		if (lfirst(cell) == datum)
			return list_delete_cell(list, cell, prev);

		prev = cell;
	}

	/* Didn't find a match: return the list unmodified */
	return list;
}
</source>
</clone>

<clone nlines="13" similarity="84">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="614" endline="632" pcid="36">
{
	ListCell   *cell;
	ListCell   *prev;

	Assert(IsIntegerList(list));
	check_list_invariants(list);

	prev = NULL;
	foreach(cell, list)
	{
		if (lfirst_int(cell) == datum)
			return list_delete_cell(list, cell, prev);

		prev = cell;
	}

	/* Didn't find a match: return the list unmodified */
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="568" endline="586" pcid="32">
{
	ListCell   *cell;
	ListCell   *prev;

	Assert(IsPointerList(list));
	check_list_invariants(list);

	prev = NULL;
	foreach(cell, list)
	{
		if (equal(lfirst(cell), datum))
			return list_delete_cell(list, cell, prev);

		prev = cell;
	}

	/* Didn't find a match: return the list unmodified */
	return list;
}
</source>
</clone>

<clone nlines="13" similarity="92">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="698" endline="714" pcid="41">
{
	List	   *result;
	ListCell   *cell;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	result = list_copy(list1);
	foreach(cell, list2)
	{
		if (!list_member(result, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="722" endline="738" pcid="43">
{
	List	   *result;
	ListCell   *cell;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	result = list_copy(list1);
	foreach(cell, list2)
	{
		if (!list_member_ptr(result, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}

	check_list_invariants(result);
	return result;
}
</source>
</clone>

<clone nlines="13" similarity="92">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="591" endline="609" pcid="34">
{
	ListCell   *cell;
	ListCell   *prev;

	Assert(IsPointerList(list));
	check_list_invariants(list);

	prev = NULL;
	foreach(cell, list)
	{
		if (lfirst(cell) == datum)
			return list_delete_cell(list, cell, prev);

		prev = cell;
	}

	/* Didn't find a match: return the list unmodified */
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="568" endline="586" pcid="32">
{
	ListCell   *cell;
	ListCell   *prev;

	Assert(IsPointerList(list));
	check_list_invariants(list);

	prev = NULL;
	foreach(cell, list)
	{
		if (equal(lfirst(cell), datum))
			return list_delete_cell(list, cell, prev);

		prev = cell;
	}

	/* Didn't find a match: return the list unmodified */
	return list;
}
</source>
</clone>

<clone nlines="12" similarity="75">
<source file="examples2/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="186" endline="199" pcid="259">
{
	int			slen = strlen(str);
	char	   *p;

	p = pg_server_to_client(str, slen);
	if (p != str)				/* actual conversion has been done? */
	{
		slen = strlen(p);
		appendBinaryStringInfo(buf, p, slen + 1);
		pfree(p);
	}
	else
		appendBinaryStringInfo(buf, str, slen + 1);
}
</source>
<source file="examples2/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="163" endline="175" pcid="257">
{
	char	   *p;

	p = pg_server_to_client(str, slen);
	if (p != str)				/* actual conversion has been done? */
	{
		slen = strlen(p);
		appendBinaryStringInfo(buf, p, slen);
		pfree(p);
	}
	else
		appendBinaryStringInfo(buf, str, slen);
}
</source>
</clone>

<clone nlines="11" similarity="90">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="915" endline="937" pcid="326">
{
	READ_LOCALS(NullIfExpr);

	READ_OID_FIELD(opno);
	READ_OID_FIELD(opfuncid);

	/*
	 * The opfuncid is stored in the textual format primarily for debugging
	 * and documentation reasons.  We want to always read it as zero to force
	 * it to be re-looked-up in the pg_operator entry.	This ensures that
	 * stored rules don't have hidden dependencies on operators' functions.
	 * (We don't currently support an ALTER OPERATOR command, but might
	 * someday.)
	 */
	local_node->opfuncid = InvalidOid;

	READ_OID_FIELD(opresulttype);
	READ_BOOL_FIELD(opretset);
	READ_NODE_FIELD(args);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="533" endline="555" pcid="306">
{
	READ_LOCALS(OpExpr);

	READ_OID_FIELD(opno);
	READ_OID_FIELD(opfuncid);

	/*
	 * The opfuncid is stored in the textual format primarily for debugging
	 * and documentation reasons.  We want to always read it as zero to force
	 * it to be re-looked-up in the pg_operator entry.	This ensures that
	 * stored rules don't have hidden dependencies on operators' functions.
	 * (We don't currently support an ALTER OPERATOR command, but might
	 * someday.)
	 */
	local_node->opfuncid = InvalidOid;

	READ_OID_FIELD(opresulttype);
	READ_BOOL_FIELD(opretset);
	READ_NODE_FIELD(args);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
</clone>

<clone nlines="11" similarity="90">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="915" endline="937" pcid="326">
{
	READ_LOCALS(NullIfExpr);

	READ_OID_FIELD(opno);
	READ_OID_FIELD(opfuncid);

	/*
	 * The opfuncid is stored in the textual format primarily for debugging
	 * and documentation reasons.  We want to always read it as zero to force
	 * it to be re-looked-up in the pg_operator entry.	This ensures that
	 * stored rules don't have hidden dependencies on operators' functions.
	 * (We don't currently support an ALTER OPERATOR command, but might
	 * someday.)
	 */
	local_node->opfuncid = InvalidOid;

	READ_OID_FIELD(opresulttype);
	READ_BOOL_FIELD(opretset);
	READ_NODE_FIELD(args);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="562" endline="584" pcid="307">
{
	READ_LOCALS(DistinctExpr);

	READ_OID_FIELD(opno);
	READ_OID_FIELD(opfuncid);

	/*
	 * The opfuncid is stored in the textual format primarily for debugging
	 * and documentation reasons.  We want to always read it as zero to force
	 * it to be re-looked-up in the pg_operator entry.	This ensures that
	 * stored rules don't have hidden dependencies on operators' functions.
	 * (We don't currently support an ALTER OPERATOR command, but might
	 * someday.)
	 */
	local_node->opfuncid = InvalidOid;

	READ_OID_FIELD(opresulttype);
	READ_BOOL_FIELD(opretset);
	READ_NODE_FIELD(args);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
</clone>

<clone nlines="11" similarity="72">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="915" endline="937" pcid="326">
{
	READ_LOCALS(NullIfExpr);

	READ_OID_FIELD(opno);
	READ_OID_FIELD(opfuncid);

	/*
	 * The opfuncid is stored in the textual format primarily for debugging
	 * and documentation reasons.  We want to always read it as zero to force
	 * it to be re-looked-up in the pg_operator entry.	This ensures that
	 * stored rules don't have hidden dependencies on operators' functions.
	 * (We don't currently support an ALTER OPERATOR command, but might
	 * someday.)
	 */
	local_node->opfuncid = InvalidOid;

	READ_OID_FIELD(opresulttype);
	READ_BOOL_FIELD(opretset);
	READ_NODE_FIELD(args);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="591" endline="612" pcid="308">
{
	READ_LOCALS(ScalarArrayOpExpr);

	READ_OID_FIELD(opno);
	READ_OID_FIELD(opfuncid);

	/*
	 * The opfuncid is stored in the textual format primarily for debugging
	 * and documentation reasons.  We want to always read it as zero to force
	 * it to be re-looked-up in the pg_operator entry.	This ensures that
	 * stored rules don't have hidden dependencies on operators' functions.
	 * (We don't currently support an ALTER OPERATOR command, but might
	 * someday.)
	 */
	local_node->opfuncid = InvalidOid;

	READ_BOOL_FIELD(useOr);
	READ_NODE_FIELD(args);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
</clone>

<clone nlines="11" similarity="90">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="1015" endline="1029" pcid="65">
{
	ListCell   *cell;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	foreach(cell, list2)
	{
		if (!list_member_ptr(list1, lfirst(cell)))
			list1 = lappend(list1, lfirst(cell));
	}

	check_list_invariants(list1);
	return list1;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="993" endline="1007" pcid="63">
{
	ListCell   *cell;

	Assert(IsPointerList(list1));
	Assert(IsPointerList(list2));

	foreach(cell, list2)
	{
		if (!list_member(list1, lfirst(cell)))
			list1 = lappend(list1, lfirst(cell));
	}

	check_list_invariants(list1);
	return list1;
}
</source>
</clone>

<clone nlines="11" similarity="90">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="533" endline="555" pcid="306">
{
	READ_LOCALS(OpExpr);

	READ_OID_FIELD(opno);
	READ_OID_FIELD(opfuncid);

	/*
	 * The opfuncid is stored in the textual format primarily for debugging
	 * and documentation reasons.  We want to always read it as zero to force
	 * it to be re-looked-up in the pg_operator entry.	This ensures that
	 * stored rules don't have hidden dependencies on operators' functions.
	 * (We don't currently support an ALTER OPERATOR command, but might
	 * someday.)
	 */
	local_node->opfuncid = InvalidOid;

	READ_OID_FIELD(opresulttype);
	READ_BOOL_FIELD(opretset);
	READ_NODE_FIELD(args);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="562" endline="584" pcid="307">
{
	READ_LOCALS(DistinctExpr);

	READ_OID_FIELD(opno);
	READ_OID_FIELD(opfuncid);

	/*
	 * The opfuncid is stored in the textual format primarily for debugging
	 * and documentation reasons.  We want to always read it as zero to force
	 * it to be re-looked-up in the pg_operator entry.	This ensures that
	 * stored rules don't have hidden dependencies on operators' functions.
	 * (We don't currently support an ALTER OPERATOR command, but might
	 * someday.)
	 */
	local_node->opfuncid = InvalidOid;

	READ_OID_FIELD(opresulttype);
	READ_BOOL_FIELD(opretset);
	READ_NODE_FIELD(args);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
</clone>

<clone nlines="11" similarity="72">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="533" endline="555" pcid="306">
{
	READ_LOCALS(OpExpr);

	READ_OID_FIELD(opno);
	READ_OID_FIELD(opfuncid);

	/*
	 * The opfuncid is stored in the textual format primarily for debugging
	 * and documentation reasons.  We want to always read it as zero to force
	 * it to be re-looked-up in the pg_operator entry.	This ensures that
	 * stored rules don't have hidden dependencies on operators' functions.
	 * (We don't currently support an ALTER OPERATOR command, but might
	 * someday.)
	 */
	local_node->opfuncid = InvalidOid;

	READ_OID_FIELD(opresulttype);
	READ_BOOL_FIELD(opretset);
	READ_NODE_FIELD(args);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="591" endline="612" pcid="308">
{
	READ_LOCALS(ScalarArrayOpExpr);

	READ_OID_FIELD(opno);
	READ_OID_FIELD(opfuncid);

	/*
	 * The opfuncid is stored in the textual format primarily for debugging
	 * and documentation reasons.  We want to always read it as zero to force
	 * it to be re-looked-up in the pg_operator entry.	This ensures that
	 * stored rules don't have hidden dependencies on operators' functions.
	 * (We don't currently support an ALTER OPERATOR command, but might
	 * someday.)
	 */
	local_node->opfuncid = InvalidOid;

	READ_BOOL_FIELD(useOr);
	READ_NODE_FIELD(args);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
</clone>

<clone nlines="11" similarity="72">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="562" endline="584" pcid="307">
{
	READ_LOCALS(DistinctExpr);

	READ_OID_FIELD(opno);
	READ_OID_FIELD(opfuncid);

	/*
	 * The opfuncid is stored in the textual format primarily for debugging
	 * and documentation reasons.  We want to always read it as zero to force
	 * it to be re-looked-up in the pg_operator entry.	This ensures that
	 * stored rules don't have hidden dependencies on operators' functions.
	 * (We don't currently support an ALTER OPERATOR command, but might
	 * someday.)
	 */
	local_node->opfuncid = InvalidOid;

	READ_OID_FIELD(opresulttype);
	READ_BOOL_FIELD(opretset);
	READ_NODE_FIELD(args);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="591" endline="612" pcid="308">
{
	READ_LOCALS(ScalarArrayOpExpr);

	READ_OID_FIELD(opno);
	READ_OID_FIELD(opfuncid);

	/*
	 * The opfuncid is stored in the textual format primarily for debugging
	 * and documentation reasons.  We want to always read it as zero to force
	 * it to be re-looked-up in the pg_operator entry.	This ensures that
	 * stored rules don't have hidden dependencies on operators' functions.
	 * (We don't currently support an ALTER OPERATOR command, but might
	 * someday.)
	 */
	local_node->opfuncid = InvalidOid;

	READ_BOOL_FIELD(useOr);
	READ_NODE_FIELD(args);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
</clone>

<clone nlines="10" similarity="70">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="165" endline="176" pcid="6">
{
	Assert(IsOidList(list));

	if (list == NIL)
		list = new_list(T_OidList);
	else
		new_tail_cell(list);

	lfirst_oid(list->tail) = datum;
	check_list_invariants(list);
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="147" endline="158" pcid="5">
{
	Assert(IsIntegerList(list));

	if (list == NIL)
		list = new_list(T_IntList);
	else
		new_tail_cell(list);

	lfirst_int(list->tail) = datum;
	check_list_invariants(list);
	return list;
}
</source>
</clone>

<clone nlines="10" similarity="80">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="165" endline="176" pcid="6">
{
	Assert(IsOidList(list));

	if (list == NIL)
		list = new_list(T_OidList);
	else
		new_tail_cell(list);

	lfirst_oid(list->tail) = datum;
	check_list_invariants(list);
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="296" endline="307" pcid="13">
{
	Assert(IsOidList(list));

	if (list == NIL)
		list = new_list(T_OidList);
	else
		new_head_cell(list);

	lfirst_oid(list->head) = datum;
	check_list_invariants(list);
	return list;
}
</source>
</clone>

<clone nlines="10" similarity="70">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="165" endline="176" pcid="6">
{
	Assert(IsOidList(list));

	if (list == NIL)
		list = new_list(T_OidList);
	else
		new_tail_cell(list);

	lfirst_oid(list->tail) = datum;
	check_list_invariants(list);
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="129" endline="140" pcid="4">
{
	Assert(IsPointerList(list));

	if (list == NIL)
		list = new_list(T_List);
	else
		new_tail_cell(list);

	lfirst(list->tail) = datum;
	check_list_invariants(list);
	return list;
}
</source>
</clone>

<clone nlines="10" similarity="80">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="466" endline="479" pcid="24">
{
	ListCell   *cell;

	Assert(IsPointerList(list));
	check_list_invariants(list);

	foreach(cell, list)
	{
		if (lfirst(cell) == datum)
			return true;
	}

	return false;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="486" endline="499" pcid="26">
{
	ListCell   *cell;

	Assert(IsIntegerList(list));
	check_list_invariants(list);

	foreach(cell, list)
	{
		if (lfirst_int(cell) == datum)
			return true;
	}

	return false;
}
</source>
</clone>

<clone nlines="10" similarity="80">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="466" endline="479" pcid="24">
{
	ListCell   *cell;

	Assert(IsPointerList(list));
	check_list_invariants(list);

	foreach(cell, list)
	{
		if (lfirst(cell) == datum)
			return true;
	}

	return false;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="506" endline="519" pcid="28">
{
	ListCell   *cell;

	Assert(IsOidList(list));
	check_list_invariants(list);

	foreach(cell, list)
	{
		if (lfirst_oid(cell) == datum)
			return true;
	}

	return false;
}
</source>
</clone>

<clone nlines="10" similarity="90">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="466" endline="479" pcid="24">
{
	ListCell   *cell;

	Assert(IsPointerList(list));
	check_list_invariants(list);

	foreach(cell, list)
	{
		if (lfirst(cell) == datum)
			return true;
	}

	return false;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="445" endline="458" pcid="22">
{
	ListCell   *cell;

	Assert(IsPointerList(list));
	check_list_invariants(list);

	foreach(cell, list)
	{
		if (equal(lfirst(cell), datum))
			return true;
	}

	return false;
}
</source>
</clone>

<clone nlines="10" similarity="70">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="147" endline="158" pcid="5">
{
	Assert(IsIntegerList(list));

	if (list == NIL)
		list = new_list(T_IntList);
	else
		new_tail_cell(list);

	lfirst_int(list->tail) = datum;
	check_list_invariants(list);
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="129" endline="140" pcid="4">
{
	Assert(IsPointerList(list));

	if (list == NIL)
		list = new_list(T_List);
	else
		new_tail_cell(list);

	lfirst(list->tail) = datum;
	check_list_invariants(list);
	return list;
}
</source>
</clone>

<clone nlines="10" similarity="80">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="147" endline="158" pcid="5">
{
	Assert(IsIntegerList(list));

	if (list == NIL)
		list = new_list(T_IntList);
	else
		new_tail_cell(list);

	lfirst_int(list->tail) = datum;
	check_list_invariants(list);
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="278" endline="289" pcid="12">
{
	Assert(IsIntegerList(list));

	if (list == NIL)
		list = new_list(T_IntList);
	else
		new_head_cell(list);

	lfirst_int(list->head) = datum;
	check_list_invariants(list);
	return list;
}
</source>
</clone>

<clone nlines="10" similarity="70">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="296" endline="307" pcid="13">
{
	Assert(IsOidList(list));

	if (list == NIL)
		list = new_list(T_OidList);
	else
		new_head_cell(list);

	lfirst_oid(list->head) = datum;
	check_list_invariants(list);
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="260" endline="271" pcid="11">
{
	Assert(IsPointerList(list));

	if (list == NIL)
		list = new_list(T_List);
	else
		new_head_cell(list);

	lfirst(list->head) = datum;
	check_list_invariants(list);
	return list;
}
</source>
</clone>

<clone nlines="10" similarity="70">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="296" endline="307" pcid="13">
{
	Assert(IsOidList(list));

	if (list == NIL)
		list = new_list(T_OidList);
	else
		new_head_cell(list);

	lfirst_oid(list->head) = datum;
	check_list_invariants(list);
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="278" endline="289" pcid="12">
{
	Assert(IsIntegerList(list));

	if (list == NIL)
		list = new_list(T_IntList);
	else
		new_head_cell(list);

	lfirst_int(list->head) = datum;
	check_list_invariants(list);
	return list;
}
</source>
</clone>

<clone nlines="10" similarity="80">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="260" endline="271" pcid="11">
{
	Assert(IsPointerList(list));

	if (list == NIL)
		list = new_list(T_List);
	else
		new_head_cell(list);

	lfirst(list->head) = datum;
	check_list_invariants(list);
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="129" endline="140" pcid="4">
{
	Assert(IsPointerList(list));

	if (list == NIL)
		list = new_list(T_List);
	else
		new_tail_cell(list);

	lfirst(list->tail) = datum;
	check_list_invariants(list);
	return list;
}
</source>
</clone>

<clone nlines="10" similarity="70">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="260" endline="271" pcid="11">
{
	Assert(IsPointerList(list));

	if (list == NIL)
		list = new_list(T_List);
	else
		new_head_cell(list);

	lfirst(list->head) = datum;
	check_list_invariants(list);
	return list;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="278" endline="289" pcid="12">
{
	Assert(IsIntegerList(list));

	if (list == NIL)
		list = new_list(T_IntList);
	else
		new_head_cell(list);

	lfirst_int(list->head) = datum;
	check_list_invariants(list);
	return list;
}
</source>
</clone>

<clone nlines="10" similarity="80">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="486" endline="499" pcid="26">
{
	ListCell   *cell;

	Assert(IsIntegerList(list));
	check_list_invariants(list);

	foreach(cell, list)
	{
		if (lfirst_int(cell) == datum)
			return true;
	}

	return false;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="506" endline="519" pcid="28">
{
	ListCell   *cell;

	Assert(IsOidList(list));
	check_list_invariants(list);

	foreach(cell, list)
	{
		if (lfirst_oid(cell) == datum)
			return true;
	}

	return false;
}
</source>
</clone>

<clone nlines="10" similarity="80">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="486" endline="499" pcid="26">
{
	ListCell   *cell;

	Assert(IsIntegerList(list));
	check_list_invariants(list);

	foreach(cell, list)
	{
		if (lfirst_int(cell) == datum)
			return true;
	}

	return false;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="445" endline="458" pcid="22">
{
	ListCell   *cell;

	Assert(IsPointerList(list));
	check_list_invariants(list);

	foreach(cell, list)
	{
		if (equal(lfirst(cell), datum))
			return true;
	}

	return false;
}
</source>
</clone>

<clone nlines="10" similarity="80">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="506" endline="519" pcid="28">
{
	ListCell   *cell;

	Assert(IsOidList(list));
	check_list_invariants(list);

	foreach(cell, list)
	{
		if (lfirst_oid(cell) == datum)
			return true;
	}

	return false;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="445" endline="458" pcid="22">
{
	ListCell   *cell;

	Assert(IsPointerList(list));
	check_list_invariants(list);

	foreach(cell, list)
	{
		if (equal(lfirst(cell), datum))
			return true;
	}

	return false;
}
</source>
</clone>

<clone nlines="10" similarity="70">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1963" endline="1973" pcid="220">
{
	WRITE_NODE_TYPE("WINDOWCLAUSE");

	WRITE_STRING_FIELD(name);
	WRITE_STRING_FIELD(refname);
	WRITE_NODE_FIELD(partitionClause);
	WRITE_NODE_FIELD(orderClause);
	WRITE_INT_FIELD(frameOptions);
	WRITE_UINT_FIELD(winref);
	WRITE_BOOL_FIELD(copiedOrder);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="2255" endline="2264" pcid="240">
{
	WRITE_NODE_TYPE("WINDOWDEF");

	WRITE_STRING_FIELD(name);
	WRITE_STRING_FIELD(refname);
	WRITE_NODE_FIELD(partitionClause);
	WRITE_NODE_FIELD(orderClause);
	WRITE_INT_FIELD(frameOptions);
	WRITE_LOCATION_FIELD(location);
}
</source>
</clone>

<clone nlines="9" similarity="88">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="881" endline="890" pcid="139">
{
	WRITE_NODE_TYPE("OPEXPR");

	WRITE_OID_FIELD(opno);
	WRITE_OID_FIELD(opfuncid);
	WRITE_OID_FIELD(opresulttype);
	WRITE_BOOL_FIELD(opretset);
	WRITE_NODE_FIELD(args);
	WRITE_LOCATION_FIELD(location);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="894" endline="903" pcid="140">
{
	WRITE_NODE_TYPE("DISTINCTEXPR");

	WRITE_OID_FIELD(opno);
	WRITE_OID_FIELD(opfuncid);
	WRITE_OID_FIELD(opresulttype);
	WRITE_BOOL_FIELD(opretset);
	WRITE_NODE_FIELD(args);
	WRITE_LOCATION_FIELD(location);
}
</source>
</clone>

<clone nlines="9" similarity="88">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="881" endline="890" pcid="139">
{
	WRITE_NODE_TYPE("OPEXPR");

	WRITE_OID_FIELD(opno);
	WRITE_OID_FIELD(opfuncid);
	WRITE_OID_FIELD(opresulttype);
	WRITE_BOOL_FIELD(opretset);
	WRITE_NODE_FIELD(args);
	WRITE_LOCATION_FIELD(location);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1161" endline="1170" pcid="162">
{
	WRITE_NODE_TYPE("NULLIFEXPR");

	WRITE_OID_FIELD(opno);
	WRITE_OID_FIELD(opfuncid);
	WRITE_OID_FIELD(opresulttype);
	WRITE_BOOL_FIELD(opretset);
	WRITE_NODE_FIELD(args);
	WRITE_LOCATION_FIELD(location);
}
</source>
</clone>

<clone nlines="9" similarity="88">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="894" endline="903" pcid="140">
{
	WRITE_NODE_TYPE("DISTINCTEXPR");

	WRITE_OID_FIELD(opno);
	WRITE_OID_FIELD(opfuncid);
	WRITE_OID_FIELD(opresulttype);
	WRITE_BOOL_FIELD(opretset);
	WRITE_NODE_FIELD(args);
	WRITE_LOCATION_FIELD(location);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1161" endline="1170" pcid="162">
{
	WRITE_NODE_TYPE("NULLIFEXPR");

	WRITE_OID_FIELD(opno);
	WRITE_OID_FIELD(opfuncid);
	WRITE_OID_FIELD(opresulttype);
	WRITE_BOOL_FIELD(opretset);
	WRITE_NODE_FIELD(args);
	WRITE_LOCATION_FIELD(location);
}
</source>
</clone>

<clone nlines="9" similarity="77">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="698" endline="708" pcid="313">
{
	READ_LOCALS(RelabelType);

	READ_NODE_FIELD(arg);
	READ_OID_FIELD(resulttype);
	READ_INT_FIELD(resulttypmod);
	READ_ENUM_FIELD(relabelformat, CoercionForm);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="972" endline="982" pcid="329">
{
	READ_LOCALS(CoerceToDomain);

	READ_NODE_FIELD(arg);
	READ_OID_FIELD(resulttype);
	READ_INT_FIELD(resulttypmod);
	READ_ENUM_FIELD(coercionformat, CoercionForm);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
</clone>

<clone nlines="8" similarity="100">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="1155" endline="1164" pcid="76">
	{
		ListCell   *newlist_cur;

		newlist_cur = (ListCell *) palloc(sizeof(*newlist_cur));
		newlist_cur->data = oldlist_cur->data;
		newlist_prev->next = newlist_cur;

		newlist_prev = newlist_cur;
		oldlist_cur = oldlist_cur->next;
	}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="1208" endline="1217" pcid="78">
	{
		ListCell   *newlist_cur;

		newlist_cur = (ListCell *) palloc(sizeof(*newlist_cur));
		newlist_cur->data = oldlist_cur->data;
		newlist_prev->next = newlist_cur;

		newlist_prev = newlist_cur;
		oldlist_cur = oldlist_cur->next;
	}
</source>
</clone>

<clone nlines="8" similarity="75">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1192" endline="1200" pcid="165">
{
	WRITE_NODE_TYPE("COERCETODOMAIN");

	WRITE_NODE_FIELD(arg);
	WRITE_OID_FIELD(resulttype);
	WRITE_INT_FIELD(resulttypmod);
	WRITE_ENUM_FIELD(coercionformat, CoercionForm);
	WRITE_LOCATION_FIELD(location);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1009" endline="1017" pcid="149">
{
	WRITE_NODE_TYPE("RELABELTYPE");

	WRITE_NODE_FIELD(arg);
	WRITE_OID_FIELD(resulttype);
	WRITE_INT_FIELD(resulttypmod);
	WRITE_ENUM_FIELD(relabelformat, CoercionForm);
	WRITE_LOCATION_FIELD(location);
}
</source>
</clone>

<clone nlines="8" similarity="75">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="750" endline="759" pcid="316">
{
	READ_LOCALS(ConvertRowtypeExpr);

	READ_NODE_FIELD(arg);
	READ_OID_FIELD(resulttype);
	READ_ENUM_FIELD(convertformat, CoercionForm);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="715" endline="724" pcid="314">
{
	READ_LOCALS(CoerceViaIO);

	READ_NODE_FIELD(arg);
	READ_OID_FIELD(resulttype);
	READ_ENUM_FIELD(coerceformat, CoercionForm);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
</clone>

<clone nlines="8" similarity="75">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="210" endline="219" pcid="8">
{
	ListCell   *new_cell;

	Assert(IsPointerList(list));

	new_cell = add_new_cell(list, prev);
	lfirst(new_cell) = datum;
	check_list_invariants(list);
	return new_cell;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="223" endline="232" pcid="9">
{
	ListCell   *new_cell;

	Assert(IsIntegerList(list));

	new_cell = add_new_cell(list, prev);
	lfirst_int(new_cell) = datum;
	check_list_invariants(list);
	return new_cell;
}
</source>
</clone>

<clone nlines="8" similarity="75">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="210" endline="219" pcid="8">
{
	ListCell   *new_cell;

	Assert(IsPointerList(list));

	new_cell = add_new_cell(list, prev);
	lfirst(new_cell) = datum;
	check_list_invariants(list);
	return new_cell;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="236" endline="245" pcid="10">
{
	ListCell   *new_cell;

	Assert(IsOidList(list));

	new_cell = add_new_cell(list, prev);
	lfirst_oid(new_cell) = datum;
	check_list_invariants(list);
	return new_cell;
}
</source>
</clone>

<clone nlines="8" similarity="75">
<source file="examples2/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="329" endline="360" pcid="267">
{
//#ifdef INT64_IS_BUSTED
//	union
//	{
//		float8		f;
//		uint32		h[2];
//	}			swap;
//
//	swap.f = f;
//	swap.h[0] = htonl(swap.h[0]);
//	swap.h[1] = htonl(swap.h[1]);
//
//#ifdef WORDS_BIGENDIAN
//	/* machine seems to be big-endian, send h[0] first */
//	appendBinaryStringInfo(buf, (char *) &swap.h[0], 4);
//	appendBinaryStringInfo(buf, (char *) &swap.h[1], 4);
//#else
//	/* machine seems to be little-endian, send h[1] first */
//	appendBinaryStringInfo(buf, (char *) &swap.h[1], 4);
//	appendBinaryStringInfo(buf, (char *) &swap.h[0], 4);
//#endif
//#else							/* INT64 works */
	union
	{
		float8		f;
		int64		i;
	}			swap;

	swap.f = f;
	pq_sendint64(buf, swap.i);
//#endif
}
</source>
<source file="examples2/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="566" endline="594" pcid="279">
{
//#ifdef INT64_IS_BUSTED
//	union
//	{
//		float8		f;
//		uint32		h[2];
//	}			swap;
//
//#ifdef WORDS_BIGENDIAN
//	/* machine seems to be big-endian, receive h[0] first */
//	swap.h[0] = pq_getmsgint(msg, 4);
//	swap.h[1] = pq_getmsgint(msg, 4);
//#else
//	/* machine seems to be little-endian, receive h[1] first */
//	swap.h[1] = pq_getmsgint(msg, 4);
//	swap.h[0] = pq_getmsgint(msg, 4);
//#endif
//	return swap.f;
//#else							/* INT64 works */
	union
	{
		float8		f;
		int64		i;
	}			swap;

	swap.i = pq_getmsgint64(msg);
	return swap.f;
//#endif
}
</source>
</clone>

<clone nlines="8" similarity="75">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="394" endline="403" pcid="106">
{
	WRITE_NODE_TYPE("INDEXSCAN");

	_outScanInfo(str, (Scan *) node);

	WRITE_OID_FIELD(indexid);
	WRITE_NODE_FIELD(indexqual);
	WRITE_NODE_FIELD(indexqualorig);
	WRITE_ENUM_FIELD(indexorderdir, ScanDirection);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="407" endline="415" pcid="107">
{
	WRITE_NODE_TYPE("BITMAPINDEXSCAN");

	_outScanInfo(str, (Scan *) node);

	WRITE_OID_FIELD(indexid);
	WRITE_NODE_FIELD(indexqual);
	WRITE_NODE_FIELD(indexqualorig);
}
</source>
</clone>

<clone nlines="8" similarity="75">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="223" endline="232" pcid="9">
{
	ListCell   *new_cell;

	Assert(IsIntegerList(list));

	new_cell = add_new_cell(list, prev);
	lfirst_int(new_cell) = datum;
	check_list_invariants(list);
	return new_cell;
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="236" endline="245" pcid="10">
{
	ListCell   *new_cell;

	Assert(IsOidList(list));

	new_cell = add_new_cell(list, prev);
	lfirst_oid(new_cell) = datum;
	check_list_invariants(list);
	return new_cell;
}
</source>
</clone>

<clone nlines="7" similarity="71">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1046" endline="1053" pcid="152">
{
	WRITE_NODE_TYPE("CONVERTROWTYPEEXPR");

	WRITE_NODE_FIELD(arg);
	WRITE_OID_FIELD(resulttype);
	WRITE_ENUM_FIELD(convertformat, CoercionForm);
	WRITE_LOCATION_FIELD(location);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1021" endline="1028" pcid="150">
{
	WRITE_NODE_TYPE("COERCEVIAIO");

	WRITE_NODE_FIELD(arg);
	WRITE_OID_FIELD(resulttype);
	WRITE_ENUM_FIELD(coerceformat, CoercionForm);
	WRITE_LOCATION_FIELD(location);
}
</source>
</clone>

<clone nlines="7" similarity="85">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="1004" endline="1012" pcid="331">
{
	READ_LOCALS(SetToDefault);

	READ_OID_FIELD(typeId);
	READ_INT_FIELD(typeMod);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="989" endline="997" pcid="330">
{
	READ_LOCALS(CoerceToDomainValue);

	READ_OID_FIELD(typeId);
	READ_INT_FIELD(typeMod);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
</clone>

<clone nlines="7" similarity="71">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="1004" endline="1012" pcid="331">
{
	READ_LOCALS(SetToDefault);

	READ_OID_FIELD(typeId);
	READ_INT_FIELD(typeMod);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="798" endline="805" pcid="319">
{
	READ_LOCALS(CaseTestExpr);

	READ_OID_FIELD(typeId);
	READ_INT_FIELD(typeMod);

	READ_DONE();
}
</source>
</clone>

<clone nlines="7" similarity="71">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="989" endline="997" pcid="330">
{
	READ_LOCALS(CoerceToDomainValue);

	READ_OID_FIELD(typeId);
	READ_INT_FIELD(typeMod);
	READ_LOCATION_FIELD(location);

	READ_DONE();
}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="798" endline="805" pcid="319">
{
	READ_LOCALS(CaseTestExpr);

	READ_OID_FIELD(typeId);
	READ_INT_FIELD(typeMod);

	READ_DONE();
}
</source>
</clone>

<clone nlines="7" similarity="71">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="212" endline="218" pcid="91">
	{
		s = (char *) (&value);
		appendStringInfo(str, "%u [ ", (unsigned int) length);
		for (i = 0; i < (Size) sizeof(Datum); i++)
			appendStringInfo(str, "%d ", (int) (s[i]));
		appendStringInfo(str, "]");
	}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="225" endline="230" pcid="93">
		{
			appendStringInfo(str, "%u [ ", (unsigned int) length);
			for (i = 0; i < length; i++)
				appendStringInfo(str, "%d ", (int) (s[i]));
			appendStringInfo(str, "]");
		}
</source>
</clone>

<clone nlines="6" similarity="83">
<source file="examples2/postgresql//smallpostgresql/value.c.ifdefed" startline="54" endline="60" pcid="348">
{
	Value	   *v = makeNode(Value);

	v->type = T_String;
	v->val.str = str;
	return v;
}
</source>
<source file="examples2/postgresql//smallpostgresql/value.c.ifdefed" startline="69" endline="75" pcid="349">
{
	Value	   *v = makeNode(Value);

	v->type = T_BitString;
	v->val.str = str;
	return v;
}
</source>
</clone>

<clone nlines="6" similarity="83">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1362" endline="1369" pcid="179">
{
	WRITE_NODE_TYPE("BITMAPORPATH");

	_outPathInfo(str, (Path *) node);

	WRITE_NODE_FIELD(bitmapquals);
	WRITE_FLOAT_FIELD(bitmapselectivity, "%.4f");
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1351" endline="1358" pcid="178">
{
	WRITE_NODE_TYPE("BITMAPANDPATH");

	_outPathInfo(str, (Path *) node);

	WRITE_NODE_FIELD(bitmapquals);
	WRITE_FLOAT_FIELD(bitmapselectivity, "%.4f");
}
</source>
</clone>

<clone nlines="6" similarity="83">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1214" endline="1220" pcid="167">
{
	WRITE_NODE_TYPE("SETTODEFAULT");

	WRITE_OID_FIELD(typeId);
	WRITE_INT_FIELD(typeMod);
	WRITE_LOCATION_FIELD(location);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="1204" endline="1210" pcid="166">
{
	WRITE_NODE_TYPE("COERCETODOMAINVALUE");

	WRITE_OID_FIELD(typeId);
	WRITE_INT_FIELD(typeMod);
	WRITE_LOCATION_FIELD(location);
}
</source>
</clone>

<clone nlines="6" similarity="83">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="937" endline="942" pcid="59">
{
	if (list_member(list, datum))
		return list;
	else
		return lappend(list, datum);
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="950" endline="955" pcid="60">
{
	if (list_member_ptr(list, datum))
		return list;
	else
		return lappend(list, datum);
}
</source>
</clone>

<clone nlines="6" similarity="83">
<source file="examples2/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="138" endline="143" pcid="255">
	{
		slen = strlen(p);
		pq_sendint(buf, slen + extra, 4);
		appendBinaryStringInfo(buf, p, slen);
		pfree(p);
	}
</source>
<source file="examples2/postgresql//smallpostgresql/pqformat.c.ifdefed" startline="168" endline="172" pcid="258">
	{
		slen = strlen(p);
		appendBinaryStringInfo(buf, p, slen);
		pfree(p);
	}
</source>
</clone>

<clone nlines="5" similarity="80">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="358" endline="364" pcid="102">
{
	WRITE_NODE_TYPE("BITMAPAND");

	_outPlanInfo(str, (Plan *) node);

	WRITE_NODE_FIELD(bitmapplans);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="368" endline="374" pcid="103">
{
	WRITE_NODE_TYPE("BITMAPOR");

	_outPlanInfo(str, (Plan *) node);

	WRITE_NODE_FIELD(bitmapplans);
}
</source>
</clone>

<clone nlines="4" similarity="75">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="870" endline="873" pcid="54">
	{
		if (!list_member_ptr(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="813" endline="816" pcid="50">
	{
		if (list_member(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}
</source>
</clone>

<clone nlines="4" similarity="75">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="870" endline="873" pcid="54">
	{
		if (!list_member_ptr(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="731" endline="734" pcid="44">
	{
		if (!list_member_ptr(result, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}
</source>
</clone>

<clone nlines="4" similarity="75">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="870" endline="873" pcid="54">
	{
		if (!list_member_ptr(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="707" endline="710" pcid="42">
	{
		if (!list_member(result, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}
</source>
</clone>

<clone nlines="4" similarity="75">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="895" endline="898" pcid="56">
	{
		if (!list_member_int(list2, lfirst_int(cell)))
			result = lappend_int(result, lfirst_int(cell));
	}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="754" endline="757" pcid="46">
	{
		if (!list_member_int(result, lfirst_int(cell)))
			result = lappend_int(result, lfirst_int(cell));
	}
</source>
</clone>

<clone nlines="4" similarity="75">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="920" endline="923" pcid="58">
	{
		if (!list_member_oid(list2, lfirst_oid(cell)))
			result = lappend_oid(result, lfirst_oid(cell));
	}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="777" endline="780" pcid="48">
	{
		if (!list_member_oid(result, lfirst_oid(cell)))
			result = lappend_oid(result, lfirst_oid(cell));
	}
</source>
</clone>

<clone nlines="4" similarity="75">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="844" endline="847" pcid="52">
	{
		if (!list_member(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="813" endline="816" pcid="50">
	{
		if (list_member(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}
</source>
</clone>

<clone nlines="4" similarity="75">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="844" endline="847" pcid="52">
	{
		if (!list_member(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="731" endline="734" pcid="44">
	{
		if (!list_member_ptr(result, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}
</source>
</clone>

<clone nlines="4" similarity="75">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="844" endline="847" pcid="52">
	{
		if (!list_member(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="707" endline="710" pcid="42">
	{
		if (!list_member(result, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}
</source>
</clone>

<clone nlines="4" similarity="75">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="813" endline="816" pcid="50">
	{
		if (list_member(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="731" endline="734" pcid="44">
	{
		if (!list_member_ptr(result, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}
</source>
</clone>

<clone nlines="4" similarity="75">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="813" endline="816" pcid="50">
	{
		if (list_member(list2, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="707" endline="710" pcid="42">
	{
		if (!list_member(result, lfirst(cell)))
			result = lappend(result, lfirst(cell));
	}
</source>
</clone>

<clone nlines="4" similarity="75">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="623" endline="627" pcid="122">
{
	WRITE_NODE_TYPE("MATERIAL");

	_outPlanInfo(str, (Plan *) node);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="306" endline="310" pcid="98">
{
	WRITE_NODE_TYPE("PLAN");

	_outPlanInfo(str, (Plan *) node);
}
</source>
</clone>

<clone nlines="4" similarity="75">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="623" endline="627" pcid="122">
{
	WRITE_NODE_TYPE("MATERIAL");

	_outPlanInfo(str, (Plan *) node);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="285" endline="289" pcid="96">
{
	_outPlanInfo(str, (Plan *) node);

	WRITE_UINT_FIELD(scanrelid);
}
</source>
</clone>

<clone nlines="4" similarity="75">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="502" endline="506" pcid="116">
{
	WRITE_NODE_TYPE("NESTLOOP");

	_outJoinPlanInfo(str, (Join *) node);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="494" endline="498" pcid="115">
{
	WRITE_NODE_TYPE("JOIN");

	_outJoinPlanInfo(str, (Join *) node);
}
</source>
</clone>

<clone nlines="4" similarity="75">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="386" endline="390" pcid="105">
{
	WRITE_NODE_TYPE("SEQSCAN");

	_outScanInfo(str, (Scan *) node);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="378" endline="382" pcid="104">
{
	WRITE_NODE_TYPE("SCAN");

	_outScanInfo(str, (Scan *) node);
}
</source>
</clone>

<clone nlines="4" similarity="75">
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="306" endline="310" pcid="98">
{
	WRITE_NODE_TYPE("PLAN");

	_outPlanInfo(str, (Plan *) node);
}
</source>
<source file="examples2/postgresql//smallpostgresql/outfuncs.c.ifdefed" startline="285" endline="289" pcid="96">
{
	_outPlanInfo(str, (Plan *) node);

	WRITE_UINT_FIELD(scanrelid);
}
</source>
</clone>

<clone nlines="4" similarity="75">
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="411" endline="414" pcid="19">
{
	Assert(IsPointerList(list));
	return lfirst(list_nth_cell(list, n));
}
</source>
<source file="examples2/postgresql//smallpostgresql/list.c.ifdefed" startline="1122" endline="1128" pcid="74">
{
	/*
	 * A "deep" free operation only makes sense on a list of pointers.
	 */
	Assert(IsPointerList(list));
	list_free_private(list, true);
}
</source>
</clone>

<clone nlines="4" similarity="100">
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="1336" endline="1339" pcid="345">
		{
			token = pg_strtok(&tokenLength);
			s[i] = (char) atoi(token);
		}
</source>
<source file="examples2/postgresql//smallpostgresql/readfuncs.c.ifdefed" startline="1325" endline="1328" pcid="343">
		{
			token = pg_strtok(&tokenLength);
			s[i] = (char) atoi(token);
		}
</source>
</clone>

</clones>
