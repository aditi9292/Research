table4 <- read.table("Desktop/EMSE_Figs/table4.txt", sep = ";", header = T)
names(table4)
t4 <- read.table("Desktop/EMSE_Figs/table4.txt", sep = ";", header = T)
rm(table4)
rm(t4)
t4 <- read.table("Desktop/EMSE_Figs/table4.txt", sep = ";", header = T)
names(t4)
plot(t4$Developers, t4$LOC)
f = data.frame(name=c("a", "a", "a", "b", "b"), val=(1, 2, 3, 4, 5))
f = data.frame(name=c("a", "a", "a", "b", "b"), val=c(1, 2, 3, 4, 5))
table(f$name)
table(f$name, f$val)
plot(exp(-2))
plot(e(-2))
library(stats)
rexp(n, rate = 1)
n = 10
rexp(n, rate = 1)
plot(rexp(n, rate = 1))
plot(order(rexp(n, rate = 1)))
plot(rep(exp(1:10)))
plot(rep(exp(0.1, 1)))
plot(rep(exp(0.1:1)))
plot(rep(exp(0.1:10)))
plot(rep(exp(-10:-1)))
projects =  c("M1",   "M2",   "M3",   "M4",   "M5",   "M6",   "M7",   "M8",   "M9",   "M10",  "M11",  "M12",  "M13",  "M14",  "M15",  "D1",   "D2",   "D3",   "D4",   "D5"    )#
files =     c(69,     131,    237,    229,    39,     15,     157,    306,    63,     43,     6,      250,    14,     32,     64,     386,    2360,   129,    91,     61      )#
lines =     c(20050,  12282,  22785,  32692,  14014,  2846,   47927,  23808,  5288,   10524,  2332,   24259,  4196,   5470,   17287,  123293, 276980, 12311,  27419,  17376   )#
devs =      c(4,      1,      11,     12,     12,     1,      16,     4,      1,      21,     1,      22,     2,      2,      2,      96,     71,     3,      6,      6       )#
coredevs =  c(1,      1,      2,      1,      2,      1,      4,      1,      1,      1,      1,      5,      1,      1,      1,      27,     18,     1,      2,      1       )#
androiddep =c(39,     16,     13,     14,     11,     20,     17,     7,      42,     17,     30,     11,     12,     25,     18      )#
javadep =   c(20,     13,     19,     21,     33,     19,     14,     38,     8,      64,     10,     13,     4,      7,      68      )#
reporters = c(4,      13,     267,    315,    8,      6,      1293,   178,    99,     18,     6,      591,    77,     33,     15,     3425,   1206,   35,     26,     25      )#
reported =  c(21,     15,     342,    425,    20,     7,      2518,   192,    120,    62,     7,      803,    100,    38,     98,     5104,   6287,   268,    64,     55      )#
bugdistro = c(92,     87,     59,     96,     83,     75,     71,     100,    74,     50,     100,    86,     86,     82,     71,     71,     62,     55,     47,     46      )#
fixweek =   c(44,     33,     79,     46,     20,     0,      31,     34,     36,     40,     80,     33,     20,     50,     100,    46,     19,     24,     21,     17      )#
fixmonth =  c(78,     78,     93,     66,     30,     100,    46,     63,     68,     63,     80,     53,     44,     83,     100,    96,     42,     37,     36,     43      )#
fixyear =   c(100,    100,    99,     98,     100,    100,    93,     100,    100,    100,    100,    98,     96,     100,    100,    100,    84,     80,     61,     80      )
androiddep + javadep
summary(androiddep + javadep)
lines/files
approx(lines/files)
a <- lines/files
approx(a)
approx?
;
?approx
round(a)
?install.packages( )
library(car)
library(caret)
createDataPartition()
source("http://bioconductor.org/biocLite.R")#
    biocLite("aroma.light")
library(mclust)
universe <- read.delim("/Users/meido/Desktop/Research/Projects/ProjectGeneralization_ICSE13/masterdata.txt", header=T, na.strings=c("", "NA"))#
#
# Create the sample model + do the ranking#
#
sample.model <- model.matrix(id ~ 0+twelve_month_contributor_count + total_code_lines + main_language_name +#
  commits_12months + FactoidAge + code_churn_12months + FactoidActivity, sample0)
sample.model <- model.matrix(id ~ 0+twelve_month_contributor_count + total_code_lines + main_language_name +#
  commits_12months + FactoidAge + code_churn_12months + FactoidActivity, sample0)
sample.model <- model.matrix(id ~ 0+twelve_month_contributor_count + total_code_lines + main_language_name +#
  commits_12months + FactoidAge + code_churn_12months + FactoidActivity, sample)
help(cutree)
universe <- read.delim("/Users/meido/Desktop/Research/Projects/ProjectGeneralization_ICSE13/masterdata.txt", header=T, na.strings=c("", "NA"))#
#
# Create the sample model + do the ranking#
#
sample.model <- model.matrix(id ~ 0+twelve_month_contributor_count + total_code_lines + main_language_name +#
  commits_12months + FactoidAgeYoung + code_added_12months + FactoidActivityDecreasing, universe)#
#
for (i in c(1:ncol(sample.model))) {#
  sample.model[,i] = rank(sample.model[,i], ties="min")#
}
library(mclust)#
mc = Mclust(sample.model)
hc = hclust(dist(sample.model, method="canberra"))
rm(ls())
ls()
rm(list=ls())
universe <- read.delim("/Users/meido/Desktop/Research/Projects/ProjectGeneralization_ICSE13/masterdata.txt", header=T, na.strings=c("", "NA"))#
#
# Create the sample model + do the ranking#
#
sample.model <- model.matrix(id ~ 0+twelve_month_contributor_count + total_code_lines + main_language_name +#
  commits_12months + FactoidAgeYoung + code_added_12months + FactoidActivityDecreasing, universe)#
#
for (i in c(1:ncol(sample.model))) {#
  sample.model[,i] = rank(sample.model[,i], ties="min")#
}
hc = hclust(dist(sample.model, method="canberra"))
library(mclust)#
mc = Mclust(sample.model)
rm(list=ls())
universe <- read.delim("/Users/meido/Desktop/Research/Projects/ProjectGeneralization_ICSE13/masterdata.txt", header=T, na.strings=c("", "NA"))#
#
Sample0 <- sample(universe, 1000)#
#
# Create the sample model + do the ranking#
#
sample.model <- model.matrix(id ~ 0+twelve_month_contributor_count + total_code_lines + main_language_name +#
  commits_12months + FactoidAgeYoung + code_added_12months + FactoidActivityDecreasing, Sample0)#
#
for (i in c(1:ncol(sample.model))) {#
  sample.model[,i] = rank(sample.model[,i], ties="min")#
}
length(universe)
length(universe$id)
rm(list=ls())#
universe <- read.delim("/Users/meido/Desktop/Research/Projects/ProjectGeneralization_ICSE13/masterdata.txt", header=T, na.strings=c("", "NA"))#
#
Sample0 <- sample(universe, 1000)
sample(universe,1)
a <- sample(universe,1)
length(a)
length(a$blanks_removed_lastmonth)
calss(a)
class(a)
head(a)
head(universe)
a <- sample(universe,100)
a <- sample(universe,46)
a <- sample(universe,47)
a <- universe[sample(1:nrow(universe), 50, replace = F),]
length(a)
length(a$id)
sample0 <- universe[sample(1:nrow(universe), 1000, replace = F),]
rm(list=ls())#
universe <- read.delim("/Users/meido/Desktop/Research/Projects/ProjectGeneralization_ICSE13/masterdata.txt", header=T, na.strings=c("", "NA"))#
#
Sample0 <- sample(universe, 1000)
rm(list=ls())#
universe <- read.delim("/Users/meido/Desktop/Research/Projects/ProjectGeneralization_ICSE13/masterdata.txt", header=T, na.strings=c("", "NA"))#
#
sample0 <- universe[sample(1:nrow(universe), 1000, replace = F),]
sample.model <- model.matrix(id ~ 0+twelve_month_contributor_count + total_code_lines + main_language_name +  commits_12months + FactoidAge + code_churn_12months + FactoidActivity, sample0)
for (i in c(1:ncol(sample.model))) {#
  sample.model[,i] = rank(sample.model[,i], ties="min")#
}#
#
# Simple k-means clustering â€“ Plot values#
#
x <- kmeans(sample.model, 20)
wss <- rep(NA, 100)#
for (i in 2:100) wss[i] <- sum(kmeans(sample.model, centers=i)$withinss)#
plot(1:100, wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
library(fpc)#
pamk0 <- pamk(sample.model, usepam=FALSE, krange=2:100)
Hierarchical clustering#
hc = hclust(dist(sample.model, method="canberra"))#
cluster_assignment = cutree(hc,c(1:10))
summary(hc)
hc$labels
summary(hc$labels)
EM clustering#
library(mclust)#
mc = Mclust(sample.model)
mc$classification
summary(mc)
SAMPLING SOFTWARE PROJECTS#
# Microsoft Research License Agreement#
# Non-Commercial Use Only #
# For the full license, please see file License.txt#
##
# (c) Microsoft Corporation. All rights reserved. #
## Similarity functions#
#
create.numeric.similarity.sd <- function(value.project, values.universe) {#
  stddev <- sd(values.universe)#
  function(value.other.project) { #
    value.project - stddev <= value.other.project & value.other.project <= value.project + stddev #
  }#
}#
#
create.numeric.similarity <- function(value.project, values.universe) {#
  lower <- 10 ^ (log10(value.project+1) - 0.5) - 1 #
  upper <- 10 ^ (log10(value.project+1) + 0.5) - 1#
  function(value.other.project) { #
    lower <= value.other.project & value.other.project <= upper #
  }#
}#
#
create.factor.similarity <- function(value.project, values.universe) {#
  function(value.other.project) { #
    value.project == value.other.project #
  }#
}#
## score a sample of projects in a universe for a given space#
#
score.projects <- function(sample, universe, space, configuration=NA) {#
  variables <- all.vars(space)#
#
  if ( length(setdiff(variables, names(sample))) > 0 ) #
    stop(gettextf("variables '%s' not found in sample", paste(setdiff(variables, names(sample)), collapse=", ")), domain = NA)             #
#
  if ( length(setdiff(variables, names(universe))) > 0 ) #
    stop(gettextf("variables '%s' not found in universe", paste(setdiff(variables, names(universe)), collapse=", ")), domain = NA)             #
#
  project_var <- variables[1]#
  dimension_vars <- variables[-1]#
  dim_index_matrix <- matrix(rep(F, length=length(dimension_vars)*nrow(universe)), #
                             nrow=length(dimension_vars), ncol=nrow(universe), byrow=T)#
  index_set <- rep(F, length=nrow(universe))#
  if (nrow(sample)>0) for (pid in 1:nrow(sample)) {#
    project_index_set <- rep(T, length=nrow(universe))#
#
    for (dim in 1:length(dimension_vars)) {#
      dimension <- dimension_vars[dim]#
      if (dim <= length(configuration) & !is.na(configuration[dim])) {#
        is.similar <- configuration[[dim]](sample[pid,dimension], universe[,dimension])#
        d <- is.similar(universe[,dimension])      #
      }#
      else if (is.numeric(universe[,dimension])) {#
        is.similar <- create.numeric.similarity(sample[pid,dimension], universe[,dimension])#
        d <- is.similar(universe[,dimension])#
      }#
      else if (is.factor(universe[,dimension])) {#
        is.similar <- create.factor.similarity(sample[pid,dimension], universe[,dimension])#
        d <- is.similar(universe[,dimension])#
      }#
      else {#
        stop(gettextf("no similarity function defined for '%s'", dimension, domain = NA))         #
      }#
      dim_index_matrix[dim,] <- dim_index_matrix[dim,] | d#
      project_index_set <- project_index_set & d#
    }#
    index_set <- index_set | project_index_set#
  }#
  score <- sum(index_set, na.rm=T)/length(index_set)#
  dimension_score <- apply(dim_index_matrix, 1, function(x) { sum(x, na.rm=T)/length(x) })#
  return(list(dimensions=dimension_vars,#
              score=score, dimension.score=dimension_score,#
              score.indexset=index_set, dimension.indexset=dim_index_matrix))#
}#
## Compute the N next projects that if added to the sample maximize the score#
#
next.projects <- function(N, sample, universe, space, configuration=NA) {#
#
  start_time <- Sys.time()#
  variables <- all.vars(space)#
  if ( length(setdiff(variables, names(sample))) > 0 ) #
    stop(gettextf("variables '%s' not found in sample", paste(setdiff(variables, names(sample)), collapse=", ")), domain = NA)             #
  if ( length(setdiff(variables, names(universe))) > 0 ) #
    stop(gettextf("variables '%s' not found in universe", paste(setdiff(variables, names(universe)), collapse=", ")), domain = NA)             #
  dimension_vars <- variables[-1]#
#
  candidates <- universe#
  candidates$score.increase <- 1#
#
  result <- sample[-1:-nrow(sample),]#
#
  print(paste("Computing similarity matrix... This may take a while, please be patient.", Sys.time()))#
  similar_project_matrix <- matrix(data=F, nrow=nrow(candidates), ncol=nrow(universe), byrow=T)#
#
  for (pid in 1:nrow(candidates)) {#
    project_index_set <- rep(T, length=nrow(universe))#
#
    for (dim in 1:length(dimension_vars)) {#
      dimension <- dimension_vars[dim]#
      if (dim <= length(configuration) & !is.na(configuration[dim])) {#
        is.similar <- configuration[[dim]](candidates[pid,dimension], universe[,dimension])#
        d <- is.similar(universe[,dimension])      #
      }#
      else if (is.numeric(candidates[,dimension])) {#
        is.similar <- create.numeric.similarity(candidates[pid,dimension], universe[,dimension])#
        d <- is.similar(universe[,dimension])#
      }#
      else if (is.factor(candidates[,dimension])) {#
        is.similar <- create.factor.similarity(candidates[pid,dimension], universe[,dimension])#
        d <- is.similar(universe[,dimension])#
      }#
      else {#
        stop(gettextf("no similarity function defined for '%s'", dimension, domain = NA))         #
      }#
      project_index_set <- project_index_set & d#
    }#
    similar_project_matrix[pid,] <- project_index_set#
  }#
  print(paste("Computing similarity matrix... Done", Sys.time()))#
#
  # Initial score#
  sc <- score.projects(rbind(sample, result[,1:ncol(sample)]), universe, space, configuration)#
  sc.score <- sc$score#
  sc.score.indexset <- sc$score.indexset#
  print(paste("Finding next projects... This may take a while, please be patient.", Sys.time()))#
  # Compute n next projects#
  num_projects = nrow(universe)#
  candidate_list <- 1:nrow(candidates)#
  for (n in 1:N) {    #
    best.increase.sofar <- 0#
    count <- 0#
    for (pid in candidate_list) {#
      if (best.increase.sofar >= candidates[pid,]$score.increase) break;#
      count <- count + 1#
      index_set <- sc.score.indexset | similar_project_matrix[pid,]#
      score <- sum(index_set, na.rm=T)/num_projects#
      candidates[pid,]$score.increase <- score - sc.score#
      best.increase.sofar <- max(candidates[pid,]$score.increase, best.increase.sofar)#
    }#
#
    new_order = order(candidates$score.increase, decreasing=T, na.last=NA)#
    best.increase.row <- new_order[1]#
    result = rbind(result, candidates[best.increase.row,])#
    sc.score.indexset <- sc.score.indexset | similar_project_matrix[best.increase.row,]#
    sc.score <- sum(sc.score.indexset, na.rm=T)/num_projects#
    candidates[best.increase.row,]$score.increase <- NA#
    candidate_list = new_order[-1]#
    print(paste("Found", n, "projects. New score", sc.score, Sys.time()))#
    if (sc.score>=1.0) break; # we have covered everything#
  }#
#
  sc <- score.projects(rbind(sample, result[,1:ncol(sample)]), universe, space, configuration)#
  return(list(new.projects=result, score=sc))#
}#
#
# url <- "http://sailhome.cs.queensu.ca/replication/representativeness/masterdata.txt"#
# ohloh <- read.delim(url, header=T, na.strings=c("", "NA"))#
# sample <- ohloh[ohloh$name=="Mozilla Firefox",]#
# score <- score.projects(sample, universe=ohloh, id ~ total_code_lines + twelve_month_contributor_count)#
#
# np <- next.projects(10, sample, universe=ohloh, id ~ total_code_lines + twelve_month_contributor_count)#
#
# score.2 <- score.projects(sample, universe=ohloh, id ~ total_code_lines + twelve_month_contributor_count, configuration=c(create.numeric.similarity.sd, NA))
url <- "http://sailhome.cs.queensu.ca/replication/representativeness/masterdata.txt"#
ohloh <- read.delim(url, header=T, na.strings=c("", "NA"))#
sample <- ohloh[ohloh$name=="Mozilla Firefox",]#
score <- score.projects(sample, universe=ohloh, id ~ total_code_lines + twelve_month_contributor_count)#
The resulting total score is in score$score and the dimension scores are in score$dimension.score.
url <- "http://sailhome.cs.queensu.ca/replication/representativeness/masterdata.txt"#
ohloh <- read.delim(url, header=T, na.strings=c("", "NA"))#
sample <- ohloh[ohloh$name=="Mozilla Firefox",]#
score <- score.projects(sample, universe=ohloh, id ~ total_code_lines + twelve_month_contributor_count)
head(score)
np <- next.projects(10, sample, universe=ohloh, id ~ total_code_lines + twelve_month_contributor_count)
np
install.packages("treemap")
.Platform$file.sep
library(mclust)#
result<-c()#
mydata=read.csv(file.path("/Users/meido/Desktop/Research/Projects/Kazuhiro_ICSE2014_BugGeneralization/project_level_metrics_for_cluster.csv",fsep=.Platform$file.sep),header=TRUE,sep=",")
head(mydata)
newData<-mydata[,c(2:9)]
cluster <- Mclust(newData)#
#
result<-cbind(result,cluster$classification)
head(result)
result
clear
head(data)
head(Mydata)
head(mydata)
tempData<-mydata[,c(2:5,9)]
head(tempData)
tempcluster <- Mclust(tempData)#
#
tempresult<-cbind(tempresult,tempcluster$classification)
tempresult<-c()
tempresult<-cbind(tempresult,tempcluster$classification)
head(tempresult)
head(result)
summary(cluster)
clster
cluster
summary(tempcluster)
corr(newData)
cor(newData)
cor(tempdata)
cor(tempData)
head(mydata)
summary(mydata)
tempData<-mydata[,c(2:6)]
cor(tempData)
summary(tempData)
rm(list=ls())
ls()
library(mclust)#
result<-c()#
mydata=read.csv(file.path("/Users/meido/Desktop/Research/Projects/Kazuhiro_ICSE2014_BugGeneralization/project_level_metrics_for_cluster_v2.csv",fsep=.Platform$file.sep),header=TRUE,sep=",")
summary(mydata)
boxplot(mydata$X.ofCommits)
summary(mydata$Age/(365*24*60*60))
summary(mydata$X.ofCommits/(mydata$Age/(365*24*60*60)))
newage = mydata$Age/(365*24*60*60)
summary(mydata$X.ofCommits/newage)
bocplot(mydata$X.ofCommits/newage)
boxplot(mydata$X.ofCommits/newage)
boxplot(newage)
rm(list=ls())#
library(mclust)#
result<-c()#
mydata=read.csv(file.path("/Users/meido/Desktop/Research/Projects/Kazuhiro_ICSE2014_BugGeneralization/project_level_metrics_for_cluster_v3.csv",fsep=.Platform$file.sep),header=TRUE,sep=",")
head(mydata)
summary(mydata)
summary((mydata$timeoflastCommit-mydata$timeoffirstCommit))
summary((mydata$timeoflastCommit-mydata$timeoffirstCommit)/(365*24*60*60))
length(mydata$projectName)
rm(list=ls())#
library(mclust)#
result<-c()#
mydata=read.csv(file.path("/Users/meido/Desktop/Research/Projects/Kazuhiro_ICSE2014_BugGeneralization/project_level_metrics_for_cluster_v4.csv",fsep=.Platform$file.sep),header=TRUE,sep=",")
length(mydata$projectName)
head(mydata)
summary(mydata)
summary((mydata$timeoflastCommit-mydata$timeoffirstCommit)/(365*24*60*60))
t = subset(mydata, mydata$medianLOC==0)
length(t$medianLOC)
t
t2 = subset(mydata, mydata$medianComplexity==0)
t2
dim(t2)
a <- mydata
a[(a$medianComplexity != 0),]
b <- a[(a$medianComplexity != 0),]
dim(t2)
dim(mydata)
dim(b)
6944+446
c <- b[(b$medianLOC != 0),]
dim(c)
summary(c)
plot(log(c$medianLOC))
c <- b[(b$medianLOC >= 10),]
plot(log(c$medianLOC))
dim(c)
rm(list=ls())
library(mclust)#
result<-c()#
mydata<-read.csv(file.path("C:/Users/K.Yamashita/Desktop/project_level_metrics_for_cluster_v4.csv",fsep=.Platform$file.sep),header=TRUE,sep=",")#
newData<-mydata[(mydata$medianComplexity != 0),]#
newData<-newData[(newData$medianLOC >= 10),]
rm(list=ls())
rm(list=ls())#
library(mclust)#
result<-c()#
mydata=read.csv(file.path("/Users/meido/Desktop/Research/Projects/Kazuhiro_ICSE2014_BugGeneralization/project_level_metrics_for_cluster_v4.csv",fsep=.Platform$file.sep),header=TRUE,sep=",")
newData<-mydata[(mydata$medianComplexity != 0),]#
newData<-newData[(newData$medianLOC >= 10),]
dim(newData)
age<-c((newData$timeoflastCommit-newData$timeoffirstCommit)/(365*24*60*60))
summary(newData)
newData<-mydata[(mydata$medianComplexity != 0),]#
newData<-newData[(newData$medianLOC >= 10),]#
age<-c((newData$timeoflastCommit-newData$timeoffirstCommit)/(365*24*60*60))#
newData<-newData[,c(2:6)]#
newData<-cbind(newData,age)
dim(newData)
summary(newData)
plot(newData$age)
cluster <- Mclust(newData)#
#
result<-cbind(result,cluster$classification)
summary(result)
summary(cluster)
proj = read.csv(file.path("/Users/meido/Desktop/Research/Projects/Kazuhiro_ICSE2014_BugGeneralization/rsquared_result_with_buginfo_projmetrics.csv",fsep=.Platform$file.sep),header=TRUE,sep=",")
summary(proj)
dim(proj)
tempmydata = cbind(mydata, result)
rm(list=ls())#
library(mclust)#
result<-c()#
mydata=read.csv(file.path("/Users/meido/Desktop/Research/Projects/Kazuhiro_ICSE2014_BugGeneralization/newclusterID.csv",fsep=.Platform$file.sep),header=TRUE,sep=",")
rm(list=ls())#
library(mclust)#
result<-c()#
mydata=read.csv(file.path("/Users/meido/Desktop/Research/Projects/Kazuhiro_ICSE2014_BugGeneralization/newcluserID.csv",fsep=.Platform$file.sep),header=TRUE,sep=",")
summary(mydata)
table(mydata$oldClusterID)
dim(mydata)
table(mydata$newClusterID)
alldata = read.csv(file.path("/Users/meido/Desktop/Research/Projects/Kazuhiro_ICSE2014_BugGeneralization/project_level_metrics_for_cluster_v4.csv"
,fsep=.Platform$file.sep),header=TRUE,sep=",")
head(alldata)
rm(list=ls())#
library(mclust)#
result<-c()#
mydata=read.csv(file.path("/Users/meido/Desktop/Research/Projects/Kazuhiro_ICSE2014_BugGeneralization/newclusterID.csv",fsep=.Platform$file.sep),header=TRUE,sep=",")
summary(mydata)
table(mydata$clusterID)
dim(mydata)
rm(list=ls())#
library(mclust)#
result<-c()#
mydata=read.csv(file.path("/Users/meido/Desktop/Research/Projects/Kazuhiro_ICSE2014_BugGeneralization/newclusterID.csv",fsep=.Platform$file.sep),header=TRUE,sep=",")
dim(mydata)
table(mydata$clusterID)
rm(list=ls())#
library(mclust)#
result<-c()#
mydata=read.csv(file.path("/Users/meido/Desktop/Research/Projects/Kazuhiro_ICSE2014_BugGeneralization/newclusterID.csv",fsep=.Platform$file.sep),header=TRUE,sep=",")
table(mydata$clusterID)
rm(list=ls())#
library(mclust)#
result<-c()#
mydata=read.csv(file.path("/Users/meido/Desktop/Research/Projects/Kazuhiro_ICSE2014_BugGeneralization/newclusterID_v2.csv",fsep=.Platform$file.sep),header=TRUE,sep=",")
table(mydata$clusterID)
summary(mydata)
a = mydata
plot(a$medianLOC, a$medianComplexity)
cor(a[,2:8])
cor(a[,3:8])
rm(list=ls())#
library(mclust)#
result<-c()#
mydata=read.csv(file.path("/Users/meido/Desktop/Research/Projects/Kazuhiro_ICSE2014_BugGeneralization/project_level_metrics_for_cluster_v4.csv",fsep=.Platform$file.sep),header=TRUE,sep=",")
cor(mydata[,3:8])
names(mydata)
cor(mydata[,2:8])
age = (mydata$timeoflastCommit-mydata$timeoffirstCommit)/(365*24*60*60)
mydata = cbind(mydata[,2:6],age)
names(mydata)
cor(mydata)
cor(a[,3:8])
x<- 1:10; y<- 1:15; z<- outer( x,y,"+") #
#
image.plot(x,y,z)
library("image.plot {fields}")
library("image.plot")
library("fields")
x<- 1:10; y<- 1:15; z<- outer( x,y,"+") #
#
image.plot(x,y,z)
require(MASS)
sim <- function(n, sigma=2.5, pr=F, prcor=F){}
sim <- function(n, sigma=2.5, pr=F, prcor=F){ }
cut2(c(1:100), 2)
library(Hmisc)
cut2(c(1:100), 2)
set.seed(1)#
x <- runif(1000, 0, 100)#
z <- cut2(x, c(10,20,30))#
table(z)#
table(cut2(x, g=10))      # quantile groups#
table(cut2(x, m=50))
data(ufc)
library(â€˜equivalenceâ€™)
library('equivalence')
data(ufc)
names(ufc)
summary(ufc)
tost(ufc$Height.m.p, ufc$Height.m, epsilon = 1)
ufc.ht <- ufc[!is.na(ufc$Height),]#
equivalence.xyplot(ufc.ht$Height.m ~ ufc.ht$Height.m.p,#
alpha=0.05, b0.ii=0.1, b1.ii=0.2,#
xlab="Predicted height (m)",#
ylab="Measured height (m)")
getwd()
setwd("/Users/meido/Dropbox/Android_Data_IEEE_Journal/data")
rm(list = ls())
G1 = read.csv("0-3.csv", header = T)#
G2 = read.csv("3-5.csv", header = T)#
#
i = 3#
n = ncol(G1)#
name_vec = names(G1)#
#
G1[,5:7] = 1000*(G1[,5:7]/G1[,8])#
G1[,9:n] = 1000*(G1[,9:n]/G1[,8])#
G2[,5:7] = 1000*(G2[,5:7]/G2[,8])#
G2[,9:n] = 1000*(G2[,9:n]/G2[,8])
setwd("/Users/meido/Dropbox/Android_Data_IEEE_Journal/data/12_11_data/2")
rm(list = ls())
G1 = read.csv("0-3.csv", header = T)#
G2 = read.csv("3-5.csv", header = T)#
#
i = 3#
n = ncol(G1)#
name_vec = names(G1)#
#
G1[,5:7] = 1000*(G1[,5:7]/G1[,8])#
G1[,9:n] = 1000*(G1[,9:n]/G1[,8])#
G2[,5:7] = 1000*(G2[,5:7]/G2[,8])#
G2[,9:n] = 1000*(G2[,9:n]/G2[,8])
while(i <= n)#
{#
  l = wilcox.test(G1[,i], G2[,i], alternative="less")#
  if(l$p.value < 0.05)#
    print(paste(name_vec[i], "is less with p value", l$p.value))#
  g = wilcox.test(G1[,i], G2[,i], alternative="greater")#
  if(g$p.value < 0.05)#
    print(paste(name_vec[i], "is greater with p value", g$p.value))#
  if(l$p.value < 0.05 | g$p.value < 0.05)#
  {#
    #boxplot(G1[,i], G2[,i])#
    #print(paste(name_vec[i], "0 - 3 : ", median(G1[,i])))#
    #print(paste(name_vec[i], "3 - 5 : ", median(G2[,i])))  #
  }#
  i = i + 1#
}
