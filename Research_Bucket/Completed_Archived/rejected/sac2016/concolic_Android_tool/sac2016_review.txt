Dear Daniel Krutz:

We are sorry to inform you that the following submission was not selected by the program committee to appear at SAC 2016: 

      Concolic Analysis for Android Applications

The selection process was very competitive. Due to time and space limitations, we could only choose a small number of the submitted papers to appear on the program. 

We have enclosed the reviewer comments for your perusal.

If you have any additional questions, please feel free to get in touch.

Best Regards,
Mercedes Merayo and Gwen Sala√ºn
SAC 2016, SVT - Software Verification and Testing

============================================================================
SAC 2016 Reviews for Submission #1170
============================================================================ 

Title: Concolic Analysis for Android Applications

Authors: Daniel Krutz, Patrick McAfee and Samuel Malachowsky ============================================================================
                            REVIEWER #1
============================================================================ 


---------------------------------------------------------------------------
Reviewer's Scores
---------------------------------------------------------------------------

          Technical Content and Accuracy: 5
                Significance of the Work: 1 Appropriate Title, Introduction, and Conclusion: 5
                    Overall Organization: 4
                 Appropriateness for SAC: 5
          Style and Clarity of the Paper: 4
                  Originality of Content: 1
                  OVERALL RECOMMENDATION: 2


---------------------------------------------------------------------------
Comments
---------------------------------------------------------------------------

This is a short (3 page) tool paper describing the concolic testing tool for Android. The tool itself is a combination of existing tools: Apktool, Dex2Jar, Robolectric, and JPF. 

I assume that the main contribution of the current tool is the integration of all of the above mentioned components. However, the paper is very thin on content. It is not clear whether the orchestration is a significant scientific or engineering challenge. 

Finally, I would expect a tool paper of this kind to be accompanied with an interesting case study or a significant performance comparison on benchmarks programs. But none are presented in the paper.

============================================================================
                            REVIEWER #2
============================================================================ 


---------------------------------------------------------------------------
Reviewer's Scores
---------------------------------------------------------------------------

          Technical Content and Accuracy: 2
                Significance of the Work: 2 Appropriate Title, Introduction, and Conclusion: 4
                    Overall Organization: 3
                 Appropriateness for SAC: 4
          Style and Clarity of the Paper: 3
                  Originality of Content: 2
                  OVERALL RECOMMENDATION: 2


---------------------------------------------------------------------------
Comments
---------------------------------------------------------------------------

------- Summary. ----------

This paper presents CAA, a concolic testing tool for Android applications which performs concolic analysis of Android applications without emulator or a physical device. The user provides the path to the application (APK) file, and the tool performs several preliminary steps and runs an existing tool, Java Pathfinder. The outputs are recorded and can be used (e.g. for clone detection, discovering defects, etc.)

------- Evaluation. ----------

This paper is clearly a tool paper. It presents the tool, its architecture, used components, usage, limitations and related work. Globally the paper is easy to read.

The paper does not provide any experiments or even a running example. 

Sadly, the presentation of the tool is very short (3 pages) and not sufficiently elaborated. Most steps rely on already existing tools and libraries. The main additional steps are only briefly summarized in two paragraphs. 

For a publication as a regular size paper in a selective international conference, it would be desirable to give more than a general description of the tool (some sections look more like a user manual than a scientific publication). I would encourage the authors to detail the really difficult steps of the tool, maybe using an example, or demonstrate original engineering solutions used in the tool, and show its applications. The reader should learn more from the paper.

Some parts of the paper are not sufficiently clear. The description of concolic analysis could be better presented (or skipped). The presentation of the third and fourth steps should be made clearer, as well as the role of each component (wrapper, blocklist, reflection,...). 

Regarding related work, the authors say that a previous tool Droidel has also addressed the problem of a non-existing entry point (main function). Does the present paper propose the same or a different solution?

Overall, I think the paper is not ready to be accepted at SAC-SVT in the present state.

============================================================================
                            REVIEWER #3
============================================================================ 


---------------------------------------------------------------------------
Reviewer's Scores
---------------------------------------------------------------------------

          Technical Content and Accuracy: 3
                Significance of the Work: 3 Appropriate Title, Introduction, and Conclusion: 4
                    Overall Organization: 5
                 Appropriateness for SAC: 5
          Style and Clarity of the Paper: 4
                  Originality of Content: 3
                  OVERALL RECOMMENDATION: 3


---------------------------------------------------------------------------
Comments
---------------------------------------------------------------------------

The authors present a tool chain for analyzing Android applications to detect bugs and vulnerabilities. The main idea is to take APK packages and convert them in such a way that they can become the input of the Java Pathfinder tool, which does the actual code analysis.

The authors describe the different steps in the tool chain and the different challenges they face on the way. Moreover, they describe how to setup and run the tool.

However, there are no results or even examples yet. It is not clear if the whole process is successful enough to produce meaningful results. It is especially unclear if the various translations and modifications still maintain an meaningful enough model such that JPF can deliver actionable results.

This seems to be early work and the benefits are not yet clear. We would expect a publication once some experience section based on proper evaluation is added in the future. 

Minor
------

JPF is a software model checker and it's a bit of a stretch to call it concolic testing, where one would expect symbolic execution of traces
