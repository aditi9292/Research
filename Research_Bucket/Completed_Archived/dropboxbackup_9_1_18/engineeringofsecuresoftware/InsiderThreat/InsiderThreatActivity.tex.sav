\documentclass[conference]{IEEEtran}

%%%% Bibtex then pdfLatex

\usepackage{cite}
\usepackage{listings}
\usepackage{booktabs}
\usepackage{color}
\usepackage{array}
\usepackage{subfigure}
\usepackage{balance} % Add this back in. Probably needed during camera ready.
\usepackage{url}
\usepackage{times} % Used for formatting formatting url footnotes
\urlstyle{same} % Used for formatting formatting url footnotes
\usepackage{caption} % Used for formatting formatting url footnotes
\usepackage{listings}


\newcommand{\todo}[1]{\textcolor{cyan}{\textbf{[#1]}}}
\newcommand{\andy}[1]{\textcolor{red}{{\it [Andy says: #1]}}}
\newcommand{\dan}[1]{\textcolor{blue}{{\it [Dan says: #1]}}}
\newcommand{\sam}[1]{\textcolor{green}{{\it [Sam says: #1]}}}

\begin{document}

\title{An Insider Threat Activity in a Software Security Course}

\author{\IEEEauthorblockN{Daniel E. Krutz, Andrew Meneely, and Samuel A. Malachowsky}
Rochester Institute of Technology\\
\{dxkvse, axmvse, samvse\}@rit.edu

}


\maketitle
\begin{abstract}

% These malicious actors use their status as a project insider for project exploitation. Recent exploits include cases of intellectual and customer data theft and outright sabotage. Most insider threat crimes occur at the workplace during business hours, with the insiders are of the potential consequences, and are are usually committed for financial gain.


Software development teams face a critical threat to the security of their systems: insiders. A malicious insider is a person who violates an authorized level of access in a software system. Unfortunately, when creating software, developers do not typically account for insider threat. Students learning software development are unaware of the impacts of malicious actors and are far too often untrained in prevention methods against them. A few of the defensive mechanisms to protect against insider threats include eliminating system access once an employee leaves an organization, enforcing principle of least privilege, code reviews, and constant monitoring for suspicious activity.

At the Department of Software Engineering at the Rochester Institute of Technology, we require a course titled Engineering Secure Software and have created an activity designed to prepare students for the problem of insider threats. At the beginning of this activity, student teams are given the task of designing a moderately sized secure software system. The goal of this insider is to manipulate the team into creating a flawed system design that would allow attackers to perform malicious activities once the system has been created. When the insider is revealed at the conclusion of the project, students discuss countermeasures regarding the malicious actions the insiders were able to plan or complete, along with methods of prevention that may have been employed by the team to detect the malicious developer.

In this paper, we describe the activity along with the results of a survey. We discuss the benefits and challenges of the activity with the goal of giving other instructors the tools they need to conduct this activity at their institution. While many institutions do not offer courses in computer security, this self-contained activity may be used in any computing course to enforce the importance of protecting against insider threats.


\end{abstract}

\begin{IEEEkeywords} Software Security, Software Engineering, Computing Education\end{IEEEkeywords}


%\todo{define the categories and fix the keywords \& terms}
% A category with the (minimum) three required fields
%\category{H.4}{Information Systems Applications}{Miscellaneous}
%A category including the fourth, optional field follows...
%\category{D.2.8}{Software Engineering}{Metrics}[complexity measures, performance measures]


%\category{K.3.2}{Computers and Education}Computers and Information
%Science Education- Computer science education; Curriculum

%\terms{xxx, xxxx, xxxx}

%% My best show at keywords
%\keywords{xxxxx, xxxxxx, xxxx}

\section{Introduction}




Organizations devote vast amounts of time and resources protecting themselves against outside threats. These protection mechanisms could be in many forms including firewalls, data encryption or defensive coding practices. A much more difficult threat to protect against is one which comes from within the company. An~\emph{insider threat} is a current or former employee, business partner, or contractor who has access to an organization's data, network, source code, or other sensitive information who may intentionally misuse this information and negatively affect the availability, integrity or confidentiality of the organization's information system. Examples of insider attacks include data harvesting, abuse of privileges sabotage or masquerading attacks. Additionally, a user could act as an insider threat and have no actual malicious intent. Inadvertent use of computing resources or data could make a system susceptible to attack, or could unintentionally release sensitive data~\cite{capp_bibtex}. Insider threats are much more difficult to identify since they are often using a system which they developed and often left back doors in and have an intimate knowledge of, and are not considered to be potential threats to the system~\cite{Nostro:2014:ITA:2694737.2694740}. Often, companies mitigate the risk of insider threats through the use of policies and regulations~\cite{5137280}.

Recent studies by ---------- have shown that  \todo{find stats}. Previous instances of insider threats have been\todo{complete}. \todo{add more to this about what the problem is}


% Insider threats are almost always mitigated through regulations and policies~\cite{5137280}.


% Build on the negative impacts of insider threats. Discuss some statistics here. Make the reader understand the negative impacts of insider threats and why it is an important concept to teach - What is the problem we are solving here?.


% When do insider threats usually happens

Far too often, software engineers are not prepared to deal with fact that their co-workers, people who they should trust and be allies with, are in fact potentially malicious users capable of performing a wide range of destructive actions. In educational settings, students typically either work alone, or with teams where instructors preach the importance of teamwork and trust. While these concepts are important, in the real world some team members


At the Rochester Institute of Technology, we created an upper division Engineering of Secure Software applications course to help students understand how to incorporate proper security protection practices when designing, creating and maintaining software. Some course topics include defensive coding practices, deployment \& distribution strategies, vulnerability assessments and threat modeling. In this course, we created an activity to help acclimate students with how to understand, protect, and recognize insider threats. Students teams are formed and students are given the task of designing a small application and planning for proper security. One student from each team is quietly pulled aside and told that they are the insider threat or~\emph{mole} for their team. Their goal is to have their team design an application containing a vulnerability which the mole would be able to later use. After the activity, the moles are revealed and a discussion takes place regarding how the moles were able to create the vulnerability, if the team recognized this vulnerability, and what could have been done to prevent this insider threat.
% Probably a good idea to add more to the discussion topics?


% Insiders will learn how malicious insiders work and this "thinking like an insider" will help to prepare them for this threat in future when faced in the real world


The rest of the paper is organized as follows: Section~\ref{sec: aboutcourse} describes the course including learning objectives. Section~\ref{sec: activity} discusses how the activity was conducted. Section~\ref{sec: discussion} introduces the goals of the post activity discussion and potential topics. Section~\ref{sec: studentfeedback} provides student feedback about the project including quotes and post activity survey analytics while Section~\ref{sec: relatedwork} presents some related works and Section~\ref{sec: futurework} concludes the paper with a discussion of future work and a summary. \dan{make sure these sections are up to date}






\section{About the course}
\label{sec: aboutcourse}

Primarily comprised of upper division Software Engineering students, the Engineering of Secure Software
course\footnote{\url{http://www.se.rit.edu/~swen-331/}} was created in 2012\todo{check this} and is focused on instructing students in the proper practices of design and creating secure software. The only prerequisite is the Introduction to Software Engineering course. In this class, students are introduced to core concepts in software development such as development methodologies, team work in software development, basic testing principles, and software design.

The course has several primary learning outcomes: Reducing or eliminating security breaches in software intensive systems, and the proper methods of designing, developing, testing and maintaining secure software \dan{Andy: Help with these}. While the course is language agnostic and focuses on principles and practices, specific tools and technologies are used to reinforce the learning objectives of the course. For instance, Microsoft's SDL Threat Modeling Tool\footnote{\url{www.microsoft.com/security/sdl/adopt/threatmodeling.aspx}} is used to instruct students on the proper methods of designing the architecture of a secure system. Specific Java based examples are used to demonstrate SQL injection attacks, log overflow attacks, hashing and salt, and path traversal exploits. Short Vulnerability of the Day activities serve to introduce students to real world examples of exploits and demonstrate the importance of software security~\ \cite{MeneelyICSESEE2013}. Students work in small teams on several course projects including the creation of a web fuzz testing tool, and a case study which examines a real world software project for vulnerabilities.

While we do not expect all students taking the course to become security experts, our goal is to instill fundamental principles of secure software development upon the students while demonstrating its importance in the real world. Students are graded on several criteria. Each term there are three exams, several short projects and brief in class activities. Class size is typically 25-35 students and is a required course in our curriculum.


\dan{Might be a good idea to add to this section}

% I am not sure this section is formatted in the correct manner
\subsection{Protection Against Insider threats}
% Discuss some protection mechamisms about insider threats


While there is no easy or simple silver bullet protection mechanism against insider threats, there are some best practices which may be used to help alleviate this risk. \todo{Add more }



% ? Should more be added to this?
%       Could break this down on a week by week basis

\section{Insider Threat Activity}
\label{sec: activity}

% Add in introduction
We will describe the sample project which we used, the activity conducted by the students, provide example vulnerabilities which the insider threats were able to create, and finally describe goals o\todo{finish}

\subsection{Sample Project}
% Describe student grading system

Students are initially told that they are being asked to design a secure software system. In our course instances, we asked them to design a student grading system, much like ones which are typically used at many institutions. We selected this example since we felt it was complex enough for students to have to actively consider numerous possible vulnerabilities and would allow for our insider threats to act maliciously, but simple enough for teams to design it in a class meeting or two. Additionally, we felt that students would be reasonably familiar with a system such as this. Some basic requirements for this system were: Students should be able to view their grades, but not alter them or view the grades of their classmates. Instructors should be able to view the grades for all students, but only modify grades for students in the specific courses they were teaching. School administrators should be able to view and alter the grades of all students, at any time. All users are required to access the system using their username and password, and ff any they forgot their password, the system should send a reminder to the person via email and allow them update the password from that link. The application also needed to be accessible from anywhere in the world using a basic web connection. Non-functional requirements included that the application database should be backed up on a nightly basis to an off-site location. For debugging purposes, all errors and user actions should be logged for system administrators.\dan{Add more to these?}


\subsection{Activity}

Once teams were given the basic requirements for their system, student teams of 4-6 students as this is often the size of groups in industry and has been found to be conducive to student learning in previous research~\cite{Guo:2009:GPS:1516546.1516579, Petkovic:2006:TPS:1140123.1140202}. Before the start of the activity, students were emailed asking them to be insider threats. They were asked to not share this information with anyone and to act just like any other member of the team. Their goal was to have their team design a system that would leave the door open for them to act maliciously in some manner. Examples included being able to view other student's grades, or optimally grades which they should not be able to.

Our courses were offered in a 50 minute long format. This activity spanned two class periods. Teams were allowed the entire first class period to work on designing their system while the instructor answered any requirements specific questions the teams had. Teams were then asked to work on the activity outside of class. At the beginning of the second class meeting, teams were asked to review their security design and make any last minute updates. Teams were then informally polled to see how many felt their system was secure. This serves to gauge the confidence each team has in their design. Based on the confidence of the teams and the instructor's knowledge of each team's design, the team with the highest confidence and best design was asked to briefly present their design to the class and talk about why they felt it was secure. The class then asked questions about the design and try to discover any vulnerabilities.

After this brief discussion the insider threat for the presenting team is asked to make themselves public and describe the vulnerability they had left in the system design. The insider threat for other teams is then asked to expose themselves and describe the vulnerability they introduced into their team's design.

While the insider threats added vulnerabilities in a variety  of ways, there were some common general ways that they made sure the application was exploitable. They would often recommend poor security strategies to leave vulnerabilities in the system. In other instances, insiders would add a vulnerability into the team's design between class meetings which would not be caught during the review on the second class meeting. This mimics the real world situation of an insider adding malicious code into a project during off hours or without the knowledge of the rest of the team. Interestingly, insiders would often ensure that vulnerabilities existed in a system by simply doing nothing. They would notice their teammates leaving a vulnerability in the design do a simple, but honest mistake, and the moles would do nothing to fix this known issue.


% Describe what students are tasked with creating
%   Requirements for system.
%   Use Microsoft Threat modeling tool (although any tool could be used here)



\subsection{Examples of Introduced Vulnerabilities}

% ? Mention that we talked about each of these potential vulnerabilities in class already so the students knew how to prevent them?


In order to provide a context of some of the introduced vulnerabilities, we will explain some of them in further detail. \\

\textbf{Not Limiting Failed Login Attempts}\\
Limiting the number of failed login attempts its an important protection mechanism against brute force attacks. Without this limitation, attackers may quickly try password combinations until they achieve the correct password. This type of attack has been successfully made against a wide range of organizations, including Apple~\cite{apple_bruteforce_url}. In one team, the insider made the argument that users should not be limited by their login attempts since this could be annoying to users and could hurt their user experience with the application. The team agreed and no limiting was done. \\


\textbf{Publicly Saving Logs}\\
A requirement of the system was to log all system errors and actions taken by users. Attackers could use these error logs to potentially gain information which could help them compromise the system. Some of this could include call stacks, information about how to create a log overflow, or any other sensitive information which was output to the log messages. Additionally, since the log files contained many alterations make to the system, this could expose potentially sensitive changes to malicious users such as the grades of students. In one team, the insider argued that these logs should be publicly available since it would provide easier access to developers when troubleshooting issues. On another team, they placed the generated log files outside of the trust zone of the system, which would expose these files to outside users. Their team did not make any objections for doing this. \\


\textbf{Openly Transmitting Data Backups}\\
A requirement was to backup the system database on a nightly basis to an off-site location. In a properly designed system, the database information will be encrypted before it leaves the trust zone, or sent via a secure or encrypted transmission so malicious users could not intercept the data being sent. Several insiders made sure that this database backup file was sent via insecure channels, thus meaning that it could have been intercepted by an unintended party. \\


\textbf{Use of Improper Cipher Techniques}\\
Cipher techniques are a way of encrypting information so they may not be deciphered by anyone but the intended parties and was a topic covered in our class. While advanced cipher techniques such as AES and RSA continue to provide high levels of security, older techniques such as DES no longer provide an adequate level or protection and can be broken with relative ease. In several groups, the insider was able to convince their team to use DES or another outdated cipher technique. This would have left the encrypted information susceptible to attackers. \\


\textbf{Storing Passwords in Source Code}\\
Developers should not store passwords in the source code of an application, even in compiled code. This creates several potential problems including the ability of a malicious user to reverse engineer the code to discover the user name and password, and since passwords should be routinely changed, altering the passwords in compiled code is typically more difficult and much more infrequently done. In several instances, insider threats convinced their teams to store the database login information in compiled code since they argued that the information would be secure since it was compiled (inaccurate statement) and that the passwords did not need to be updated (also inaccurate). This left the applications not only vulnerable to reverse engineering, but in the event a developer left the company, especially on poor terms, they would know that the database login and password information was unlikely to be changed, thus making it susceptible to their attack. Interestingly, one insider was able to convince their team to make the login information be merely ``root'' and no password since this would be simpler for development. Giving an application root access with violates several security standards, including the~\emph{principle of least privilege} and having no password is bad for a variety of reasons. \\



\textbf{Providing too many privileges for user or component}

% Providing too many privileges for user or component

A basic principle of software security is the principle of least privilege, or the granting of the minimum number of privileges that an application needs to properly function~\cite{saltzer1975protection}. Granting more privileges than the application needs creates security problems since individuals or software components could intentionally or unintentionally use these extra privileges for malicious reasons. \todo{finish}

% How did students do it in our system


%%% Probably too much information here so I am removing the thought
%A malicious individual could use these extra rights to view information which they should not be able to, or write malicious software which could gain access to data which it should not allowed to do so. Inadvertent developer errors could also allow software to use these extra privo


%since vulnerabilities in other applications, or malware, could use these extra permissions for malicious reasons. Additionally, this limits potential issues due to non-malicious developer errors




\textbf{XXXX}\\
Add one more?


%\textbf{Publicly Saving Database Backups}\\
%Stuff
% Storing passwords in compoliled code, not config files




%\subsection{Sample Team}
%\label{sec: sampleteam}
% Provide specific example of the insider threat a team faced




\subsection{Goals of Post Activity Discussion}
%\label{sec: discussion}

After the insiders were identified and the ensuing discussion about what malicious activities could have been performed on the software, a post activity discussion took place. The goal of this discussion is to foster student thinking about insiders and ways that insiders could maliciously act and prevention methods against them. This discussion should be easy going to foster and encourage student led discussions and to encourage free thinking among the students. Due to the nature of the activity, there are a wide range of potentially beneficial discussion topics. Some of which are outlined below. \\


\textbf{Who Can Be Insider Threats?}\\
Before the activity, many students thought of threats as being people outside of the organization only, and did not consider inside actors to be threats, or threats which could be planned for. One discussion goal is who can be insider threats. Regardless of the role on the team, each individual or individuals is a potential insider threat who needs to be protected against. In our activities, students discussed the various roles of their teammates who were insiders and how similar roles in real world projects could be insider threats. \\


\textbf{What Malicious Actions did the Insiders Take?}\\
Insiders conducted a wide variety of malicious actions in our activity using many different methods of doing some. Students are encouraged to discuss the actions that insiders took on their systems and what some of the negative ramifications could have been. Students are also encouraged to significantly explore and analyze the negative ramifications of the threats. For example, in the situation where student records were publicly exposed, a ramification which may not be immediately considered are the legal ramifications involved and potential lawsuits by students with publicly exposed grades. A related activity that could be done to augment this discussion is to ask students to explore and report upon real world examples of malicious actions taken by insiders. \\



\textbf{What Damage Did the Insiders Cause?}\\
In our activity instances, insider threats would have been typically able to inflict a significant amount of damage of the software project. Understanding the possible negative ramifications is a good way for students to realize the importance of protecting against insider threats and to plan for similar occurrences in their real world development teams. \\


\textbf{Did the Students Realize the Insiders Were Doing Anything Wrong?}\\
In our discussions, students often reported that they had at least a feeling that the insiders were acting in a malicious manner, but failed to stop them. Some reasons included not wanted to create controversy, the feeling that security was not a prominent area of concern, or that their teammate~\emph{must have known what they were doing}. Points of discussion could include warning signs of vulnerabilities being placed in a system either for intentional or unintentional reasons, methods of alerting teammates about potential issues in a constructive manner and\todo{add one more}. \\

\textbf{What Could Have Been Done to Prevent Insider Threats?}\\
One of the most important discussion topics should be what could have been done to prevent these insider threats, and similar ones, from occurring in future projects. Students are encouraged to discuss ways of preventing these threats from occurring in real world projects. Some discussed methods include code reviews, frequently changed passwords, and analysis by outside security auditors.\dan{Andy: Feel free to add to this} \\


\textbf{How Could Thinking Like an Insider Help to Protect Against Them?}\\
Thinking like an insider is a good way to prevent against them. If developers are always considering different ways that their system can be compromised, they will be more likely to develop their application using proper defensive measures. \dan{fix \& citation?}



% \textbf{XXXX}\\
% Add one more





\section{Student Feedback}
\label{sec: studentfeedback}


Students have expressed a significant amount of satisfaction in this activity and it has contributed to their overall satisfaction with the course. At the conclusion of the project, students are asked to submit an anonymous survey asking them to provide feedback about several aspects of the project. Some of the questions are based upon the likert scale, while other asked students to provide written feedback. Several of these questions and student responses are shown in Table~\ref{table:studentfeedback}. These questions have been posed to students in the last three course offerings, all of which have used this activity component. %A total of 36\todo{update} students from these sections have responded to the survey.

\todo{Describe the feedback a bit more.}

\begin{table}[h!]
\caption{Student Responses}
\begin{center}
    \begin{tabular}{ l | l | l | l    }
    \toprule

	\bfseries & Yes & \bfseries No & \bfseries Total \\ \hline \hline
	\bfseries Did you enjoy the software project? & 66 & 12 & 85\%  \\ \hline
	\bfseries Would you recommend this project? & 60 & 18 & 77\%  \\ \hline
	\bfseries Resembles a real world project? & 60 & 18 & 77\%  \\ \hline
	\bfseries How much did you learn? (0-5)& - & - & 4.15  \\
 \bottomrule
    \end{tabular}
\end{center}

\label{table:studentfeedback}
%\vspace{-0.3in}
\end{table}

These results indicate that the vast majority of students not only enjoyed the activity, but would also recommend it to a classmate as well. Additionally, most students felt that it reassembled a project which they were likely to encounter in the real world and were similar to tasks they were asked to complete while on co-op. Finally, students were asked to rate how much they learned from the project on a 0-5 scale, with 0 representing them learning very little and 5 representing the maximum amount of learning. The average student response was a 4.15/5 indicating that, on average, students felt the project to be very educational.

The end of term feedback also allowed students to write some of their thoughts regarding the course project. The following are samples of written feedback that have been received:


This same survey also asked students to respond to several other questions with the options of Strongly Agreeing(SA), Agree (A), Undecided (U), Disagree (D) and Strongly Disagree (SD).


\begin{table}[h!]
\caption{Student Responses}
\begin{center}
    \begin{tabular}{ l | l | l | l | l | l     }
       
	\bfseries  & \bfseries SA & \bfseries A & \bfseries U & \bfseries D  & \bfseries SD \\ \hline \hline

	 Did you enjoy the activity & x & X & X & X  & X \\ \hline
	 Did you learn a lot & x & X & X & X  & X \\ \hline 
	 Would you recommend it to a friend & x & X & X & X  & X \\ \hline 
	 Prepared for Insider Threats  & x & X & X & X  & X \\ 

    \end{tabular}
\end{center}

\label{table:studentfeedback}
%\vspace{-0.3in}
\end{table}



\todo{update all values based on Spring term}

%% Analyze these results
\todo{Analyze results}


Enjoy activity -

SD: 0
D: 1
U 5
A: 16
SA: 11

How much did you learn?

SD: 0
D: 1
U 4
A: 18
SA: 9


Recommend to friend
SD: 0
D: 4
U: 6
A: 11
SA: 12

Prepared for real world
SD: 0
D: 1
Average: 13
A: 13
SA:6


Prepared you for notion of Insider threat
SD: 1
D: 0
U: 2
A: 18
SA: 12



\todo{update numbers from the Spring term}

The end of term feedback also allowed students to write some of their thoughts regarding the course project. The following are samples of written feedback that have been received:


\begin{quotation}
``It was really interesting to see how few people were looking for an insider threat and many threats went completely unnoticed. It showed that we weren't prepared to consider our classmates as threats.''
\end{quotation}

\begin{quotation}
``Might seem silly, but the first hand experience of having someone betray the team, even on an insignificant level, leaves an impression that the same could actually happen in the real world.''
\end{quotation}

\begin{quotation}
``I liked how it showed me how easily insider threat can destroy a project..''
\end{quotation}

\begin{quotation}
``The surprise not only teaches the lesson but leaves an impression. This is probably due to the deception aspect of the activity.''
\end{quotation}

\begin{quotation}
``Being continually consciously aware of all possible security threats, for not all risks lie within the implementation.''
\end{quotation}

\dan{Feel free to remove a few of these or add new ones in the spring}

This feedback indicates that students not only enjoyed the activity, but felt that it was a very effective learning mechanism as well.

% Should we include this section
\section{Related Work}
\label{sec: relatedwork}

To our knowledge, this activity was the first of its kind to introduce an insider threat into a software security classroom activity. However, Krutz and Vallino~\cite{6685085} used a similar activity to teach freshman seminar students about problematic teammates. In this activity, moles were added to teams and performed roles such as non-contributors, side trackers and absentee team members. A post activity discussion focused on these problematic team members how how they can be properly addressed. Creating an activity that was not only informative, but was enjoyable for the students was very important for us since 




%% What else did our moles paper cite?


\todo{Add other works}

% Talk about other works about insider threats in the general security perspective.


Numerous works have examined Insider Threats from a general security perspective. Nostro et al.~\cite{Nostro:2014:ITA:2694737.2694740} developed a process for insider threat detection and mitigation using a variety of existing tools and new techniques with the goal being to define the objectives of the attacker, and subsequently determine appropriate countermeasures. Other works have discussed various interesting ways of detecting insider threats. Almehmadi et al~\cite{Almehmadi:2014:PIT:2659651.2659654} investigated the use of using physiological features to detect attackers and found that an abnormal deviation in a user's electrocardiogram amplitude could properly predict an attack before it occurred.
% Several other works have discussed using activities




% Talk about other works that use games in learning.
%   Especially look at games that deal with deception.


\section{Future work}
\label{sec: futurework}

This project has been utilized in several sections of our Engineering of Secure Software course and has been very successful, but there are a few enhancements to the activity and further data which may be collected. In future iterations, we would like to record and analyze the exploits created by the insiders. This would not only be helpful for better planning future offerings of this activity, but would likely be interesting to researchers as well. Once an insider's exploit is exposed during the class discussion, a secondary activity could be for the team to resolve that exploit like they would in a real world environment. This could include steps taken to mitigate the exploit and future measures which could be taken to ensure that a similar exploit did not occur in the future.

Should instructors have more time to complete this activity, a formal code inspection by the team before revealing the insiders could be a beneficial activity. This would serve several benefits including teaching the students about code inspections and would help solidify the importance of code inspections if the team was able to find the threats inserted by the insiders. If the team did not identify the threats, this would help to demonstrate the challenges in detecting an insider threat.

When conducting this activity, we chose to give the insiders a significant amount of freedom in deciding what kind of threats to add to the system since a large amount of variability existed between each team's design and the dynamics of the team. However, some insiders have expressed the desire for more direction on the types of threats they should be looking to create. Future instructors should take this wish into consideration, but also remember to not provide too much direction which would inhibit the creativity and ability of the insiders to create threats.

\section{Conclusion}
\label{sec: conclusion}

Organizations suffer from insider threat on a constant basis not only significant costing them monetarily, but also through the loss of invaluable and often private data. Some of this harm is irreversible for organizations from both a data and customer trust perspective. Unfortunately, students are typically unprepared to deal with this notion and do not understand that it can occur, and how it may occur.

We have described a novel and innovative activity to instruct software security students about the dangers of insider threats and some of the damaging ramification such an actor could have on a system. Students have expressed their satisfaction with the activity from both an enjoyment and learning perspective. We encourage instructors at other institutions to use this activity in their security courses as well.


%\end{document}  % This is where a 'short' article might terminate
\balance
\bibliographystyle{abbrv}
\bibliography{InsiderThreatActivity}

%\balancecolumns
% That's all folks!
\end{document}




% Todo
%	Use the term threat or mole?
% 	Add Keywords
