Executing command: java -jar C:\Users\Dan\workspace\jpf-core\build\RunJPF.jar +shell.port=4242 C:\Users\Dan\workspace\jpf-symbc\src\examples\Diss\Basic_Super.jpf 

====================================================== system under test
application: Diss\Basic_Super.java

====================================================== search started: 6/14/12 3:31 PM
### PCs: 1 1 0
--------original PC------------0
original pc # = 1
CONST_0 < a_1_SYMINT
SPC # = 0
--- end printing original PC ---
--------begin after splitting------------
originalPC # = 1
CONST_0 < a_1_SYMINT
SPC # = 0
concolicPC # = 0
SPC # = 0
simplePC # = 1
CONST_0 < a_1_SYMINT
SPC # = 0
--------end after splitting------------
solving: PC # = 1
CONST_0 < a_1_SYMINT
SPC # = 0
 --> # = 1
CONST_0 < a_1_SYMINT
SPC # = 0 -> true
### PCs: 2 2 0
--------original PC------------0
original pc # = 2
CONST_1 < a_1_SYMINT &&
CONST_0 < a_1_SYMINT
SPC # = 0
--- end printing original PC ---
--------begin after splitting------------
originalPC # = 2
CONST_1 < a_1_SYMINT &&
CONST_0 < a_1_SYMINT
SPC # = 0
concolicPC # = 0
SPC # = 0
simplePC # = 2
CONST_0 < a_1_SYMINT &&
CONST_1 < a_1_SYMINT
SPC # = 0
--------end after splitting------------
solving: PC # = 2
CONST_0 < a_1_SYMINT &&
CONST_1 < a_1_SYMINT
SPC # = 0
 --> # = 2
CONST_0 < a_1_SYMINT &&
CONST_1 < a_1_SYMINT
SPC # = 0 -> true
### PCs: 3 3 0
--------original PC------------0
original pc # = 3
CONST_2 < a_1_SYMINT &&
CONST_1 < a_1_SYMINT &&
CONST_0 < a_1_SYMINT
SPC # = 0
--- end printing original PC ---
--------begin after splitting------------
originalPC # = 3
CONST_2 < a_1_SYMINT &&
CONST_1 < a_1_SYMINT &&
CONST_0 < a_1_SYMINT
SPC # = 0
concolicPC # = 0
SPC # = 0
simplePC # = 3
CONST_0 < a_1_SYMINT &&
CONST_1 < a_1_SYMINT &&
CONST_2 < a_1_SYMINT
SPC # = 0
--------end after splitting------------
solving: PC # = 3
CONST_0 < a_1_SYMINT &&
CONST_1 < a_1_SYMINT &&
CONST_2 < a_1_SYMINT
SPC # = 0
 --> # = 3
CONST_0 < a_1_SYMINT &&
CONST_1 < a_1_SYMINT &&
CONST_2 < a_1_SYMINT
SPC # = 0 -> true
### PCs: 4 4 0

====================================================== search constraint
Search Depth: 5

====================================================== snapshot 
thread index=0,name=main,status=RUNNING,this=java.lang.Thread@0,target=null,priority=5,lockCount=0,suspendCount=0
  call stack:
	at Diss.Basic_Class1.Type1b_Krawitz(Basic_Class1.java:74)
	at Diss.Basic_Super.Run(Basic_Super.java:25)
	at Diss.Basic_Super.main(Basic_Super.java:11)

--------original PC------------0
original pc # = 3
CONST_2 >= a_1_SYMINT &&
CONST_1 < a_1_SYMINT &&
CONST_0 < a_1_SYMINT
SPC # = 0
--- end printing original PC ---
--------begin after splitting------------
originalPC # = 3
CONST_2 >= a_1_SYMINT &&
CONST_1 < a_1_SYMINT &&
CONST_0 < a_1_SYMINT
SPC # = 0
concolicPC # = 0
SPC # = 0
simplePC # = 3
CONST_0 < a_1_SYMINT &&
CONST_1 < a_1_SYMINT &&
CONST_2 >= a_1_SYMINT
SPC # = 0
--------end after splitting------------
solving: PC # = 3
CONST_0 < a_1_SYMINT &&
CONST_1 < a_1_SYMINT &&
CONST_2 >= a_1_SYMINT
SPC # = 0
 --> # = 3
CONST_0 < a_1_SYMINT &&
CONST_1 < a_1_SYMINT &&
CONST_2 >= a_1_SYMINT
SPC # = 0 -> true
### PCs: 5 5 0

====================================================== search constraint
Search Depth: 5

====================================================== snapshot 
thread index=0,name=main,status=RUNNING,this=java.lang.Thread@0,target=null,priority=5,lockCount=0,suspendCount=0
  call stack:
	at Diss.Basic_Class1.Type1b_Krawitz(Basic_Class1.java:77)
	at Diss.Basic_Super.Run(Basic_Super.java:25)
	at Diss.Basic_Super.main(Basic_Super.java:11)

--------original PC------------0
original pc # = 2
CONST_1 >= a_1_SYMINT &&
CONST_0 < a_1_SYMINT
SPC # = 0
--- end printing original PC ---
--------begin after splitting------------
originalPC # = 2
CONST_1 >= a_1_SYMINT &&
CONST_0 < a_1_SYMINT
SPC # = 0
concolicPC # = 0
SPC # = 0
simplePC # = 2
CONST_0 < a_1_SYMINT &&
CONST_1 >= a_1_SYMINT
SPC # = 0
--------end after splitting------------
solving: PC # = 2
CONST_0 < a_1_SYMINT &&
CONST_1 >= a_1_SYMINT
SPC # = 0
 --> # = 2
CONST_0 < a_1_SYMINT &&
CONST_1 >= a_1_SYMINT
SPC # = 0 -> true
### PCs: 6 6 0
--------original PC------------0
original pc # = 3
a_1_SYMINT == CONST_0 &&
CONST_1 >= a_1_SYMINT &&
CONST_0 < a_1_SYMINT
SPC # = 0
--- end printing original PC ---
--------begin after splitting------------
originalPC # = 3
a_1_SYMINT == CONST_0 &&
CONST_1 >= a_1_SYMINT &&
CONST_0 < a_1_SYMINT
SPC # = 0
concolicPC # = 0
SPC # = 0
simplePC # = 3
CONST_0 < a_1_SYMINT &&
CONST_1 >= a_1_SYMINT &&
a_1_SYMINT == CONST_0
SPC # = 0
--------end after splitting------------
solving: PC # = 3
CONST_0 < a_1_SYMINT &&
CONST_1 >= a_1_SYMINT &&
a_1_SYMINT == CONST_0
SPC # = 0
 --> # = 3
CONST_0 < a_1_SYMINT &&
CONST_1 >= a_1_SYMINT &&
a_1_SYMINT == CONST_0
SPC # = 0 -> false
### PCs: 7 6 1

====================================================== search constraint
Search Depth: 5

====================================================== snapshot 
thread index=0,name=main,status=RUNNING,this=java.lang.Thread@0,target=null,priority=5,lockCount=0,suspendCount=0
  call stack:
	at Diss.Basic_Class1.Type1b_Krawitz(Basic_Class1.java:78)
	at Diss.Basic_Super.Run(Basic_Super.java:25)
	at Diss.Basic_Super.main(Basic_Super.java:11)

--------original PC------------0
original pc # = 3
a_1_SYMINT != CONST_0 &&
CONST_1 >= a_1_SYMINT &&
CONST_0 < a_1_SYMINT
SPC # = 0
--- end printing original PC ---
--------begin after splitting------------
originalPC # = 3
a_1_SYMINT != CONST_0 &&
CONST_1 >= a_1_SYMINT &&
CONST_0 < a_1_SYMINT
SPC # = 0
concolicPC # = 0
SPC # = 0
simplePC # = 3
CONST_0 < a_1_SYMINT &&
CONST_1 >= a_1_SYMINT &&
a_1_SYMINT != CONST_0
SPC # = 0
--------end after splitting------------
solving: PC # = 3
CONST_0 < a_1_SYMINT &&
CONST_1 >= a_1_SYMINT &&
a_1_SYMINT != CONST_0
SPC # = 0
 --> # = 3
CONST_0 < a_1_SYMINT &&
CONST_1 >= a_1_SYMINT &&
a_1_SYMINT != CONST_0
SPC # = 0 -> true
### PCs: 8 7 1

====================================================== search constraint
Search Depth: 5

====================================================== snapshot 
thread index=0,name=main,status=RUNNING,this=java.lang.Thread@0,target=null,priority=5,lockCount=0,suspendCount=0
  call stack:
	at Diss.Basic_Class1.Type1b_Krawitz(Basic_Class1.java:80)
	at Diss.Basic_Super.Run(Basic_Super.java:25)
	at Diss.Basic_Super.main(Basic_Super.java:11)

--------original PC------------0
original pc # = 1
CONST_0 >= a_1_SYMINT
SPC # = 0
--- end printing original PC ---
--------begin after splitting------------
originalPC # = 1
CONST_0 >= a_1_SYMINT
SPC # = 0
concolicPC # = 0
SPC # = 0
simplePC # = 1
CONST_0 >= a_1_SYMINT
SPC # = 0
--------end after splitting------------
solving: PC # = 1
CONST_0 >= a_1_SYMINT
SPC # = 0
 --> # = 1
CONST_0 >= a_1_SYMINT
SPC # = 0 -> true
### PCs: 9 8 1
--------original PC------------0
original pc # = 2
a_1_SYMINT == CONST_0 &&
CONST_0 >= a_1_SYMINT
SPC # = 0
--- end printing original PC ---
--------begin after splitting------------
originalPC # = 2
a_1_SYMINT == CONST_0 &&
CONST_0 >= a_1_SYMINT
SPC # = 0
concolicPC # = 0
SPC # = 0
simplePC # = 2
CONST_0 >= a_1_SYMINT &&
a_1_SYMINT == CONST_0
SPC # = 0
--------end after splitting------------
solving: PC # = 2
CONST_0 >= a_1_SYMINT &&
a_1_SYMINT == CONST_0
SPC # = 0
 --> # = 2
CONST_0 >= a_1_SYMINT &&
a_1_SYMINT == CONST_0
SPC # = 0 -> true
### PCs: 10 9 1
--------begin after splitting------------
originalPC # = 2
a_1_SYMINT[0] == CONST_0 &&
CONST_0 >= a_1_SYMINT[0]
SPC # = 0
concolicPC # = 0
SPC # = 0
simplePC # = 2
CONST_0 >= a_1_SYMINT[0] &&
a_1_SYMINT[0] == CONST_0
SPC # = 0
--------end after splitting------------
solving: PC # = 2
CONST_0 >= a_1_SYMINT[0] &&
a_1_SYMINT[0] == CONST_0
SPC # = 0
 --> # = 2
CONST_0 >= a_1_SYMINT[0] &&
a_1_SYMINT[0] == CONST_0
SPC # = 0 -> true
MethodInfo[Diss.Basic_Super.main([Ljava/lang/String;)V]
--------original PC------------0
original pc # = 2
a_1_SYMINT != CONST_0 &&
CONST_0 >= a_1_SYMINT
SPC # = 0
--- end printing original PC ---
--------begin after splitting------------
originalPC # = 2
a_1_SYMINT != CONST_0 &&
CONST_0 >= a_1_SYMINT
SPC # = 0
concolicPC # = 0
SPC # = 0
simplePC # = 2
CONST_0 >= a_1_SYMINT &&
a_1_SYMINT != CONST_0
SPC # = 0
--------end after splitting------------
solving: PC # = 2
CONST_0 >= a_1_SYMINT &&
a_1_SYMINT != CONST_0
SPC # = 0
 --> # = 2
CONST_0 >= a_1_SYMINT &&
a_1_SYMINT != CONST_0
SPC # = 0 -> true
### PCs: 11 10 1
--------original PC------------0
original pc # = 3
REAL_2 == CONST_0 &&
a_1_SYMINT != CONST_0 &&
CONST_0 >= a_1_SYMINT
SPC # = 0
--- end printing original PC ---
--------begin after splitting------------
originalPC # = 3
REAL_2 == CONST_0 &&
a_1_SYMINT != CONST_0 &&
CONST_0 >= a_1_SYMINT
SPC # = 0
concolicPC # = 0
SPC # = 0
simplePC # = 3
CONST_0 >= a_1_SYMINT &&
a_1_SYMINT != CONST_0 &&
REAL_2 == CONST_0
SPC # = 0
--------end after splitting------------
solving: PC # = 3
CONST_0 >= a_1_SYMINT &&
a_1_SYMINT != CONST_0 &&
REAL_2 == CONST_0
SPC # = 0
java.lang.RuntimeException: ## Error: Binary Non Linear Expression CONST_0
	at gov.nasa.jpf.symbc.numeric.SymbolicConstraintsGeneral.getExpression(SymbolicConstraintsGeneral.java:83)
	at gov.nasa.jpf.symbc.numeric.SymbolicConstraintsGeneral.createDPMixedConstraint(SymbolicConstraintsGeneral.java:324)
	at gov.nasa.jpf.symbc.numeric.SymbolicConstraintsGeneral.isSatisfiable(SymbolicConstraintsGeneral.java:830)
	at gov.nasa.jpf.symbc.numeric.SymbolicConstraintsGeneral.solve(SymbolicConstraintsGeneral.java:888)
	at gov.nasa.jpf.symbc.numeric.PathCondition.solve(PathCondition.java:237)
	at gov.nasa.jpf.symbc.concolic.PCAnalyzer.mixedIsSatisfiable(PCAnalyzer.java:33)
	at gov.nasa.jpf.symbc.concolic.PCAnalyzer.isSatisfiable(PCAnalyzer.java:75)
	at gov.nasa.jpf.symbc.numeric.PathCondition.simplify(PathCondition.java:254)
	at gov.nasa.jpf.symbc.bytecode.I2D.execute(I2D.java:86)
	at gov.nasa.jpf.jvm.ThreadInfo.executeInstruction(ThreadInfo.java:1981)
	at gov.nasa.jpf.jvm.ThreadInfo.executeTransition(ThreadInfo.java:1941)
	at gov.nasa.jpf.jvm.SystemState.executeNextTransition(SystemState.java:652)
	at gov.nasa.jpf.jvm.JVM.forward(JVM.java:1717)
	at gov.nasa.jpf.search.Search.forward(Search.java:500)
	at gov.nasa.jpf.search.DFSearch.search(DFSearch.java:79)
	at gov.nasa.jpf.JPF.run(JPF.java:534)
	at gov.nasa.jpf.JPF.start(JPF.java:166)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at gov.nasa.jpf.tool.Run.call(Run.java:76)
	at gov.nasa.jpf.tool.RunJPF.main(RunJPF.java:86)
