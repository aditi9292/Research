<source file="../../Dataset/Dataset_full/Audit/1.12-AbstractRequester.java" startline="64" endline="70">
public AbstractRequester (GenericValue userLogin) {
    this.delegator = userLogin.getDelegator ();
    this.userLogin = userLogin;
    this.delegatorName = delegator.getDelegatorName ();
    this.userLoginId = userLogin.getString ("userLoginId");
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AbstractRequester.java" startline="72" endline="74">
public void addPerformer (WfProcess process) throws BaseException {
    performerIds.add (process.key ());
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AbstractRequester.java" startline="76" endline="78">
public int how_many_performer () throws BaseException {
    return performerIds.size ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AbstractRequester.java" startline="80" endline="82">
public int how_many_performer (SharkTransaction trans) throws BaseException {
    return performerIds.size ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AbstractRequester.java" startline="84" endline="86">
public WfProcessIterator get_iterator_performer () throws BaseException {
    return new WfProcessIteratorImpl (this.getPerformers ());
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AbstractRequester.java" startline="88" endline="90">
public WfProcessIterator get_iterator_performer (SharkTransaction trans) throws BaseException {
    return new WfProcessIteratorImpl (trans, this.getPerformers ());
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AbstractRequester.java" startline="92" endline="97">
public WfProcess [] get_sequence_performer (int i) throws BaseException {
    if (i > how_many_performer ()) {
        i = how_many_performer ();
    }
    return (WfProcess []) this.getPerformers ().subList (0, i).toArray ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AbstractRequester.java" startline="99" endline="104">
public WfProcess [] get_sequence_performer (SharkTransaction trans, int i) throws BaseException {
    if (i > how_many_performer ()) {
        i = how_many_performer ();
    }
    return (WfProcess []) this.getPerformers ().subList (0, i).toArray ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AbstractRequester.java" startline="106" endline="108">
public boolean is_member_of_performer (WfProcess process) throws BaseException {
    return performerIds.contains (process.key ());
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AbstractRequester.java" startline="110" endline="112">
public boolean is_member_of_performer (SharkTransaction trans, WfProcess process) throws BaseException {
    return performerIds.contains (process.key ());
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AbstractRequester.java" startline="118" endline="148">
protected Map getWRD (WfEventAudit event, Map initialContext) throws BaseException {
    Map wrdMap = new HashMap ();
    if (initialContext != null) {
        wrdMap.putAll (initialContext);
    }
    wrdMap.put ("eventType", event.event_type ());
    wrdMap.put (org.ofbiz.shark.SharkConstants.activityId, event.activity_key ());
    wrdMap.put (org.ofbiz.shark.SharkConstants.activityName, event.activity_name ());
    wrdMap.put (org.ofbiz.shark.SharkConstants.processId, event.process_key ());
    wrdMap.put (org.ofbiz.shark.SharkConstants.processName, event.process_name ());
    wrdMap.put (org.ofbiz.shark.SharkConstants.processMgrName, event.process_mgr_name ());
    wrdMap.put ("processMgrVersion", event.process_mgr_version ());
    wrdMap.put ("eventTime", event.time_stamp ().getTimestamp ());
    try {
        Map wrd = new HashMap (event.source ().process_context ());
        if (wrd != null) {
            wrdMap.put ("_WRDMap", wrd);
            wrdMap.putAll (wrd);
        }
    } catch (SourceNotAvailable e) {
        Debug.logError (e, "No WRD available since event.source() cannot be obtained", module);
    }
    return wrdMap;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AbstractRequester.java" startline="150" endline="155">
protected synchronized Delegator getDelegator () {
    if (this.delegator == null && this.delegatorName != null) {
        this.delegator = DelegatorFactory.getDelegator (this.delegatorName);
    }
    return this.delegator;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AbstractRequester.java" startline="157" endline="166">
protected synchronized GenericValue getUserLogin () throws GenericEntityException {
    if (userLogin == null && this.userLoginId != null) {
        Delegator delegator = this.getDelegator ();
        if (delegator != null) {
            this.userLogin = delegator.findByPrimaryKey ("UserLogin", UtilMisc.toMap ("userLoginId", this.userLoginId));
        }
    }
    return this.userLogin;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AbstractRequester.java" startline="168" endline="213">
protected List getPerformers () {
    GenericValue userLogin = null;
    List performers = null;
    try {
        userLogin = this.getUserLogin ();
    } catch (GenericEntityException e) {
        Debug.logError (e, module);
    }
    if (userLogin != null) {
        AdminInterface admin = SharkContainer.getAdminInterface ();
        ExecutionAdministration exAdmin = admin.getExecutionAdministration ();
        boolean connected = true;
        try {
            exAdmin.connect (userLogin.getString ("userLoginId"), userLogin.getString ("currentPassword"), null, null);
        } catch (BaseException e) {
            Debug.logError (e, module);
            connected = false;
        } catch (ConnectFailed e) {
            Debug.logError (e, module);
            connected = false;
        }
        if (connected) {
            performers = new ArrayList (performerIds.size ());
            Iterator i = performerIds.iterator ();
            try {
                while (i.hasNext ()) {
                    String processId = (String) i.next ();
                    exAdmin.getProcess (processId);
                }
            } catch (Exception e) {
                Debug.logError (e, module);
                performers = null;
            } finally {
                try {
                    exAdmin.disconnect ();
                } catch (BaseException e) {
                    Debug.logError (e, module);
                } catch (NotConnected e) {
                    Debug.logError (e, module);
                }
            }
        }
    }
    return performers;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AbstractRequester.java" startline="222" endline="224">
public WfProcessIteratorImpl (SharkTransaction trans, List performers) throws BaseException {
    super (trans, null, performers);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AbstractRequester.java" startline="226" endline="228">
public WfProcessIteratorImpl (List performers) throws BaseException {
    super (null, null, performers);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AssignmentEventAudit.java" startline="39" endline="50">
public AssignmentEventAudit (EntityAuditMgr mgr, Delegator delegator, String eventAuditId) {
    super (mgr, delegator, eventAuditId);
    if (this.delegator != null) {
        try {
            this.assignmentEventAudit = delegator.findByPrimaryKey ("WfAssignmentEventAudit", UtilMisc.toMap ("eventAuditId", eventAuditId));
        } catch (GenericEntityException e) {
            Debug.logError (e, module);
        }
    } else {
        Debug.logError ("Invalid delegator object passed", module);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AssignmentEventAudit.java" startline="52" endline="56">
public AssignmentEventAudit (EntityAuditMgr mgr, Delegator delegator) {
    super (mgr, delegator);
    this.newValue = true;
    this.assignmentEventAudit = delegator.makeValue ("WfAssignmentEventAudit", UtilMisc.toMap ("eventAuditId", this.eventAuditId));
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AssignmentEventAudit.java" startline="58" endline="61">
public AssignmentEventAudit (EntityAuditMgr mgr, GenericValue assignmentEventAudit) {
    super (mgr, assignmentEventAudit.getDelegator (), assignmentEventAudit.getString ("eventAuditId"));
    this.assignmentEventAudit = assignmentEventAudit;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AssignmentEventAudit.java" startline="63" endline="65">
public void setOldResourceUsername (String un) {
    assignmentEventAudit.set ("oldUserName", un);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AssignmentEventAudit.java" startline="67" endline="69">
public String getOldResourceUsername () {
    return assignmentEventAudit.getString ("oldUserName");
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AssignmentEventAudit.java" startline="71" endline="73">
public void setOldResourceName (String nm) {
    assignmentEventAudit.set ("oldName", nm);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AssignmentEventAudit.java" startline="75" endline="77">
public String getOldResourceName () {
    return assignmentEventAudit.getString ("oldName");
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AssignmentEventAudit.java" startline="79" endline="81">
public void setNewResourceUsername (String un) {
    assignmentEventAudit.set ("newUserName", un);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AssignmentEventAudit.java" startline="83" endline="85">
public String getNewResourceUsername () {
    return assignmentEventAudit.getString ("newUserName");
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AssignmentEventAudit.java" startline="87" endline="89">
public void setNewResourceName (String nm) {
    assignmentEventAudit.set ("newName", nm);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AssignmentEventAudit.java" startline="91" endline="93">
public String getNewResourceName () {
    return assignmentEventAudit.getString ("newName");
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AssignmentEventAudit.java" startline="95" endline="97">
public void setIsAccepted (boolean acc) {
    assignmentEventAudit.set ("isAccepted", acc);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AssignmentEventAudit.java" startline="99" endline="101">
public boolean getIsAccepted () {
    return assignmentEventAudit.getBoolean ("isAccepted").booleanValue ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AssignmentEventAudit.java" startline="103" endline="111">
public void store () throws GenericEntityException {
    super.store ();
    if (newValue) {
        newValue = false;
        delegator.createOrStore (assignmentEventAudit);
    } else {
        delegator.store (assignmentEventAudit);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AssignmentEventAudit.java" startline="113" endline="118">
public void reload () throws GenericEntityException {
    super.reload ();
    if (! newValue) {
        assignmentEventAudit.refresh ();
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AssignmentEventAudit.java" startline="120" endline="125">
public void remove () throws GenericEntityException {
    super.remove ();
    if (! newValue) {
        delegator.removeValue (assignmentEventAudit);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AuditEntityObject.java" startline="32" endline="36">
public AuditEntityObject (EntityAuditMgr mgr, Delegator delegator) {
    this.delegatorName = delegator.getDelegatorName ();
    this.delegator = delegator;
    this.mgr = mgr;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AuditEntityObject.java" startline="38" endline="40">
public EntityAuditMgr getAuditManager () {
    return this.mgr;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-AuditEntityObject.java" startline="42" endline="47">
public Delegator getDelegator () {
    if (this.delegator == null && delegatorName != null) {
        this.delegator = DelegatorFactory.getDelegator (delegatorName);
    }
    return this.delegator;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-CreateProcessEventAudit.java" startline="38" endline="49">
public CreateProcessEventAudit (EntityAuditMgr mgr, Delegator delegator, String eventAuditId) {
    super (mgr, delegator, eventAuditId);
    if (this.delegator != null) {
        try {
            this.createProcessEventAudit = delegator.findByPrimaryKey ("WfCreateProcessEventAudit", UtilMisc.toMap ("eventAuditId", eventAuditId));
        } catch (GenericEntityException e) {
            Debug.logError (e, module);
        }
    } else {
        Debug.logError ("Invalid delegator object passed", module);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-CreateProcessEventAudit.java" startline="51" endline="56">
public CreateProcessEventAudit (EntityAuditMgr mgr, Delegator delegator) {
    super (mgr, delegator);
    this.newValue = true;
    this.createProcessEventAudit = delegator.makeValue (org.ofbiz.shark.SharkConstants.WfCreateProcessEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.eventAuditId, this.eventAuditId));
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-CreateProcessEventAudit.java" startline="58" endline="61">
public CreateProcessEventAudit (EntityAuditMgr mgr, GenericValue createProcessEventAudit) {
    super (mgr, createProcessEventAudit.getDelegator (), createProcessEventAudit.getString (org.ofbiz.shark.SharkConstants.eventAuditId));
    this.createProcessEventAudit = createProcessEventAudit;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-CreateProcessEventAudit.java" startline="63" endline="65">
public void setPActivityId (String paId) {
    createProcessEventAudit.set (org.ofbiz.shark.SharkConstants.pActivityId, paId);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-CreateProcessEventAudit.java" startline="67" endline="69">
public String getPActivityId () {
    return createProcessEventAudit.getString (org.ofbiz.shark.SharkConstants.pActivityId);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-CreateProcessEventAudit.java" startline="71" endline="73">
public void setPProcessId (String ppId) {
    createProcessEventAudit.set (org.ofbiz.shark.SharkConstants.pProcessId, ppId);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-CreateProcessEventAudit.java" startline="75" endline="77">
public String getPProcessId () {
    return createProcessEventAudit.getString (org.ofbiz.shark.SharkConstants.pProcessId);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-CreateProcessEventAudit.java" startline="79" endline="81">
public void setPProcessName (String ppn) {
    createProcessEventAudit.set (org.ofbiz.shark.SharkConstants.pProcessName, ppn);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-CreateProcessEventAudit.java" startline="83" endline="85">
public String getPProcessName () {
    return createProcessEventAudit.getString (org.ofbiz.shark.SharkConstants.pProcessName);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-CreateProcessEventAudit.java" startline="87" endline="89">
public void setPProcessDefinitionName (String ppdn) {
    createProcessEventAudit.set (org.ofbiz.shark.SharkConstants.pProcessDefName, ppdn);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-CreateProcessEventAudit.java" startline="91" endline="93">
public String getPProcessDefinitionName () {
    return createProcessEventAudit.getString (org.ofbiz.shark.SharkConstants.pProcessDefName);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-CreateProcessEventAudit.java" startline="95" endline="97">
public void setPProcessDefinitionVersion (String ppdv) {
    createProcessEventAudit.set (org.ofbiz.shark.SharkConstants.pProcessDefVer, ppdv);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-CreateProcessEventAudit.java" startline="99" endline="101">
public String getPProcessDefinitionVersion () {
    return createProcessEventAudit.getString (org.ofbiz.shark.SharkConstants.pProcessDefVer);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-CreateProcessEventAudit.java" startline="103" endline="105">
public void setPActivityDefinitionId (String padId) {
    createProcessEventAudit.set (org.ofbiz.shark.SharkConstants.pActivityDefId, padId);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-CreateProcessEventAudit.java" startline="107" endline="109">
public String getPActivityDefinitionId () {
    return createProcessEventAudit.getString (org.ofbiz.shark.SharkConstants.pActivityDefId);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-CreateProcessEventAudit.java" startline="111" endline="113">
public void setPActivitySetDefinitionId (String padId) {
    createProcessEventAudit.set (org.ofbiz.shark.SharkConstants.pActivitySetDefId, padId);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-CreateProcessEventAudit.java" startline="115" endline="117">
public String getPActivitySetDefinitionId () {
    return createProcessEventAudit.getString (org.ofbiz.shark.SharkConstants.pActivitySetDefId);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-CreateProcessEventAudit.java" startline="119" endline="121">
public void setPProcessDefinitionId (String ppdId) {
    createProcessEventAudit.set (org.ofbiz.shark.SharkConstants.pProcessDefId, ppdId);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-CreateProcessEventAudit.java" startline="123" endline="125">
public String getPProcessDefinitionId () {
    return createProcessEventAudit.getString (org.ofbiz.shark.SharkConstants.pProcessDefId);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-CreateProcessEventAudit.java" startline="127" endline="129">
public void setPPackageId (String ppkgId) {
    createProcessEventAudit.set (org.ofbiz.shark.SharkConstants.pPackageId, ppkgId);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-CreateProcessEventAudit.java" startline="131" endline="133">
public String getPPackageId () {
    return createProcessEventAudit.getString (org.ofbiz.shark.SharkConstants.pPackageId);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-CreateProcessEventAudit.java" startline="135" endline="143">
public void store () throws GenericEntityException {
    super.store ();
    if (newValue) {
        newValue = false;
        delegator.createOrStore (createProcessEventAudit);
    } else {
        delegator.store (createProcessEventAudit);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-CreateProcessEventAudit.java" startline="145" endline="150">
public void reload () throws GenericEntityException {
    super.reload ();
    if (! newValue) {
        createProcessEventAudit.refresh ();
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-CreateProcessEventAudit.java" startline="152" endline="157">
public void remove () throws GenericEntityException {
    super.remove ();
    if (! newValue) {
        delegator.removeValue (createProcessEventAudit);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-DataEventAudit.java" startline="45" endline="56">
public DataEventAudit (EntityAuditMgr mgr, Delegator delegator, String eventAuditId) {
    super (mgr, delegator, eventAuditId);
    if (this.delegator != null) {
        try {
            this.dataEventAudit = delegator.findByPrimaryKey (org.ofbiz.shark.SharkConstants.WfDataEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.eventAuditId, eventAuditId));
        } catch (GenericEntityException e) {
            Debug.logError (e, module);
        }
    } else {
        Debug.logError ("Invalid delegator object passed", module);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-DataEventAudit.java" startline="58" endline="62">
public DataEventAudit (EntityAuditMgr mgr, Delegator delegator) {
    super (mgr, delegator);
    this.newValue = true;
    this.dataEventAudit = delegator.makeValue (org.ofbiz.shark.SharkConstants.WfDataEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.eventAuditId, this.eventAuditId));
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-DataEventAudit.java" startline="64" endline="67">
public DataEventAudit (EntityAuditMgr mgr, GenericValue dataEventAudit) {
    super (mgr, dataEventAudit.getDelegator (), dataEventAudit.getString (org.ofbiz.shark.SharkConstants.eventAuditId));
    this.dataEventAudit = dataEventAudit;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-DataEventAudit.java" startline="69" endline="72">
public void setOldData (Map od) {
    byte [] value = serialize (od);
    dataEventAudit.setBytes (org.ofbiz.shark.SharkConstants.oldData, (value != null ? value : null));
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-DataEventAudit.java" startline="74" endline="80">
public Map getOldData () {
    byte [] value = dataEventAudit.getBytes (org.ofbiz.shark.SharkConstants.oldData);
    if (value != null) {
        return deserialize (value);
    }
    return null;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-DataEventAudit.java" startline="82" endline="85">
public void setNewData (Map nd) {
    byte [] value = serialize (nd);
    dataEventAudit.setBytes (org.ofbiz.shark.SharkConstants.newData, (value != null ? value : null));
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-DataEventAudit.java" startline="87" endline="93">
public Map getNewData () {
    byte [] value = dataEventAudit.getBytes (org.ofbiz.shark.SharkConstants.newData);
    if (value != null) {
        return deserialize (value);
    }
    return null;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-DataEventAudit.java" startline="95" endline="103">
public void store () throws GenericEntityException {
    super.store ();
    if (newValue) {
        newValue = false;
        delegator.createOrStore (dataEventAudit);
    } else {
        delegator.store (dataEventAudit);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-DataEventAudit.java" startline="105" endline="110">
public void reload () throws GenericEntityException {
    super.reload ();
    if (! newValue) {
        dataEventAudit.refresh ();
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-DataEventAudit.java" startline="112" endline="117">
public void remove () throws GenericEntityException {
    super.remove ();
    if (! newValue) {
        delegator.removeValue (dataEventAudit);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-DataEventAudit.java" startline="119" endline="151">
private Map deserialize (byte [] bytes) {
    ByteArrayInputStream bis = null;
    ObjectInputStream ois = null;
    Map map = null;
    try {
        bis = new ByteArrayInputStream (bytes);
        ois = new ObjectInputStream (bis);
        map = (Map) ois.readObject ();
    } catch (IOException e) {
        Debug.logError (e, module);
    } catch (ClassCastException e) {
        Debug.logError (e, module);
    } catch (ClassNotFoundException e) {
        Debug.logError (e, module);
    } finally {
        if (ois != null) {
            try {
                ois.close ();
            } catch (IOException e) {
                Debug.logError (e, module);
            }
        }
        if (bis != null) {
            try {
                bis.close ();
            } catch (IOException e) {
                Debug.logError (e, module);
            }
        }
    }
    return map;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-DataEventAudit.java" startline="153" endline="183">
private byte [] serialize (Map map) {
    ByteArrayOutputStream bos = null;
    ObjectOutputStream oos = null;
    byte [] bytes = null;
    try {
        bos = new ByteArrayOutputStream ();
        oos = new ObjectOutputStream (bos);
        oos.writeObject (map);
        oos.flush ();
        bytes = bos.toByteArray ();
    } catch (IOException e) {
        Debug.logError (e, module);
    } finally {
        if (oos != null) {
            try {
                oos.close ();
            } catch (IOException e) {
                Debug.logError (e, module);
            }
        }
        if (bos != null) {
            try {
                bos.close ();
            } catch (IOException e) {
                Debug.logError (e, module);
            }
        }
    }
    return bytes;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EntityAuditMgr.java" startline="48" endline="50">
public void configure (CallbackUtilities callBackUtil) throws RootException {
    this.callBackUtil = callBackUtil;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EntityAuditMgr.java" startline="53" endline="55">
public AssignmentEventAuditPersistenceInterface createAssignmentEventAudit () {
    return new AssignmentEventAudit (this, SharkContainer.getDelegator ());
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EntityAuditMgr.java" startline="57" endline="59">
public CreateProcessEventAuditPersistenceInterface createCreateProcessEventAudit () {
    return new CreateProcessEventAudit (this, SharkContainer.getDelegator ());
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EntityAuditMgr.java" startline="61" endline="63">
public DataEventAuditPersistenceInterface createDataEventAudit () {
    return new DataEventAudit (this, SharkContainer.getDelegator ());
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EntityAuditMgr.java" startline="65" endline="67">
public StateEventAuditPersistenceInterface createStateEventAudit () {
    return new StateEventAudit (this, SharkContainer.getDelegator ());
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EntityAuditMgr.java" startline="70" endline="76">
public void persist (AssignmentEventAuditPersistenceInterface assignmentEvent, SharkTransaction trans) throws EventAuditException {
    try {
        ((AssignmentEventAudit) assignmentEvent).store ();
    } catch (GenericEntityException e) {
        throw new EventAuditException (e);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EntityAuditMgr.java" startline="78" endline="84">
public void persist (CreateProcessEventAuditPersistenceInterface processEvent, SharkTransaction trans) throws EventAuditException {
    try {
        ((CreateProcessEventAudit) processEvent).store ();
    } catch (GenericEntityException e) {
        throw new EventAuditException (e);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EntityAuditMgr.java" startline="86" endline="92">
public void persist (DataEventAuditPersistenceInterface dataEvent, SharkTransaction trans) throws EventAuditException {
    try {
        ((DataEventAudit) dataEvent).store ();
    } catch (GenericEntityException e) {
        throw new EventAuditException (e);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EntityAuditMgr.java" startline="94" endline="100">
public void persist (StateEventAuditPersistenceInterface stateEvent, SharkTransaction trans) throws EventAuditException {
    try {
        ((StateEventAudit) stateEvent).store ();
    } catch (GenericEntityException e) {
        throw new EventAuditException (e);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EntityAuditMgr.java" startline="103" endline="108">
public boolean restore (AssignmentEventAuditPersistenceInterface assignment, SharkTransaction trans) throws EventAuditException {
    if (assignment == null) {
        return false;
    }
    return true;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EntityAuditMgr.java" startline="110" endline="115">
public boolean restore (CreateProcessEventAuditPersistenceInterface createProcess, SharkTransaction trans) throws EventAuditException {
    if (createProcess == null) {
        return false;
    }
    return true;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EntityAuditMgr.java" startline="117" endline="122">
public boolean restore (DataEventAuditPersistenceInterface data, SharkTransaction trans) throws EventAuditException {
    if (data == null) {
        return false;
    }
    return true;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EntityAuditMgr.java" startline="124" endline="129">
public boolean restore (StateEventAuditPersistenceInterface state, SharkTransaction trans) throws EventAuditException {
    if (state == null) {
        return false;
    }
    return true;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EntityAuditMgr.java" startline="132" endline="134">
public void delete (AssignmentEventAuditPersistenceInterface assignmentEventAuditPersistenceInterface, SharkTransaction trans) throws EventAuditException {
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EntityAuditMgr.java" startline="136" endline="138">
public void delete (CreateProcessEventAuditPersistenceInterface createProcessEventAuditPersistenceInterface, SharkTransaction trans) throws EventAuditException {
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EntityAuditMgr.java" startline="140" endline="142">
public void delete (DataEventAuditPersistenceInterface dataEventAuditPersistenceInterface, SharkTransaction trans) throws EventAuditException {
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EntityAuditMgr.java" startline="144" endline="146">
public void delete (StateEventAuditPersistenceInterface stateEventAuditPersistenceInterface, SharkTransaction trans) throws EventAuditException {
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EntityAuditMgr.java" startline="149" endline="156">
public List restoreProcessHistory (String processId, SharkTransaction trans) throws EventAuditException {
    List processHistory = new ArrayList ();
    processHistory.addAll (getCreateProcessEvents (processId));
    processHistory.addAll (getProcessDataEvents (processId));
    processHistory.addAll (getProcessStateEvents (processId));
    if (Debug.verboseOn ()) Debug.log (":: restoreProcessHistory :: " + processHistory.size (), module);

    return processHistory;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EntityAuditMgr.java" startline="158" endline="166">
public List restoreActivityHistory (String processId, String activityId, SharkTransaction trans) throws EventAuditException {
    if (Debug.verboseOn ()) Debug.log (":: restoreActivityHistory ::", module);

    List activityHistory = new ArrayList ();
    activityHistory.addAll (getAssignmentEvents (processId, activityId));
    activityHistory.addAll (getActivityDataEvents (processId, activityId));
    activityHistory.addAll (getActivityStateEvents (processId, activityId));
    if (Debug.verboseOn ()) Debug.log (":: restoreActivityHistory :: " + activityHistory.size (), module);

    return activityHistory;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EntityAuditMgr.java" startline="169" endline="190">
private List getCreateProcessEvents (String processId) throws EventAuditException {
    if (Debug.verboseOn ()) Debug.log (":: getCreateProcessEvents ::", module);

    Delegator delegator = SharkContainer.getDelegator ();
    List createProcessEvents = new ArrayList ();
    List lookupList = null;
    try {
        lookupList = delegator.findByAnd (org.ofbiz.shark.SharkConstants.WfEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.auditType, "processCreated", org.ofbiz.shark.SharkConstants.processId, processId));
    } catch (GenericEntityException e) {
        Debug.logError (e, module);
        throw new EventAuditException (e);
    }
    if (UtilValidate.isNotEmpty (lookupList)) {
        Iterator i = lookupList.iterator ();
        while (i.hasNext ()) {
            GenericValue v = (GenericValue) i.next ();
            if (v != null) {
                createProcessEvents.add (new CreateProcessEventAudit (this, delegator, v.getString (org.ofbiz.shark.SharkConstants.eventAuditId)));
            }
        }
    }
    return createProcessEvents;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EntityAuditMgr.java" startline="192" endline="213">
private List getProcessStateEvents (String processId) throws EventAuditException {
    if (Debug.verboseOn ()) Debug.log (":: getProcessStateEvents ::", module);

    Delegator delegator = SharkContainer.getDelegator ();
    List stateEvents = new ArrayList ();
    List lookupList = null;
    try {
        lookupList = delegator.findByAnd (org.ofbiz.shark.SharkConstants.WfEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.auditType, "processStateChanged", org.ofbiz.shark.SharkConstants.processId, processId));
    } catch (GenericEntityException e) {
        Debug.logError (e, module);
        throw new EventAuditException (e);
    }
    if (UtilValidate.isNotEmpty (lookupList)) {
        Iterator i = lookupList.iterator ();
        while (i.hasNext ()) {
            GenericValue v = (GenericValue) i.next ();
            if (v != null) {
                stateEvents.add (new StateEventAudit (this, delegator, v.getString (org.ofbiz.shark.SharkConstants.eventAuditId)));
            }
        }
    }
    return stateEvents;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EntityAuditMgr.java" startline="215" endline="236">
private List getProcessDataEvents (String processId) throws EventAuditException {
    if (Debug.verboseOn ()) Debug.log (":: getProcessDataEvents ::", module);

    Delegator delegator = SharkContainer.getDelegator ();
    List dataEvents = new ArrayList ();
    List lookupList = null;
    try {
        lookupList = delegator.findByAnd (org.ofbiz.shark.SharkConstants.WfEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.auditType, "processContextChanged", org.ofbiz.shark.SharkConstants.processId, processId));
    } catch (GenericEntityException e) {
        Debug.logError (e, module);
        throw new EventAuditException (e);
    }
    if (UtilValidate.isNotEmpty (lookupList)) {
        Iterator i = lookupList.iterator ();
        while (i.hasNext ()) {
            GenericValue v = (GenericValue) i.next ();
            if (v != null) {
                dataEvents.add (new DataEventAudit (this, delegator, v.getString (org.ofbiz.shark.SharkConstants.eventAuditId)));
            }
        }
    }
    return dataEvents;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EntityAuditMgr.java" startline="239" endline="260">
private List getAssignmentEvents (String processId, String activityId) throws EventAuditException {
    if (Debug.verboseOn ()) Debug.log (":: getAssignmentEvents ::", module);

    Delegator delegator = SharkContainer.getDelegator ();
    List assignmentEvents = new ArrayList ();
    List lookupList = null;
    try {
        lookupList = delegator.findByAnd (org.ofbiz.shark.SharkConstants.WfEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.auditType, "activityAssignmentChanged", org.ofbiz.shark.SharkConstants.processId, processId, org.ofbiz.shark.SharkConstants.activityId, activityId));
    } catch (GenericEntityException e) {
        Debug.logError (e, module);
        throw new EventAuditException (e);
    }
    if (UtilValidate.isNotEmpty (lookupList)) {
        Iterator i = lookupList.iterator ();
        while (i.hasNext ()) {
            GenericValue v = (GenericValue) i.next ();
            if (v != null) {
                assignmentEvents.add (new AssignmentEventAudit (this, delegator, v.getString (org.ofbiz.shark.SharkConstants.eventAuditId)));
            }
        }
    }
    return assignmentEvents;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EntityAuditMgr.java" startline="262" endline="283">
private List getActivityStateEvents (String processId, String activityId) throws EventAuditException {
    if (Debug.verboseOn ()) Debug.log (":: getActivityStateEvents ::", module);

    Delegator delegator = SharkContainer.getDelegator ();
    List stateEvents = new ArrayList ();
    List lookupList = null;
    try {
        lookupList = delegator.findByAnd (org.ofbiz.shark.SharkConstants.WfEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.auditType, "activityStateChanged", org.ofbiz.shark.SharkConstants.processId, processId, org.ofbiz.shark.SharkConstants.activityId, activityId));
    } catch (GenericEntityException e) {
        Debug.logError (e, module);
        throw new EventAuditException (e);
    }
    if (UtilValidate.isNotEmpty (lookupList)) {
        Iterator i = lookupList.iterator ();
        while (i.hasNext ()) {
            GenericValue v = (GenericValue) i.next ();
            if (v != null) {
                stateEvents.add (new StateEventAudit (this, delegator, v.getString (org.ofbiz.shark.SharkConstants.eventAuditId)));
            }
        }
    }
    return stateEvents;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EntityAuditMgr.java" startline="285" endline="306">
private List getActivityDataEvents (String processId, String activityId) throws EventAuditException {
    if (Debug.verboseOn ()) Debug.log (":: getActivityDataEvents ::", module);

    Delegator delegator = SharkContainer.getDelegator ();
    List dataEvents = new ArrayList ();
    List lookupList = null;
    try {
        lookupList = delegator.findByAnd (org.ofbiz.shark.SharkConstants.WfEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.auditType, "activityContextChanged", org.ofbiz.shark.SharkConstants.processId, processId, org.ofbiz.shark.SharkConstants.activityId, activityId));
    } catch (GenericEntityException e) {
        Debug.logError (e, module);
        throw new EventAuditException (e);
    }
    if (UtilValidate.isNotEmpty (lookupList)) {
        Iterator i = lookupList.iterator ();
        while (i.hasNext ()) {
            GenericValue v = (GenericValue) i.next ();
            if (v != null) {
                dataEvents.add (new DataEventAudit (this, delegator, v.getString (org.ofbiz.shark.SharkConstants.eventAuditId)));
            }
        }
    }
    return dataEvents;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EntityAuditMgr.java" startline="308" endline="311">
public synchronized String getNextId (String string) throws EventAuditException {
    Delegator delegator = SharkContainer.getDelegator ();
    return delegator.getNextSeqId ("SharkAuditSeq").toString ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EventAudit.java" startline="40" endline="52">
public EventAudit (EntityAuditMgr mgr, Delegator delegator, String eventAuditId) {
    super (mgr, delegator);
    this.eventAuditId = eventAuditId;
    if (this.delegator != null) {
        try {
            this.eventAudit = delegator.findByPrimaryKey (org.ofbiz.shark.SharkConstants.WfEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.eventAuditId, eventAuditId));
        } catch (GenericEntityException e) {
            Debug.logError (e, module);
        }
    } else {
        Debug.logError ("Invalid delegator object passed", module);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EventAudit.java" startline="54" endline="59">
public EventAudit (EntityAuditMgr mgr, Delegator delegator) {
    super (mgr, delegator);
    this.newValue = true;
    this.eventAuditId = delegator.getNextSeqId (org.ofbiz.shark.SharkConstants.WfEventAudit);
    this.eventAudit = delegator.makeValue (org.ofbiz.shark.SharkConstants.WfEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.eventAuditId, eventAuditId));
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EventAudit.java" startline="61" endline="65">
public EventAudit (EntityAuditMgr mgr, GenericValue eventAudit) {
    super (mgr, eventAudit.getDelegator ());
    this.eventAuditId = eventAudit.getString (org.ofbiz.shark.SharkConstants.eventAuditId);
    this.eventAudit = eventAudit;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EventAudit.java" startline="67" endline="69">
public String getEventAuditId () {
    return eventAudit.getString (org.ofbiz.shark.SharkConstants.eventAuditId);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EventAudit.java" startline="71" endline="73">
public void setUTCTime (String ts) {
    eventAudit.set (org.ofbiz.shark.SharkConstants.auditTime, ts);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EventAudit.java" startline="75" endline="77">
public String getUTCTime () {
    return eventAudit.getString (org.ofbiz.shark.SharkConstants.auditTime);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EventAudit.java" startline="79" endline="81">
public void setType (String t) {
    eventAudit.set (org.ofbiz.shark.SharkConstants.auditType, t);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EventAudit.java" startline="83" endline="85">
public String getType () {
    return eventAudit.getString (org.ofbiz.shark.SharkConstants.auditType);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EventAudit.java" startline="87" endline="89">
public void setActivityId (String aId) {
    eventAudit.set (org.ofbiz.shark.SharkConstants.activityId, aId);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EventAudit.java" startline="91" endline="93">
public String getActivityId () {
    return eventAudit.getString (org.ofbiz.shark.SharkConstants.activityId);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EventAudit.java" startline="95" endline="97">
public void setActivityName (String an) {
    eventAudit.set (org.ofbiz.shark.SharkConstants.activityName, an);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EventAudit.java" startline="99" endline="101">
public String getActivityName () {
    return eventAudit.getString (org.ofbiz.shark.SharkConstants.activityName);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EventAudit.java" startline="103" endline="105">
public void setProcessId (String pId) {
    eventAudit.set (org.ofbiz.shark.SharkConstants.processId, pId);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EventAudit.java" startline="107" endline="109">
public String getProcessId () {
    return eventAudit.getString (org.ofbiz.shark.SharkConstants.processId);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EventAudit.java" startline="111" endline="113">
public void setProcessName (String pn) {
    eventAudit.set (org.ofbiz.shark.SharkConstants.processName, pn);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EventAudit.java" startline="115" endline="117">
public String getProcessName () {
    return eventAudit.getString (org.ofbiz.shark.SharkConstants.processName);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EventAudit.java" startline="119" endline="121">
public void setProcessDefinitionName (String pdn) {
    eventAudit.set (org.ofbiz.shark.SharkConstants.processDefName, pdn);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EventAudit.java" startline="123" endline="125">
public String getProcessDefinitionName () {
    return eventAudit.getString (org.ofbiz.shark.SharkConstants.processDefName);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EventAudit.java" startline="127" endline="129">
public void setProcessDefinitionVersion (String pdv) {
    eventAudit.set (org.ofbiz.shark.SharkConstants.processDefVer, pdv);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EventAudit.java" startline="131" endline="133">
public String getProcessDefinitionVersion () {
    return eventAudit.getString (org.ofbiz.shark.SharkConstants.processDefVer);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EventAudit.java" startline="135" endline="137">
public void setActivityDefinitionId (String adId) {
    eventAudit.set (org.ofbiz.shark.SharkConstants.activityDefId, adId);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EventAudit.java" startline="139" endline="141">
public String getActivityDefinitionId () {
    return eventAudit.getString (org.ofbiz.shark.SharkConstants.activityDefId);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EventAudit.java" startline="143" endline="145">
public void setActivitySetDefinitionId (String adId) {
    eventAudit.set (org.ofbiz.shark.SharkConstants.activitySetDefId, adId);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EventAudit.java" startline="147" endline="150">
public String getActivitySetDefinitionId () {
    return eventAudit.getString (org.ofbiz.shark.SharkConstants.activitySetDefId);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EventAudit.java" startline="152" endline="154">
public void setProcessDefinitionId (String pdId) {
    eventAudit.set (org.ofbiz.shark.SharkConstants.processDefId, pdId);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EventAudit.java" startline="156" endline="158">
public String getProcessDefinitionId () {
    return eventAudit.getString (org.ofbiz.shark.SharkConstants.processDefId);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EventAudit.java" startline="160" endline="162">
public void setPackageId (String pkgId) {
    eventAudit.set (org.ofbiz.shark.SharkConstants.packageId, pkgId);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EventAudit.java" startline="164" endline="166">
public String getPackageId () {
    return eventAudit.getString (org.ofbiz.shark.SharkConstants.packageId);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EventAudit.java" startline="168" endline="175">
public void store () throws GenericEntityException {
    if (newValue) {
        newValue = false;
        delegator.createOrStore (eventAudit);
    } else {
        delegator.store (eventAudit);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EventAudit.java" startline="177" endline="181">
public void reload () throws GenericEntityException {
    if (! newValue) {
        eventAudit.refresh ();
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-EventAudit.java" startline="183" endline="187">
public void remove () throws GenericEntityException {
    if (! newValue) {
        delegator.removeValue (eventAudit);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ExpressionBuilderMgr.java" startline="34" endline="36">
public ActivityIteratorExpressionBuilder getActivityIteratorExpressionBuilder () {
    throw new RuntimeException ("Not implemented yet!");
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ExpressionBuilderMgr.java" startline="38" endline="40">
public AssignmentIteratorExpressionBuilder getAssignmentIteratorExpressionBuilder () {
    throw new RuntimeException ("Not implemented yet!");
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ExpressionBuilderMgr.java" startline="42" endline="44">
public EventAuditIteratorExpressionBuilder getEventAuditIteratorExpressionBuilder () {
    throw new RuntimeException ("Not implemented yet!");
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ExpressionBuilderMgr.java" startline="46" endline="48">
public ProcessIteratorExpressionBuilder getProcessIteratorExpressionBuilder () {
    throw new RuntimeException ("Not implemented yet!");
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ExpressionBuilderMgr.java" startline="50" endline="52">
public ProcessMgrIteratorExpressionBuilder getProcessMgrIteratorExpressionBuilder () {
    return new ProcessMgrIteratorCondExprBldr ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ExpressionBuilderMgr.java" startline="54" endline="56">
public ResourceIteratorExpressionBuilder getResourceIteratorExpressionBuilder () {
    throw new RuntimeException ("Not implemented yet!");
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="132" endline="134">
public static GenericDelegator getGenericDelegator (String delegatorName) {
    return (GenericDelegator) DelegatorFactory.getDelegator (delegatorName);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="136" endline="143">
protected static List < String > getUserIdentifierStack () {
    List < String > curValList = userIdentifierStack.get ();
    if (curValList == null) {
        curValList = FastList.newInstance ();
        userIdentifierStack.set (curValList);
    }
    return curValList;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="145" endline="148">
public static String getCurrentUserIdentifier () {
    List < String > curValList = getUserIdentifierStack ();
    return curValList.size () > 0 ? curValList.get (0) : null;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="150" endline="156">
public static void pushUserIdentifier (String userIdentifier) {
    if (userIdentifier == null) {
        return;
    }
    List < String > curValList = getUserIdentifierStack ();
    curValList.add (0, userIdentifier);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="158" endline="165">
public static String popUserIdentifier () {
    List < String > curValList = getUserIdentifierStack ();
    if (curValList.size () == 0) {
        return null;
    } else {
        return curValList.remove (0);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="167" endline="170">
public static void clearUserIdentifierStack () {
    List < String > curValList = getUserIdentifierStack ();
    curValList.clear ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="172" endline="179">
protected static List < String > getSessionIdentifierStack () {
    List < String > curValList = sessionIdentifierStack.get ();
    if (curValList == null) {
        curValList = FastList.newInstance ();
        sessionIdentifierStack.set (curValList);
    }
    return curValList;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="181" endline="184">
public static String getCurrentSessionIdentifier () {
    List < String > curValList = getSessionIdentifierStack ();
    return curValList.size () > 0 ? curValList.get (0) : null;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="186" endline="192">
public static void pushSessionIdentifier (String sessionIdentifier) {
    if (sessionIdentifier == null) {
        return;
    }
    List < String > curValList = getSessionIdentifierStack ();
    curValList.add (0, sessionIdentifier);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="194" endline="201">
public static String popSessionIdentifier () {
    List < String > curValList = getSessionIdentifierStack ();
    if (curValList.size () == 0) {
        return null;
    } else {
        return curValList.remove (0);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="203" endline="206">
public static void clearSessionIdentifierStack () {
    List < String > curValList = getSessionIdentifierStack ();
    curValList.clear ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="209" endline="209">
protected GenericDelegator () {
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="212" endline="255">
protected GenericDelegator (String delegatorFullName) throws GenericEntityException {
    this.setDelegatorNames (delegatorFullName);
    if (UtilValidate.isNotEmpty (this.delegatorTenantId)) {
        Delegator baseDelegator = DelegatorFactory.getDelegator (this.delegatorBaseName);
        GenericValue tenant = baseDelegator.findOne ("Tenant", true, "tenantId", this.delegatorTenantId);
        if (tenant == null) {
            throw new GenericEntityException ("No Tenant record found for delegator [" + this.delegatorFullName + "] with tenantId [" + this.delegatorTenantId + "]");
        } else if ("Y".equals (tenant.getString ("disabled"))) {
            throw new GenericEntityException ("No Tenant record found for delegator [" + this.delegatorFullName + "] with tenantId [" + this.delegatorTenantId + "]");
        }

    }
    this.modelReader = ModelReader.getModelReader (delegatorBaseName);
    this.modelGroupReader = ModelGroupReader.getModelGroupReader (delegatorBaseName);
    cache = new Cache (delegatorFullName);
    List < String > warningList = FastList.newInstance ();
    Debug.logImportant ("Doing entity definition check...", module);
    ModelEntityChecker.checkEntities (this, warningList);
    if (warningList.size () > 0) {
        Debug.logWarning ("=-=-=-=-= Found " + warningList.size () + " warnings when checking the entity definitions:", module);
        for (String warning : warningList) {
            Debug.logWarning (warning, module);
        }
    }
    Set < String > groupNames = getModelGroupReader ().getGroupNames (delegatorBaseName);
    List < Future < Void > > futures = FastList.newInstance ();
    for (String groupName : groupNames) {
        futures.add (ExecutionPool.GLOBAL_EXECUTOR.submit (createHelperCallable (groupName)));
    }
    ExecutionPool.getAllFutures (futures);
    this.crypto = new EntityCrypto (this);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="257" endline="282">
private void initializeOneGenericHelper (String groupName) {
    GenericHelperInfo helperInfo = this.getGroupHelperInfo (groupName);
    String helperBaseName = helperInfo.getHelperBaseName ();
    if (Debug.infoOn ()) {
        Debug.logInfo ("Delegator \"" + delegatorFullName + "\" initializing helper \"" + helperBaseName + "\" for entity group \"" + groupName + "\".", module);
    }
    if (UtilValidate.isNotEmpty (helperInfo.getHelperFullName ())) {
        ModelFieldTypeReader.getModelFieldTypeReader (helperBaseName);
        GenericHelper helper = GenericHelperFactory.getHelper (helperInfo);
        DatasourceInfo datasourceInfo = EntityConfigUtil.getDatasourceInfo (helperBaseName);
        if (datasourceInfo.checkOnStart) {
            if (Debug.infoOn ()) {
                Debug.logInfo ("Doing database check as requested in entityengine.xml with addMissing=" + datasourceInfo.addMissingOnStart, module);
            }
            try {
                helper.checkDataSource (this.getModelEntityMapByGroup (groupName), null, datasourceInfo.addMissingOnStart);
            } catch (GenericEntityException e) {
                Debug.logWarning (e, e.getMessage (), module);
            }
        }
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="284" endline="291">
protected Callable < Void > createHelperCallable (final String groupName) {
    return new Callable < Void > () {
        public Void call () {
            initializeOneGenericHelper (groupName);
            return null;
        }}

    ;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="286" endline="289">
public Void call () {
    initializeOneGenericHelper (groupName);
    return null;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="293" endline="303">
protected void setDelegatorNames (String delegatorFullName) {
    this.delegatorFullName = delegatorFullName;
    int hashSymbolIndex = delegatorFullName.indexOf ('#');
    if (hashSymbolIndex == - 1) {
        this.delegatorBaseName = delegatorFullName;
    } else {
        this.delegatorBaseName = delegatorFullName.substring (0, hashSymbolIndex);
        this.delegatorTenantId = delegatorFullName.substring (hashSymbolIndex + 1);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="308" endline="336">
public synchronized void initEntityEcaHandler () {
    if (this.entityEcaHandler != null) {
        return;
    }
    if (getDelegatorInfo ().useEntityEca) {
        ClassLoader loader = Thread.currentThread ().getContextClassLoader ();
        String entityEcaHandlerClassName = getDelegatorInfo ().entityEcaHandlerClassName;
        try {
            Class < ? > eecahClass = loader.loadClass (entityEcaHandlerClassName);
            this.entityEcaHandler = UtilGenerics.cast (eecahClass.newInstance ());
            this.entityEcaHandler.setDelegator (this);
        } catch (ClassNotFoundException e) {
            Debug.logWarning (e, "EntityEcaHandler class with name " + entityEcaHandlerClassName + " was not found, Entity ECA Rules will be disabled", module);
        } catch (InstantiationException e) {
            Debug.logWarning (e, "EntityEcaHandler class with name " + entityEcaHandlerClassName + " could not be instantiated, Entity ECA Rules will be disabled", module);
        } catch (IllegalAccessException e) {
            Debug.logWarning (e, "EntityEcaHandler class with name " + entityEcaHandlerClassName + " could not be accessed (illegal), Entity ECA Rules will be disabled", module);
        } catch (ClassCastException e) {
            Debug.logWarning (e, "EntityEcaHandler class with name " + entityEcaHandlerClassName + " does not implement the EntityEcaHandler interface, Entity ECA Rules will be disabled", module);
        }
    } else {
        Debug.logInfo ("Entity ECA Handler disabled for delegator [" + delegatorFullName + "]", module);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="341" endline="343">
public String getDelegatorName () {
    return this.delegatorFullName;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="348" endline="350">
public String getDelegatorBaseName () {
    return this.delegatorBaseName;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="355" endline="357">
public String getDelegatorTenantId () {
    return this.delegatorTenantId;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="362" endline="364">
public String getOriginalDelegatorName () {
    return this.originalDelegatorName == null ? this.delegatorFullName : this.originalDelegatorName;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="366" endline="371">
protected DelegatorInfo getDelegatorInfo () {
    if (this.delegatorInfo == null) {
        this.delegatorInfo = EntityConfigUtil.getDelegatorInfo (this.delegatorBaseName);
    }
    return this.delegatorInfo;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="376" endline="378">
public ModelReader getModelReader () {
    return this.modelReader;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="383" endline="385">
public ModelGroupReader getModelGroupReader () {
    return this.modelGroupReader;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="390" endline="397">
public ModelEntity getModelEntity (String entityName) {
    try {
        return getModelReader ().getModelEntity (entityName);
    } catch (GenericEntityException e) {
        Debug.logError (e, "Error getting entity definition from model", module);
        return null;
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="402" endline="404">
public String getEntityGroupName (String entityName) {
    return getModelGroupReader ().getEntityGroupName (entityName, this.delegatorBaseName);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="409" endline="447">
public Map < String, ModelEntity > getModelEntityMapByGroup (String groupName) throws GenericEntityException {
    Set < String > entityNameSet = getModelGroupReader ().getEntityNamesByGroup (groupName);
    if (this.getDelegatorInfo ().defaultGroupName.equals (groupName)) {
        Set < String > allEntityNames = this.getModelReader ().getEntityNames ();
        for (String entityName : allEntityNames) {
            if (this.getDelegatorInfo ().defaultGroupName.equals (getModelGroupReader ().getEntityGroupName (entityName, this.delegatorBaseName))) {
                entityNameSet.add (entityName);
            }
        }
    }
    Map < String, ModelEntity > entities = FastMap.newInstance ();
    if (UtilValidate.isEmpty (entityNameSet)) {
        return entities;
    }
    int errorCount = 0;
    for (String entityName : entityNameSet) {
        try {
            ModelEntity entity = getModelReader ().getModelEntity (entityName);
            if (entity != null) {
                entities.put (entity.getEntityName (), entity);
            } else {
                throw new IllegalStateException ("Could not find entity with name " + entityName);
            }
        } catch (GenericEntityException ex) {
            errorCount ++;
            Debug.logError ("Entity [" + entityName + "] named in Entity Group with name " + groupName + " are not defined in any Entity Definition file", module);
        }
    }
    if (errorCount > 0) {
        Debug.logError (errorCount + " entities were named in ModelGroup but not defined in any EntityModel", module);
    }
    return entities;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="452" endline="454">
public String getGroupHelperName (String groupName) {
    return this.getDelegatorInfo ().groupMap.get (groupName);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="456" endline="494">
public GenericHelperInfo getGroupHelperInfo (String entityGroupName) {
    if (entityGroupName == null) {
        return null;
    }
    String helperBaseName = this.getGroupHelperName (entityGroupName);
    if (helperBaseName == null) {
        return null;
    }
    GenericHelperInfo helperInfo = new GenericHelperInfo (entityGroupName, helperBaseName);
    if (UtilValidate.isNotEmpty (this.delegatorTenantId) && ! "org.ofbiz.tenant".equals (entityGroupName)) {
        helperInfo.setTenantId (this.delegatorTenantId);
        try {
            Delegator baseDelegator = DelegatorFactory.getDelegator (this.delegatorBaseName);
            GenericValue tenantDataSource = baseDelegator.findOne ("TenantDataSource", true, "tenantId", this.delegatorTenantId, "entityGroupName", entityGroupName);
            if (tenantDataSource != null) {
                helperInfo.setOverrideJdbcUri (tenantDataSource.getString ("jdbcUri"));
                helperInfo.setOverrideUsername (tenantDataSource.getString ("jdbcUsername"));
                helperInfo.setOverridePassword (tenantDataSource.getString ("jdbcPassword"));
            } else {
            }
        } catch (GenericEntityException e) {
            Debug.logInfo (e, "Error getting TenantDataSource info for tenantId=" + this.delegatorTenantId + ", entityGroupName=" + entityGroupName, module);
        }
    }
    return helperInfo;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="496" endline="498">
protected GenericHelperInfo getEntityHelperInfo (String entityName) {
    return this.getGroupHelperInfo (this.getEntityGroupName (entityName));
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="503" endline="505">
public String getEntityHelperName (String entityName) {
    return this.getGroupHelperName (this.getEntityGroupName (entityName));
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="510" endline="515">
public String getEntityHelperName (ModelEntity entity) {
    if (entity == null) {
        return null;
    }
    return getEntityHelperName (entity.getEntityName ());
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="520" endline="528">
public GenericHelper getEntityHelper (String entityName) throws GenericEntityException {
    GenericHelperInfo helperInfo = getEntityHelperInfo (entityName);
    if (helperInfo != null) {
        return GenericHelperFactory.getHelper (helperInfo);
    } else {
        throw new GenericEntityException ("There is no datasource (Helper) configured for the entity-group [" + this.getEntityGroupName (entityName) + "]; was trying to find datesource (helper) for entity [" + entityName + "]");
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="533" endline="535">
public GenericHelper getEntityHelper (ModelEntity entity) throws GenericEntityException {
    return getEntityHelper (entity.getEntityName ());
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="540" endline="542">
public ModelFieldType getEntityFieldType (ModelEntity entity, String type) throws GenericEntityException {
    return this.getModelFieldTypeReader (entity).getModelFieldType (type);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="547" endline="557">
public ModelFieldTypeReader getModelFieldTypeReader (ModelEntity entity) {
    String helperName = getEntityHelperName (entity);
    if (helperName == null || helperName.length () <= 0) {
        return null;
    }
    ModelFieldTypeReader modelFieldTypeReader = ModelFieldTypeReader.getModelFieldTypeReader (helperName);
    if (modelFieldTypeReader == null) {
        throw new IllegalArgumentException ("ModelFieldTypeReader not found for entity " + entity.getEntityName () + " with helper name " + helperName);
    }
    return modelFieldTypeReader;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="562" endline="574">
public Collection < String > getEntityFieldTypeNames (ModelEntity entity) throws GenericEntityException {
    String helperName = getEntityHelperName (entity);
    if (helperName == null || helperName.length () <= 0) {
        return null;
    }
    ModelFieldTypeReader modelFieldTypeReader = ModelFieldTypeReader.getModelFieldTypeReader (helperName);
    if (modelFieldTypeReader == null) {
        throw new GenericEntityException ("ModelFieldTypeReader not found for entity " + entity.getEntityName () + " with helper name " + helperName);
    }
    return modelFieldTypeReader.getFieldTypeNames ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="579" endline="587">
public GenericValue makeValue (String entityName) {
    ModelEntity entity = this.getModelEntity (entityName);
    if (entity == null) {
        throw new IllegalArgumentException ("[GenericDelegator.makeValue] could not find entity for entityName: " + entityName);
    }
    GenericValue value = GenericValue.create (entity);
    value.setDelegator (this);
    return value;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="592" endline="594">
public GenericValue makeValue (String entityName, Object...fields) {
    return makeValue (entityName, UtilMisc.< String, Object > toMap (fields));
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="599" endline="605">
public GenericValue makeValue (String entityName, Map < String, ? extends Object > fields) {
    ModelEntity entity = this.getModelEntity (entityName);
    if (entity == null) {
        throw new IllegalArgumentException ("[GenericDelegator.makeValue] could not find entity for entityName: " + entityName);
    }
    return GenericValue.create (this, entity, fields);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="610" endline="616">
public GenericValue makeValueSingle (String entityName, Object singlePkValue) {
    ModelEntity entity = this.getModelEntity (entityName);
    if (entity == null) {
        throw new IllegalArgumentException ("[GenericDelegator.makeValue] could not find entity for entityName: " + entityName);
    }
    return GenericValue.create (this, entity, singlePkValue);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="621" endline="623">
public GenericValue makeValidValue (String entityName, Object...fields) {
    return makeValidValue (entityName, UtilMisc.< String, Object > toMap (fields));
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="628" endline="638">
public GenericValue makeValidValue (String entityName, Map < String, ? extends Object > fields) {
    ModelEntity entity = this.getModelEntity (entityName);
    if (entity == null) {
        throw new IllegalArgumentException ("[GenericDelegator.makeValidValue] could not find entity for entityName: " + entityName);
    }
    GenericValue value = GenericValue.create (entity);
    value.setDelegator (this);
    value.setPKFields (fields, true);
    value.setNonPKFields (fields, true);
    return value;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="643" endline="645">
public GenericPK makePK (String entityName) {
    return this.makePK (entityName, (Map < String, Object >) null);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="650" endline="652">
public GenericPK makePK (String entityName, Object...fields) {
    return makePK (entityName, UtilMisc.< String, Object > toMap (fields));
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="657" endline="663">
public GenericPK makePK (String entityName, Map < String, ? extends Object > fields) {
    ModelEntity entity = this.getModelEntity (entityName);
    if (entity == null) {
        throw new IllegalArgumentException ("[GenericDelegator.makePK] could not find entity for entityName: " + entityName);
    }
    return GenericPK.create (this, entity, fields);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="668" endline="674">
public GenericPK makePKSingle (String entityName, Object singlePkValue) {
    ModelEntity entity = this.getModelEntity (entityName);
    if (entity == null) {
        throw new IllegalArgumentException ("[GenericDelegator.makePKSingle] could not find entity for entityName: " + entityName);
    }
    return GenericPK.create (this, entity, singlePkValue);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="679" endline="681">
public GenericValue create (GenericPK primaryKey) throws GenericEntityException {
    return this.create (primaryKey, true);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="686" endline="692">
public GenericValue create (GenericPK primaryKey, boolean doCacheClear) throws GenericEntityException {
    if (primaryKey == null) {
        throw new GenericEntityException ("Cannot create from a null primaryKey");
    }
    return this.create (GenericValue.create (primaryKey), doCacheClear);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="697" endline="699">
public GenericValue create (String entityName, Object...fields) throws GenericEntityException {
    return create (entityName, UtilMisc.< String, Object > toMap (fields));
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="704" endline="712">
public GenericValue create (String entityName, Map < String, ? extends Object > fields) throws GenericEntityException {
    if (entityName == null || fields == null) {
        return null;
    }
    ModelEntity entity = this.getModelReader ().getModelEntity (entityName);
    GenericValue genericValue = GenericValue.create (this, entity, fields);
    return this.create (genericValue, true);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="717" endline="725">
public GenericValue createSingle (String entityName, Object singlePkValue) throws GenericEntityException {
    if (entityName == null || singlePkValue == null) {
        return null;
    }
    ModelEntity entity = this.getModelReader ().getModelEntity (entityName);
    GenericValue genericValue = GenericValue.create (this, entity, singlePkValue);
    return this.create (genericValue, true);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="730" endline="732">
public GenericValue create (GenericValue value) throws GenericEntityException {
    return this.create (value, true);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="737" endline="834">
public GenericValue createSetNextSeqId (GenericValue value) throws GenericEntityException {
    boolean doCacheClear = true;
    if (value == null) {
        throw new GenericEntityException ("Cannot create a null value");
    }
    GenericHelper helper = getEntityHelper (value.getEntityName ());
    value.setDelegator (this);
    value.setNextSeqId ();
    boolean beganTransaction = false;
    try {
        if (alwaysUseTransaction) {
            beganTransaction = TransactionUtil.begin ();
        }
        EntityEcaRuleRunner < ? > ecaRunner = this.getEcaRuleRunner (value.getEntityName ());
        ecaRunner.evalRules (EntityEcaHandler.EV_VALIDATE, EntityEcaHandler.OP_CREATE, value, false);
        ecaRunner.evalRules (EntityEcaHandler.EV_RUN, EntityEcaHandler.OP_CREATE, value, false);
        value.setDelegator (this);
        this.encryptFields (value);
        if (value != null && value.getModelEntity ().getHasFieldWithAuditLog ()) {
            createEntityAuditLogAll (value, false, false);
        }
        try {
            value = helper.create (value);
            if (testMode) {
                storeForTestRollback (new TestOperation (OperationType.INSERT, value));
            }
        } catch (GenericEntityException e) {
            GenericValue existingValue = null;
            try {
                existingValue = helper.findByPrimaryKey (value.getPrimaryKey ());
            } catch (GenericEntityException e1) {
            }
            if (existingValue == null) {
                throw e;
            } else {
                Debug.logInfo ("Error creating entity record with a sequenced value [" + value.getPrimaryKey () + "], trying again about to refresh bank for entity [" + value.getEntityName () + "]", module);
                this.sequencer.forceBankRefresh (value.getEntityName (), 1);
                value.setNextSeqId ();
                value = helper.create (value);
                Debug.logInfo ("Successfully created new entity record on retry with a sequenced value [" + value.getPrimaryKey () + "], after getting refreshed bank for entity [" + value.getEntityName () + "]", module);
                if (testMode) {
                    storeForTestRollback (new TestOperation (OperationType.INSERT, value));
                }
            }
        }
        if (value != null) {
            value.setDelegator (this);
            if (value.lockEnabled ()) {
                refresh (value, doCacheClear);
            } else {
                if (doCacheClear) {
                    ecaRunner.evalRules (EntityEcaHandler.EV_CACHE_CLEAR, EntityEcaHandler.OP_CREATE, value, false);
                    this.clearCacheLine (value);
                }
            }
        }
        ecaRunner.evalRules (EntityEcaHandler.EV_RETURN, EntityEcaHandler.OP_CREATE, value, false);
        return value;
    } catch (GenericEntityException e) {
        String errMsg = "Failure in createSetNextSeqId operation for entity [" + value.getEntityName () + "]: " + e.toString () + ". Rolling back transaction.";
        Debug.logError (e, errMsg, module);
        try {
            TransactionUtil.rollback (beganTransaction, errMsg, e);
        } catch (GenericEntityException e2) {
            Debug.logError (e2, "[GenericDelegator] Could not rollback transaction: " + e2.toString (), module);
        }
        throw e;
    } finally {
        TransactionUtil.commit (beganTransaction);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="839" endline="900">
public GenericValue create (GenericValue value, boolean doCacheClear) throws GenericEntityException {
    boolean beganTransaction = false;
    try {
        if (alwaysUseTransaction) {
            beganTransaction = TransactionUtil.begin ();
        }
        if (value == null) {
            throw new GenericEntityException ("Cannot create a null value");
        }
        EntityEcaRuleRunner < ? > ecaRunner = this.getEcaRuleRunner (value.getEntityName ());
        ecaRunner.evalRules (EntityEcaHandler.EV_VALIDATE, EntityEcaHandler.OP_CREATE, value, false);
        GenericHelper helper = getEntityHelper (value.getEntityName ());
        ecaRunner.evalRules (EntityEcaHandler.EV_RUN, EntityEcaHandler.OP_CREATE, value, false);
        value.setDelegator (this);
        this.encryptFields (value);
        if (value != null && value.getModelEntity ().getHasFieldWithAuditLog ()) {
            createEntityAuditLogAll (value, false, false);
        }
        value = helper.create (value);
        if (testMode) {
            storeForTestRollback (new TestOperation (OperationType.INSERT, value));
        }
        if (value != null) {
            value.setDelegator (this);
            if (value.lockEnabled ()) {
                refresh (value, doCacheClear);
            } else {
                if (doCacheClear) {
                    ecaRunner.evalRules (EntityEcaHandler.EV_CACHE_CLEAR, EntityEcaHandler.OP_CREATE, value, false);
                    this.clearCacheLine (value);
                }
            }
        }
        ecaRunner.evalRules (EntityEcaHandler.EV_RETURN, EntityEcaHandler.OP_CREATE, value, false);
        return value;
    } catch (GenericEntityException e) {
        String errMsg = "Failure in create operation for entity [" + (value != null ? value.getEntityName () : "null") + "]: " + e.toString () + ". Rolling back transaction.";
        Debug.logError (errMsg, module);
        try {
            TransactionUtil.rollback (beganTransaction, errMsg, e);
        } catch (GenericEntityException e2) {
            Debug.logError (e2, "[GenericDelegator] Could not rollback transaction: " + e2.toString (), module);
        }
        throw e;
    } finally {
        TransactionUtil.commit (beganTransaction);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="905" endline="938">
public GenericValue createOrStore (GenericValue value, boolean doCacheClear) throws GenericEntityException {
    boolean beganTransaction = false;
    try {
        if (alwaysUseTransaction) {
            beganTransaction = TransactionUtil.begin ();
        }
        GenericValue checkValue = this.findOne (value.getEntityName (), value.getPrimaryKey (), false);
        if (checkValue != null) {
            this.store (value, doCacheClear);
        } else {
            this.create (value, doCacheClear);
        }
        if (value.lockEnabled ()) {
            this.refresh (value);
        }
        return value;
    } catch (GenericEntityException e) {
        String errMsg = "Failure in createOrStore operation for entity [" + value.getEntityName () + "]: " + e.toString () + ". Rolling back transaction.";
        Debug.logError (e, errMsg, module);
        try {
            TransactionUtil.rollback (beganTransaction, errMsg, e);
        } catch (GenericEntityException e2) {
            Debug.logError (e2, "[GenericDelegator] Could not rollback transaction: " + e2.toString (), module);
        }
        throw e;
    } finally {
        TransactionUtil.commit (beganTransaction);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="943" endline="945">
public GenericValue createOrStore (GenericValue value) throws GenericEntityException {
    return createOrStore (value, true);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="947" endline="974">
protected void saveEntitySyncRemoveInfo (GenericEntity dummyPK) throws GenericEntityException {
    if (dummyPK.getModelEntity ().getNoAutoStamp () || this.testRollbackInProgress) {
        return;
    }
    if (dummyPK.getIsFromEntitySync ()) {
        return;
    }
    String serializedPK = null;
    try {
        serializedPK = XmlSerializer.serialize (dummyPK);
    } catch (SerializeException e) {
        Debug.logError (e, "Could not serialize primary key to save EntitySyncRemove", module);
    } catch (FileNotFoundException e) {
        Debug.logError (e, "Could not serialize primary key to save EntitySyncRemove", module);
    } catch (IOException e) {
        Debug.logError (e, "Could not serialize primary key to save EntitySyncRemove", module);
    }
    if (serializedPK != null) {
        GenericValue entitySyncRemove = this.makeValue ("EntitySyncRemove");
        entitySyncRemove.set ("primaryKeyRemoved", serializedPK);
        this.createSetNextSeqId (entitySyncRemove);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="979" endline="982">
public int removeByPrimaryKey (GenericPK primaryKey) throws GenericEntityException {
    int retVal = this.removeByPrimaryKey (primaryKey, true);
    return retVal;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="987" endline="1043">
public int removeByPrimaryKey (GenericPK primaryKey, boolean doCacheClear) throws GenericEntityException {
    boolean beganTransaction = false;
    try {
        if (alwaysUseTransaction) {
            beganTransaction = TransactionUtil.begin ();
        }
        EntityEcaRuleRunner < ? > ecaRunner = this.getEcaRuleRunner (primaryKey.getEntityName ());
        ecaRunner.evalRules (EntityEcaHandler.EV_VALIDATE, EntityEcaHandler.OP_REMOVE, primaryKey, false);
        GenericHelper helper = getEntityHelper (primaryKey.getEntityName ());
        if (doCacheClear) {
            ecaRunner.evalRules (EntityEcaHandler.EV_CACHE_CLEAR, EntityEcaHandler.OP_REMOVE, primaryKey, false);
            this.clearCacheLine (primaryKey);
        }
        ecaRunner.evalRules (EntityEcaHandler.EV_RUN, EntityEcaHandler.OP_REMOVE, primaryKey, false);
        if (primaryKey.getModelEntity ().getHasFieldWithAuditLog ()) {
            createEntityAuditLogAll (this.findOne (primaryKey.getEntityName (), primaryKey, false), true, true);
        }
        GenericValue removedEntity = null;
        if (testMode) {
            removedEntity = this.findOne (primaryKey.entityName, primaryKey, false);
        }
        int num = helper.removeByPrimaryKey (primaryKey);
        this.saveEntitySyncRemoveInfo (primaryKey);
        if (testMode) {
            if (removedEntity != null) {
                storeForTestRollback (new TestOperation (OperationType.DELETE, removedEntity));
            }
        }
        ecaRunner.evalRules (EntityEcaHandler.EV_RETURN, EntityEcaHandler.OP_REMOVE, primaryKey, false);
        return num;
    } catch (GenericEntityException e) {
        String errMsg = "Failure in removeByPrimaryKey operation for entity [" + primaryKey.getEntityName () + "]: " + e.toString () + ". Rolling back transaction.";
        Debug.logError (e, errMsg, module);
        try {
            TransactionUtil.rollback (beganTransaction, errMsg, e);
        } catch (GenericEntityException e2) {
            Debug.logError (e2, "[GenericDelegator] Could not rollback transaction: " + e2.toString (), module);
        }
        throw e;
    } finally {
        TransactionUtil.commit (beganTransaction);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1048" endline="1050">
public int removeValue (GenericValue value) throws GenericEntityException {
    return this.removeValue (value, true);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1055" endline="1113">
public int removeValue (GenericValue value, boolean doCacheClear) throws GenericEntityException {
    boolean beganTransaction = false;
    try {
        if (alwaysUseTransaction) {
            beganTransaction = TransactionUtil.begin ();
        }
        EntityEcaRuleRunner < ? > ecaRunner = this.getEcaRuleRunner (value.getEntityName ());
        ecaRunner.evalRules (EntityEcaHandler.EV_VALIDATE, EntityEcaHandler.OP_REMOVE, value, false);
        GenericHelper helper = getEntityHelper (value.getEntityName ());
        if (doCacheClear) {
            ecaRunner.evalRules (EntityEcaHandler.EV_CACHE_CLEAR, EntityEcaHandler.OP_REMOVE, value, false);
            this.clearCacheLine (value);
        }
        ecaRunner.evalRules (EntityEcaHandler.EV_RUN, EntityEcaHandler.OP_REMOVE, value, false);
        if (value.getModelEntity ().getHasFieldWithAuditLog ()) {
            createEntityAuditLogAll (value, true, true);
        }
        GenericValue removedValue = null;
        if (testMode) {
            removedValue = this.findOne (value.getEntityName (), value.getPrimaryKey (), false);
        }
        int num = helper.removeByPrimaryKey (value.getPrimaryKey ());
        if (testMode) {
            if (removedValue != null) {
                storeForTestRollback (new TestOperation (OperationType.DELETE, removedValue));
            }
        }
        this.saveEntitySyncRemoveInfo (value.getPrimaryKey ());
        ecaRunner.evalRules (EntityEcaHandler.EV_RETURN, EntityEcaHandler.OP_REMOVE, value, false);
        return num;
    } catch (GenericEntityException e) {
        String errMsg = "Failure in removeValue operation for entity [" + value.getEntityName () + "]: " + e.toString () + ". Rolling back transaction.";
        Debug.logError (e, errMsg, module);
        try {
            TransactionUtil.rollback (beganTransaction, errMsg, e);
        } catch (GenericEntityException e2) {
            Debug.logError (e2, "[GenericDelegator] Could not rollback transaction: " + e2.toString (), module);
        }
        throw e;
    } finally {
        TransactionUtil.commit (beganTransaction);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1118" endline="1120">
public int removeByAnd (String entityName, Object...fields) throws GenericEntityException {
    return removeByAnd (entityName, UtilMisc.< String, Object > toMap (fields));
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1125" endline="1127">
public int removeByAnd (String entityName, Map < String, ? extends Object > fields) throws GenericEntityException {
    return this.removeByAnd (entityName, fields, true);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1132" endline="1134">
public int removeByAnd (String entityName, boolean doCacheClear, Object...fields) throws GenericEntityException {
    return removeByAnd (entityName, UtilMisc.< String, Object > toMap (fields), doCacheClear);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1139" endline="1142">
public int removeByAnd (String entityName, Map < String, ? extends Object > fields, boolean doCacheClear) throws GenericEntityException {
    EntityCondition ecl = EntityCondition.makeCondition (fields);
    return removeByCondition (entityName, ecl, doCacheClear);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1147" endline="1149">
public int removeByCondition (String entityName, EntityCondition condition) throws GenericEntityException {
    return this.removeByCondition (entityName, condition, true);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1154" endline="1197">
public int removeByCondition (String entityName, EntityCondition condition, boolean doCacheClear) throws GenericEntityException {
    boolean beganTransaction = false;
    try {
        if (alwaysUseTransaction) {
            beganTransaction = TransactionUtil.begin ();
        }
        if (doCacheClear) {
            this.clearCacheLineByCondition (entityName, condition);
        }
        ModelEntity modelEntity = getModelReader ().getModelEntity (entityName);
        GenericHelper helper = getEntityHelper (entityName);
        List < GenericValue > removedEntities = null;
        if (testMode) {
            removedEntities = this.findList (entityName, condition, null, null, null, false);
        }
        int rowsAffected = helper.removeByCondition (modelEntity, condition);
        if (testMode) {
            for (GenericValue entity : removedEntities) {
                storeForTestRollback (new TestOperation (OperationType.DELETE, entity));
            }
        }
        return rowsAffected;
    } catch (GenericEntityException e) {
        String errMsg = "Failure in removeByCondition operation for entity [" + entityName + "]: " + e.toString () + ". Rolling back transaction.";
        Debug.logError (e, errMsg, module);
        try {
            TransactionUtil.rollback (beganTransaction, errMsg, e);
        } catch (GenericEntityException e2) {
            Debug.logError (e2, "[GenericDelegator] Could not rollback transaction: " + e2.toString (), module);
        }
        throw e;
    } finally {
        TransactionUtil.commit (beganTransaction);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1202" endline="1204">
public int removeRelated (String relationName, GenericValue value) throws GenericEntityException {
    return this.removeRelated (relationName, value, true);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1209" endline="1224">
public int removeRelated (String relationName, GenericValue value, boolean doCacheClear) throws GenericEntityException {
    ModelEntity modelEntity = value.getModelEntity ();
    ModelRelation relation = modelEntity.getRelation (relationName);
    if (relation == null) {
        throw new GenericModelException ("Could not find relation for relationName: " + relationName + " for value " + value);
    }
    Map < String, Object > fields = FastMap.newInstance ();
    for (int i = 0;
    i < relation.getKeyMapsSize (); i ++) {
        ModelKeyMap keyMap = relation.getKeyMap (i);
        fields.put (keyMap.getRelFieldName (), value.get (keyMap.getFieldName ()));
    }
    return this.removeByAnd (relation.getRelEntityName (), fields, doCacheClear);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1229" endline="1231">
public void refresh (GenericValue value) throws GenericEntityException {
    this.refresh (value, true);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1236" endline="1244">
public void refresh (GenericValue value, boolean doCacheClear) throws GenericEntityException {
    if (doCacheClear) {
        clearCacheLine (value);
    }
    GenericPK pk = value.getPrimaryKey ();
    GenericValue newValue = this.findOne (pk.getEntityName (), pk, false);
    value.refreshFromValue (newValue);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1249" endline="1253">
public void refreshFromCache (GenericValue value) throws GenericEntityException {
    GenericPK pk = value.getPrimaryKey ();
    GenericValue newValue = findOne (pk.getEntityName (), pk, true);
    value.refreshFromValue (newValue);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1258" endline="1260">
public int storeByCondition (String entityName, Map < String, ? extends Object > fieldsToSet, EntityCondition condition) throws GenericEntityException {
    return storeByCondition (entityName, fieldsToSet, condition, true);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1265" endline="1308">
public int storeByCondition (String entityName, Map < String, ? extends Object > fieldsToSet, EntityCondition condition, boolean doCacheClear) throws GenericEntityException {
    boolean beganTransaction = false;
    try {
        if (alwaysUseTransaction) {
            beganTransaction = TransactionUtil.begin ();
        }
        if (doCacheClear) {
            this.clearCacheLineByCondition (entityName, condition);
        }
        ModelEntity modelEntity = getModelReader ().getModelEntity (entityName);
        GenericHelper helper = getEntityHelper (entityName);
        List < GenericValue > updatedEntities = null;
        if (testMode) {
            updatedEntities = this.findList (entityName, condition, null, null, null, false);
        }
        int rowsAffected = helper.storeByCondition (modelEntity, fieldsToSet, condition);
        if (testMode) {
            for (GenericValue entity : updatedEntities) {
                storeForTestRollback (new TestOperation (OperationType.UPDATE, entity));
            }
        }
        return rowsAffected;
    } catch (GenericEntityException e) {
        String errMsg = "Failure in storeByCondition operation for entity [" + entityName + "]: " + e.toString () + ". Rolling back transaction.";
        Debug.logError (e, errMsg, module);
        try {
            TransactionUtil.rollback (beganTransaction, errMsg, e);
        } catch (GenericEntityException e2) {
            Debug.logError (e2, "[GenericDelegator] Could not rollback transaction: " + e2.toString (), module);
        }
        throw e;
    } finally {
        TransactionUtil.commit (beganTransaction);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1313" endline="1315">
public int store (GenericValue value) throws GenericEntityException {
    return this.store (value, true);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1320" endline="1379">
public int store (GenericValue value, boolean doCacheClear) throws GenericEntityException {
    boolean beganTransaction = false;
    try {
        if (alwaysUseTransaction) {
            beganTransaction = TransactionUtil.begin ();
        }
        EntityEcaRuleRunner < ? > ecaRunner = this.getEcaRuleRunner (value.getEntityName ());
        ecaRunner.evalRules (EntityEcaHandler.EV_VALIDATE, EntityEcaHandler.OP_STORE, value, false);
        GenericHelper helper = getEntityHelper (value.getEntityName ());
        if (doCacheClear) {
            ecaRunner.evalRules (EntityEcaHandler.EV_CACHE_CLEAR, EntityEcaHandler.OP_STORE, value, false);
            this.clearCacheLine (value);
        }
        ecaRunner.evalRules (EntityEcaHandler.EV_RUN, EntityEcaHandler.OP_STORE, value, false);
        this.encryptFields (value);
        if (value.getModelEntity ().getHasFieldWithAuditLog ()) {
            createEntityAuditLogAll (value, true, false);
        }
        GenericValue updatedEntity = null;
        if (testMode) {
            updatedEntity = this.findOne (value.entityName, value.getPrimaryKey (), false);
        }
        int retVal = helper.store (value);
        if (testMode) {
            storeForTestRollback (new TestOperation (OperationType.UPDATE, updatedEntity));
        }
        if (value.lockEnabled ()) {
            refresh (value, doCacheClear);
        }
        ecaRunner.evalRules (EntityEcaHandler.EV_RETURN, EntityEcaHandler.OP_STORE, value, false);
        return retVal;
    } catch (GenericEntityException e) {
        String errMsg = "Failure in store operation for entity [" + value.getEntityName () + "]: " + e.toString () + ". Rolling back transaction.";
        Debug.logError (e, errMsg, module);
        try {
            TransactionUtil.rollback (beganTransaction, errMsg, e);
        } catch (GenericEntityException e2) {
            Debug.logError (e2, "[GenericDelegator] Could not rollback transaction: " + e2.toString (), module);
        }
        throw e;
    } finally {
        TransactionUtil.commit (beganTransaction);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1384" endline="1386">
public int storeAll (List < GenericValue > values) throws GenericEntityException {
    return this.storeAll (values, true);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1391" endline="1393">
public int storeAll (List < GenericValue > values, boolean doCacheClear) throws GenericEntityException {
    return this.storeAll (values, doCacheClear, false);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1398" endline="1477">
public int storeAll (List < GenericValue > values, boolean doCacheClear, boolean createDummyFks) throws GenericEntityException {
    if (values == null) {
        return 0;
    }
    int numberChanged = 0;
    boolean beganTransaction = false;
    try {
        beganTransaction = TransactionUtil.begin ();
        for (GenericValue value : values) {
            String entityName = value.getEntityName ();
            GenericPK primaryKey = value.getPrimaryKey ();
            GenericHelper helper = getEntityHelper (entityName);
            if (! primaryKey.isPrimaryKey ()) {
                throw new GenericModelException ("[GenericDelegator.storeAll] One of the passed primary keys is not a valid primary key: " + primaryKey);
            }
            GenericValue existing = null;
            try {
                existing = helper.findByPrimaryKey (primaryKey);
                this.decryptFields (existing);
            } catch (GenericEntityNotFoundException e) {
                existing = null;
            }
            if (existing == null) {
                if (createDummyFks) {
                    value.checkFks (true);
                }
                this.create (value, doCacheClear);
                numberChanged ++;
            } else {
                ModelEntity modelEntity = value.getModelEntity ();
                GenericValue toStore = GenericValue.create (this, modelEntity, value.getPrimaryKey ());
                boolean atLeastOneField = false;
                Iterator < ModelField > nonPksIter = modelEntity.getNopksIterator ();
                while (nonPksIter.hasNext ()) {
                    ModelField modelField = nonPksIter.next ();
                    String fieldName = modelField.getName ();
                    if (value.containsKey (fieldName)) {
                        Object fieldValue = value.get (fieldName);
                        Object oldValue = existing.get (fieldName);
                        if (! UtilObject.equalsHelper (oldValue, fieldValue)) {
                            toStore.put (fieldName, fieldValue);
                            atLeastOneField = true;
                        }
                    }
                }
                if (atLeastOneField) {
                    if (createDummyFks) {
                        value.checkFks (true);
                    }
                    numberChanged += this.store (toStore, doCacheClear);
                }
            }
        }
        return numberChanged;
    } catch (GenericEntityException e) {
        String errMsg = "Failure in storeAll operation: " + e.toString () + ". Rolling back transaction.";
        Debug.logError (e, errMsg, module);
        try {
            TransactionUtil.rollback (beganTransaction, errMsg, e);
        } catch (GenericEntityException e2) {
            Debug.logError (e2, "[GenericDelegator] Could not rollback transaction: " + e2.toString (), module);
        }
        throw e;
    } finally {
        TransactionUtil.commit (beganTransaction);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1482" endline="1484">
public int removeAll (String entityName) throws GenericEntityException {
    return removeByAnd (entityName, (Map < String, Object >) null);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1489" endline="1491">
public int removeAll (List < ? extends GenericEntity > dummyPKs) throws GenericEntityException {
    return this.removeAll (dummyPKs, true);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1496" endline="1529">
public int removeAll (List < ? extends GenericEntity > dummyPKs, boolean doCacheClear) throws GenericEntityException {
    if (dummyPKs == null) {
        return 0;
    }
    boolean beganTransaction = false;
    int numRemoved = 0;
    try {
        for (GenericEntity value : dummyPKs) {
            if (value.containsPrimaryKey ()) {
                numRemoved += this.removeByPrimaryKey (value.getPrimaryKey (), doCacheClear);
            } else {
                numRemoved += this.removeByAnd (value.getEntityName (), value.getAllFields (), doCacheClear);
            }
        }
        return numRemoved;
    } catch (GenericEntityException e) {
        String errMsg = "Failure in removeAll operation: " + e.toString () + ". Rolling back transaction.";
        Debug.logError (e, errMsg, module);
        try {
            TransactionUtil.rollback (beganTransaction, errMsg, e);
        } catch (GenericEntityException e2) {
            Debug.logError (e2, "[GenericDelegator] Could not rollback transaction: " + e2.toString (), module);
        }
        throw e;
    } finally {
        TransactionUtil.commit (beganTransaction);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1538" endline="1540">
public GenericValue findOne (String entityName, boolean useCache, Object...fields) throws GenericEntityException {
    return findOne (entityName, UtilMisc.toMap (fields), useCache);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1545" endline="1607">
public GenericValue findOne (String entityName, Map < String, ? extends Object > fields, boolean useCache) throws GenericEntityException {
    GenericPK primaryKey = this.makePK (entityName, fields);
    EntityEcaRuleRunner < ? > ecaRunner = this.getEcaRuleRunner (entityName);
    if (useCache) {
        ecaRunner.evalRules (EntityEcaHandler.EV_CACHE_CHECK, EntityEcaHandler.OP_FIND, primaryKey, false);
        GenericValue value = this.getFromPrimaryKeyCache (primaryKey);
        if (value != null) {
            return value;
        }
    }
    boolean beganTransaction = false;
    try {
        if (alwaysUseTransaction) {
            beganTransaction = TransactionUtil.begin ();
        }
        ecaRunner.evalRules (EntityEcaHandler.EV_VALIDATE, EntityEcaHandler.OP_FIND, primaryKey, false);
        GenericHelper helper = getEntityHelper (entityName);
        GenericValue value = null;
        if (! primaryKey.isPrimaryKey ()) {
            throw new GenericModelException ("[GenericDelegator.findOne] Passed primary key is not a valid primary key: " + primaryKey);
        }
        ecaRunner.evalRules (EntityEcaHandler.EV_RUN, EntityEcaHandler.OP_FIND, primaryKey, false);
        try {
            value = helper.findByPrimaryKey (primaryKey);
        } catch (GenericEntityNotFoundException e) {
        }
        if (value != null) {
            value.setDelegator (this);
            this.decryptFields (value);
        }
        if (useCache) {
            if (value != null) {
                ecaRunner.evalRules (EntityEcaHandler.EV_CACHE_PUT, EntityEcaHandler.OP_FIND, value, false);
                this.putInPrimaryKeyCache (primaryKey, value);
            } else {
                this.putInPrimaryKeyCache (primaryKey, GenericValue.NULL_VALUE);
            }
        }
        ecaRunner.evalRules (EntityEcaHandler.EV_RETURN, EntityEcaHandler.OP_FIND, (value == null ? primaryKey : value), false);
        return value;
    } catch (GenericEntityException e) {
        String errMsg = "Failure in findOne operation for entity [" + entityName + "]: " + e.toString () + ". Rolling back transaction.";
        Debug.logError (e, errMsg, module);
        try {
            TransactionUtil.rollback (beganTransaction, errMsg, e);
        } catch (GenericEntityException e2) {
            Debug.logError (e2, "[GenericDelegator] Could not rollback transaction: " + e2.toString (), module);
        }
        throw e;
    } finally {
        TransactionUtil.commit (beganTransaction);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1612" endline="1614">
public GenericValue findByPrimaryKey (String entityName, Map < String, ? extends Object > fields) throws GenericEntityException {
    return findOne (entityName, fields, false);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1619" endline="1621">
public GenericValue findByPrimaryKeyCache (String entityName, Object...fields) throws GenericEntityException {
    return findByPrimaryKeyCache (entityName, UtilMisc.< String, Object > toMap (fields));
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1626" endline="1628">
public GenericValue findByPrimaryKeyCache (String entityName, Map < String, ? extends Object > fields) throws GenericEntityException {
    return findOne (entityName, fields, true);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1633" endline="1674">
public GenericValue findByPrimaryKeyPartial (GenericPK primaryKey, Set < String > keys) throws GenericEntityException {
    boolean beganTransaction = false;
    try {
        if (alwaysUseTransaction) {
            beganTransaction = TransactionUtil.begin ();
        }
        EntityEcaRuleRunner < ? > ecaRunner = this.getEcaRuleRunner (primaryKey.getEntityName ());
        ecaRunner.evalRules (EntityEcaHandler.EV_VALIDATE, EntityEcaHandler.OP_FIND, primaryKey, false);
        GenericHelper helper = getEntityHelper (primaryKey.getEntityName ());
        GenericValue value = null;
        if (! primaryKey.isPrimaryKey ()) {
            throw new GenericModelException ("[GenericDelegator.findByPrimaryKey] Passed primary key is not a valid primary key: " + primaryKey);
        }
        ecaRunner.evalRules (EntityEcaHandler.EV_RUN, EntityEcaHandler.OP_FIND, primaryKey, false);
        try {
            value = helper.findByPrimaryKeyPartial (primaryKey, keys);
        } catch (GenericEntityNotFoundException e) {
        }
        if (value != null) value.setDelegator (this);

        ecaRunner.evalRules (EntityEcaHandler.EV_RETURN, EntityEcaHandler.OP_FIND, primaryKey, false);
        return value;
    } catch (GenericEntityException e) {
        String errMsg = "Failure in findByPrimaryKeyPartial operation for entity [" + primaryKey.getEntityName () + "]: " + e.toString () + ". Rolling back transaction.";
        Debug.logError (e, errMsg, module);
        try {
            TransactionUtil.rollback (beganTransaction, errMsg, e);
        } catch (GenericEntityException e2) {
            Debug.logError (e2, "[GenericDelegator] Could not rollback transaction: " + e2.toString (), module);
        }
        throw e;
    } finally {
        TransactionUtil.commit (beganTransaction);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1679" endline="1681">
public List < GenericValue > findByAnd (String entityName, Object...fields) throws GenericEntityException {
    return findByAnd (entityName, UtilMisc.< String, Object > toMap (fields));
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1686" endline="1689">
public List < GenericValue > findByAnd (String entityName, Map < String, ? extends Object > fields) throws GenericEntityException {
    EntityCondition ecl = EntityCondition.makeCondition (fields);
    return this.findList (entityName, ecl, null, null, null, false);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1694" endline="1697">
public List < GenericValue > findByAnd (String entityName, Map < String, ? extends Object > fields, List < String > orderBy) throws GenericEntityException {
    EntityCondition ecl = EntityCondition.makeCondition (fields);
    return this.findList (entityName, ecl, null, orderBy, null, false);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1702" endline="1704">
public List < GenericValue > findByAndCache (String entityName, Map < String, ? extends Object > fields) throws GenericEntityException {
    return this.findList (entityName, EntityCondition.makeCondition (fields), null, null, null, true);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1709" endline="1711">
public List < GenericValue > findByAndCache (String entityName, Map < String, ? extends Object > fields, List < String > orderBy) throws GenericEntityException {
    return this.findList (entityName, EntityCondition.makeCondition (fields), null, orderBy, null, true);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1716" endline="1748">
public EntityListIterator find (String entityName, EntityCondition whereEntityCondition, EntityCondition havingEntityCondition, Set < String > fieldsToSelect, List < String > orderBy, EntityFindOptions findOptions) throws GenericEntityException {
    if (! TransactionUtil.isTransactionInPlace ()) {
        Exception newE = new Exception ("Stack Trace");
        Debug.logError (newE, "ERROR: Cannot do a find that returns an EntityListIterator with no transaction in place. Wrap this call in a transaction.", module);
    }
    ModelEntity modelEntity = getModelReader ().getModelEntity (entityName);
    GenericValue dummyValue = GenericValue.create (modelEntity);
    EntityEcaRuleRunner < ? > ecaRunner = this.getEcaRuleRunner (modelEntity.getEntityName ());
    ecaRunner.evalRules (EntityEcaHandler.EV_VALIDATE, EntityEcaHandler.OP_FIND, dummyValue, false);
    if (whereEntityCondition != null) {
        whereEntityCondition.checkCondition (modelEntity);
        whereEntityCondition.encryptConditionFields (modelEntity, this);
    }
    if (havingEntityCondition != null) {
        havingEntityCondition.checkCondition (modelEntity);
        havingEntityCondition.encryptConditionFields (modelEntity, this);
    }
    ecaRunner.evalRules (EntityEcaHandler.EV_RUN, EntityEcaHandler.OP_FIND, dummyValue, false);
    GenericHelper helper = getEntityHelper (modelEntity.getEntityName ());
    EntityListIterator eli = helper.findListIteratorByCondition (modelEntity, whereEntityCondition, havingEntityCondition, fieldsToSelect, orderBy, findOptions);
    eli.setDelegator (this);
    ecaRunner.evalRules (EntityEcaHandler.EV_RETURN, EntityEcaHandler.OP_FIND, dummyValue, false);
    return eli;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1753" endline="1800">
public List < GenericValue > findList (String entityName, EntityCondition entityCondition, Set < String > fieldsToSelect, List < String > orderBy, EntityFindOptions findOptions, boolean useCache) throws GenericEntityException {
    EntityEcaRuleRunner < ? > ecaRunner = null;
    GenericValue dummyValue = null;
    if (useCache) {
        ecaRunner = this.getEcaRuleRunner (entityName);
        ModelEntity modelEntity = getModelReader ().getModelEntity (entityName);
        dummyValue = GenericValue.create (modelEntity);
        ecaRunner.evalRules (EntityEcaHandler.EV_CACHE_CHECK, EntityEcaHandler.OP_FIND, dummyValue, false);
        List < GenericValue > cacheList = this.cache.get (entityName, entityCondition, orderBy);
        if (cacheList != null) {
            return cacheList;
        }
    }
    boolean beganTransaction = false;
    try {
        if (alwaysUseTransaction) {
            beganTransaction = TransactionUtil.begin ();
        }
        EntityListIterator eli = this.find (entityName, entityCondition, null, fieldsToSelect, orderBy, findOptions);
        eli.setDelegator (this);
        List < GenericValue > list = eli.getCompleteList ();
        eli.close ();
        if (useCache) {
            ecaRunner.evalRules (EntityEcaHandler.EV_CACHE_PUT, EntityEcaHandler.OP_FIND, dummyValue, false);
            this.cache.put (entityName, entityCondition, orderBy, list);
        }
        return list;
    } catch (GenericEntityException e) {
        String errMsg = "Failure in findByCondition operation for entity [" + entityName + "]: " + e.toString () + ". Rolling back transaction.";
        Debug.logError (e, errMsg, module);
        try {
            TransactionUtil.rollback (beganTransaction, errMsg, e);
        } catch (GenericEntityException e2) {
            Debug.logError (e2, "[GenericDelegator] Could not rollback transaction: " + e2.toString (), module);
        }
        throw e;
    } finally {
        TransactionUtil.commit (beganTransaction);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1805" endline="1826">
public EntityListIterator findListIteratorByCondition (DynamicViewEntity dynamicViewEntity, EntityCondition whereEntityCondition, EntityCondition havingEntityCondition, Collection < String > fieldsToSelect, List < String > orderBy, EntityFindOptions findOptions) throws GenericEntityException {
    if (! TransactionUtil.isTransactionInPlace ()) {
        Exception newE = new Exception ("Stack Trace");
        Debug.logError (newE, "ERROR: Cannot do a find that returns an EntityListIterator with no transaction in place. Wrap this call in a transaction.", module);
    }
    ModelViewEntity modelViewEntity = dynamicViewEntity.makeModelViewEntity (this);
    if (whereEntityCondition != null) whereEntityCondition.checkCondition (modelViewEntity);

    if (havingEntityCondition != null) havingEntityCondition.checkCondition (modelViewEntity);

    GenericHelper helper = getEntityHelper (dynamicViewEntity.getOneRealEntityName ());
    EntityListIterator eli = helper.findListIteratorByCondition (modelViewEntity, whereEntityCondition, havingEntityCondition, fieldsToSelect, orderBy, findOptions);
    eli.setDelegator (this);
    return eli;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1831" endline="1875">
public long findCountByCondition (String entityName, EntityCondition whereEntityCondition, EntityCondition havingEntityCondition, EntityFindOptions findOptions) throws GenericEntityException {
    boolean beganTransaction = false;
    try {
        if (alwaysUseTransaction) {
            beganTransaction = TransactionUtil.begin ();
        }
        ModelEntity modelEntity = getModelReader ().getModelEntity (entityName);
        GenericValue dummyValue = GenericValue.create (modelEntity);
        EntityEcaRuleRunner < ? > ecaRunner = this.getEcaRuleRunner (modelEntity.getEntityName ());
        ecaRunner.evalRules (EntityEcaHandler.EV_VALIDATE, EntityEcaHandler.OP_FIND, dummyValue, false);
        if (whereEntityCondition != null) {
            whereEntityCondition.checkCondition (modelEntity);
            whereEntityCondition.encryptConditionFields (modelEntity, this);
        }
        if (havingEntityCondition != null) {
            havingEntityCondition.checkCondition (modelEntity);
            havingEntityCondition.encryptConditionFields (modelEntity, this);
        }
        ecaRunner.evalRules (EntityEcaHandler.EV_RUN, EntityEcaHandler.OP_FIND, dummyValue, false);
        GenericHelper helper = getEntityHelper (modelEntity.getEntityName ());
        long count = helper.findCountByCondition (modelEntity, whereEntityCondition, havingEntityCondition, findOptions);
        ecaRunner.evalRules (EntityEcaHandler.EV_RETURN, EntityEcaHandler.OP_FIND, dummyValue, false);
        return count;
    } catch (GenericEntityException e) {
        String errMsg = "Failure in findListIteratorByCondition operation for entity [DynamicView]: " + e.toString () + ". Rolling back transaction.";
        Debug.logError (e, errMsg, module);
        try {
            TransactionUtil.rollback (beganTransaction, errMsg, e);
        } catch (GenericEntityException e2) {
            Debug.logError (e2, "[GenericDelegator] Could not rollback transaction: " + e2.toString (), module);
        }
        throw e;
    } finally {
        TransactionUtil.commit (beganTransaction);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1880" endline="1913">
public List < GenericValue > getMultiRelation (GenericValue value, String relationNameOne, String relationNameTwo, List < String > orderBy) throws GenericEntityException {
    boolean beganTransaction = false;
    try {
        if (alwaysUseTransaction) {
            beganTransaction = TransactionUtil.begin ();
        }
        ModelEntity modelEntity = value.getModelEntity ();
        ModelRelation modelRelationOne = modelEntity.getRelation (relationNameOne);
        ModelEntity modelEntityOne = getModelEntity (modelRelationOne.getRelEntityName ());
        ModelRelation modelRelationTwo = modelEntityOne.getRelation (relationNameTwo);
        ModelEntity modelEntityTwo = getModelEntity (modelRelationTwo.getRelEntityName ());
        GenericHelper helper = getEntityHelper (modelEntity);
        return helper.findByMultiRelation (value, modelRelationOne, modelEntityOne, modelRelationTwo, modelEntityTwo, orderBy);
    } catch (GenericEntityException e) {
        String errMsg = "Failure in getMultiRelation operation for entity [" + value.getEntityName () + "]: " + e.toString () + ". Rolling back transaction.";
        Debug.logError (e, errMsg, module);
        try {
            TransactionUtil.rollback (beganTransaction, errMsg, e);
        } catch (GenericEntityException e2) {
            Debug.logError (e2, "[GenericDelegator] Could not rollback transaction: " + e2.toString (), module);
        }
        throw e;
    } finally {
        TransactionUtil.commit (beganTransaction);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1918" endline="1938">
public List < GenericValue > getRelated (String relationName, Map < String, ? extends Object > byAndFields, List < String > orderBy, GenericValue value) throws GenericEntityException {
    ModelEntity modelEntity = value.getModelEntity ();
    ModelRelation relation = modelEntity.getRelation (relationName);
    if (relation == null) {
        throw new GenericModelException ("Could not find relation for relationName: " + relationName + " for value " + value);
    }
    Map < String, Object > fields = FastMap.newInstance ();
    if (byAndFields != null) {
        fields.putAll (byAndFields);
    }
    for (int i = 0;
    i < relation.getKeyMapsSize (); i ++) {
        ModelKeyMap keyMap = relation.getKeyMap (i);
        fields.put (keyMap.getRelFieldName (), value.get (keyMap.getFieldName ()));
    }
    return this.findByAnd (relation.getRelEntityName (), fields, orderBy);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1943" endline="1964">
public GenericPK getRelatedDummyPK (String relationName, Map < String, ? extends Object > byAndFields, GenericValue value) throws GenericEntityException {
    ModelEntity modelEntity = value.getModelEntity ();
    ModelRelation relation = modelEntity.getRelation (relationName);
    if (relation == null) {
        throw new GenericModelException ("Could not find relation for relationName: " + relationName + " for value " + value);
    }
    ModelEntity relatedEntity = getModelReader ().getModelEntity (relation.getRelEntityName ());
    Map < String, Object > fields = FastMap.newInstance ();
    if (byAndFields != null) {
        fields.putAll (byAndFields);
    }
    for (int i = 0;
    i < relation.getKeyMapsSize (); i ++) {
        ModelKeyMap keyMap = relation.getKeyMap (i);
        fields.put (keyMap.getRelFieldName (), value.get (keyMap.getFieldName ()));
    }
    return GenericPK.create (this, relatedEntity, fields);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1969" endline="1984">
public List < GenericValue > getRelatedCache (String relationName, GenericValue value) throws GenericEntityException {
    ModelEntity modelEntity = value.getModelEntity ();
    ModelRelation relation = modelEntity.getRelation (relationName);
    if (relation == null) {
        throw new GenericModelException ("Could not find relation for relationName: " + relationName + " for value " + value);
    }
    Map < String, Object > fields = FastMap.newInstance ();
    for (int i = 0;
    i < relation.getKeyMapsSize (); i ++) {
        ModelKeyMap keyMap = relation.getKeyMap (i);
        fields.put (keyMap.getRelFieldName (), value.get (keyMap.getFieldName ()));
    }
    return this.findByAndCache (relation.getRelEntityName (), fields, null);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="1989" endline="2006">
public GenericValue getRelatedOne (String relationName, GenericValue value) throws GenericEntityException {
    ModelRelation relation = value.getModelEntity ().getRelation (relationName);
    if (relation == null) {
        throw new GenericModelException ("Could not find relation for relationName: " + relationName + " for value " + value);
    }
    if (! "one".equals (relation.getType ()) && ! "one-nofk".equals (relation.getType ())) {
        throw new GenericModelException ("Relation is not a 'one' or a 'one-nofk' relation: " + relationName + " of entity " + value.getEntityName ());
    }
    Map < String, Object > fields = FastMap.newInstance ();
    for (int i = 0;
    i < relation.getKeyMapsSize (); i ++) {
        ModelKeyMap keyMap = relation.getKeyMap (i);
        fields.put (keyMap.getRelFieldName (), value.get (keyMap.getFieldName ()));
    }
    return this.findByPrimaryKey (relation.getRelEntityName (), fields);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2011" endline="2029">
public GenericValue getRelatedOneCache (String relationName, GenericValue value) throws GenericEntityException {
    ModelEntity modelEntity = value.getModelEntity ();
    ModelRelation relation = modelEntity.getRelation (relationName);
    if (relation == null) {
        throw new GenericModelException ("Could not find relation for relationName: " + relationName + " for value " + value);
    }
    if (! "one".equals (relation.getType ()) && ! "one-nofk".equals (relation.getType ())) {
        throw new GenericModelException ("Relation is not a 'one' or a 'one-nofk' relation: " + relationName + " of entity " + value.getEntityName ());
    }
    Map < String, Object > fields = FastMap.newInstance ();
    for (int i = 0;
    i < relation.getKeyMapsSize (); i ++) {
        ModelKeyMap keyMap = relation.getKeyMap (i);
        fields.put (keyMap.getRelFieldName (), value.get (keyMap.getFieldName ()));
    }
    return this.findByPrimaryKeyCache (relation.getRelEntityName (), fields);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2039" endline="2041">
public void clearAllCaches () {
    this.clearAllCaches (true);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2046" endline="2052">
public void clearAllCaches (boolean distribute) {
    cache.clear ();
    if (distribute && this.distributedCacheClear != null) {
        this.distributedCacheClear.clearAllCaches ();
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2057" endline="2059">
public void clearCacheLine (String entityName) {
    cache.remove (entityName);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2064" endline="2066">
public void clearCacheLine (String entityName, Object...fields) {
    clearCacheLine (entityName, UtilMisc.< String, Object > toMap (fields));
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2071" endline="2089">
public void clearCacheLine (String entityName, Map < String, ? extends Object > fields) {
    if (fields == null) {
        cache.remove (entityName);
        return;
    }
    ModelEntity entity = this.getModelEntity (entityName);
    if (entity == null) {
        throw new IllegalArgumentException ("[GenericDelegator.clearCacheLine] could not find entity for entityName: " + entityName);
    }
    if (entity.getNeverCache ()) {
        return;
    }
    GenericValue dummyValue = GenericValue.create (this, entity, fields);
    this.clearCacheLineFlexible (dummyValue);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2094" endline="2096">
public void clearCacheLineFlexible (GenericEntity dummyPK) {
    this.clearCacheLineFlexible (dummyPK, true);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2101" endline="2112">
public void clearCacheLineFlexible (GenericEntity dummyPK, boolean distribute) {
    if (dummyPK != null) {
        if (dummyPK.getModelEntity ().getNeverCache ()) return;

        cache.remove (dummyPK);
        if (distribute && this.distributedCacheClear != null) {
            this.distributedCacheClear.distributedClearCacheLineFlexible (dummyPK);
        }
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2117" endline="2119">
public void clearCacheLineByCondition (String entityName, EntityCondition condition) {
    clearCacheLineByCondition (entityName, condition, true);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2124" endline="2137">
public void clearCacheLineByCondition (String entityName, EntityCondition condition, boolean distribute) {
    if (entityName != null) {
        if (getModelEntity (entityName).getNeverCache ()) {
            return;
        }
        cache.remove (entityName, condition);
        if (distribute && this.distributedCacheClear != null) {
            this.distributedCacheClear.distributedClearCacheLineByCondition (entityName, condition);
        }
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2142" endline="2144">
public void clearCacheLine (GenericPK primaryKey) {
    this.clearCacheLine (primaryKey, true);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2149" endline="2164">
public void clearCacheLine (GenericPK primaryKey, boolean distribute) {
    if (primaryKey == null) {
        return;
    }
    if (primaryKey.getModelEntity ().getNeverCache ()) {
        return;
    }
    cache.remove (primaryKey);
    if (distribute && this.distributedCacheClear != null) {
        this.distributedCacheClear.distributedClearCacheLine (primaryKey);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2169" endline="2171">
public void clearCacheLine (GenericValue value) {
    this.clearCacheLine (value, true);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2176" endline="2197">
public void clearCacheLine (GenericValue value, boolean distribute) {
    if (value == null) {
        return;
    }
    if (value.getModelEntity ().getNeverCache ()) {
        return;
    }
    cache.remove (value);
    if (distribute && this.distributedCacheClear != null) {
        this.distributedCacheClear.distributedClearCacheLine (value);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2202" endline="2209">
public void clearAllCacheLinesByDummyPK (Collection < GenericPK > dummyPKs) {
    if (dummyPKs == null) {
        return;
    }
    for (GenericEntity entity : dummyPKs) {
        this.clearCacheLineFlexible (entity);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2214" endline="2221">
public void clearAllCacheLinesByValue (Collection < GenericValue > values) {
    if (values == null) {
        return;
    }
    for (GenericValue value : values) {
        this.clearCacheLine (value);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2226" endline="2235">
public GenericValue getFromPrimaryKeyCache (GenericPK primaryKey) {
    if (primaryKey == null) {
        return null;
    }
    GenericValue value = cache.get (primaryKey);
    if (value == GenericValue.NULL_VALUE) {
        return null;
    }
    return value;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2240" endline="2253">
public void putInPrimaryKeyCache (GenericPK primaryKey, GenericValue value) {
    if (primaryKey == null) {
        return;
    }
    if (primaryKey.getModelEntity ().getNeverCache ()) {
        Debug.logWarning ("Tried to put a value of the " + value.getEntityName () + " entity in the BY PRIMARY KEY cache but this entity has never-cache set to true, not caching.", module);
        return;
    }
    value.setImmutable ();
    cache.put (primaryKey, value);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2258" endline="2265">
public void putAllInPrimaryKeyCache (List < GenericValue > values) {
    if (values == null) {
        return;
    }
    for (GenericValue value : values) {
        this.putInPrimaryKeyCache (value.getPrimaryKey (), value);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2270" endline="2272">
public void setDistributedCacheClear (DistributedCacheClear distributedCacheClear) {
    this.distributedCacheClear = distributedCacheClear;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2278" endline="2283">
public List < GenericValue > readXmlDocument (URL url) throws SAXException, ParserConfigurationException, java.io.IOException {
    if (url == null) {
        return null;
    }
    return this.makeValues (UtilXml.readXmlDocument (url, false));
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2288" endline="2322">
public List < GenericValue > makeValues (Document document) {
    if (document == null) {
        return null;
    }
    List < GenericValue > values = FastList.newInstance ();
    Element docElement = document.getDocumentElement ();
    if (docElement == null) {
        return null;
    }
    if (! "entity-engine-xml".equals (docElement.getTagName ())) {
        Debug.logError ("[GenericDelegator.makeValues] Root node was not <entity-engine-xml>", module);
        throw new java.lang.IllegalArgumentException ("Root node was not <entity-engine-xml>");
    }
    docElement.normalize ();
    Node curChild = docElement.getFirstChild ();
    if (curChild != null) {
        do {
            if (curChild.getNodeType () == Node.ELEMENT_NODE) {
                Element element = (Element) curChild;
                GenericValue value = this.makeValue (element);
                if (value != null) {
                    values.add (value);
                }
            }
        } while ((curChild = curChild.getNextSibling ()) != null);
    } else {
        Debug.logWarning ("[GenericDelegator.makeValues] No child nodes found in document.", module);
    }
    return values;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2327" endline="2331">
public GenericPK makePK (Element element) {
    GenericValue value = makeValue (element);
    return value.getPrimaryKey ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2336" endline="2373">
public GenericValue makeValue (Element element) {
    if (element == null) {
        return null;
    }
    String entityName = element.getTagName ();
    if (entityName.indexOf ('-') > 0) {
        entityName = entityName.substring (entityName.indexOf ('-') + 1);
    }
    if (entityName.indexOf (':') > 0) {
        entityName = entityName.substring (entityName.indexOf (':') + 1);
    }
    GenericValue value = this.makeValue (entityName);
    ModelEntity modelEntity = value.getModelEntity ();
    Iterator < ModelField > modelFields = modelEntity.getFieldsIterator ();
    while (modelFields.hasNext ()) {
        ModelField modelField = modelFields.next ();
        String name = modelField.getName ();
        String attr = element.getAttribute (name);
        if (UtilValidate.isNotEmpty (attr)) {
            value.setString (name, attr);
        } else {
            Element subElement = UtilXml.firstChildElement (element, name);
            if (subElement != null) {
                value.setString (name, UtilXml.elementValue (subElement));
            }
        }
    }
    return value;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2381" endline="2384">
protected EntityEcaRuleRunner (EntityEcaHandler < T > entityEcaHandler, Map < String, List < T > > eventMap) {
    this.entityEcaHandler = entityEcaHandler;
    this.eventMap = eventMap;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2386" endline="2394">
protected void evalRules (String event, String currentOperation, GenericEntity value, boolean isError) throws GenericEntityException {
    if (entityEcaHandler == null) {
        return;
    }
    entityEcaHandler.evalRules (currentOperation, eventMap, event, value, isError);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2397" endline="2402">
protected EntityEcaRuleRunner < ? > getEcaRuleRunner (String entityName) {
    if (this.testRollbackInProgress) {
        return createEntityEcaRuleRunner (null, null);
    }
    return createEntityEcaRuleRunner (this.entityEcaHandler, entityName);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2404" endline="2406">
protected static < T > EntityEcaRuleRunner < T > createEntityEcaRuleRunner (EntityEcaHandler < T > entityEcaHandler, String entityName) {
    return new EntityEcaRuleRunner < T > (entityEcaHandler, entityEcaHandler != null ? entityEcaHandler.getEntityEventMap (entityName) : null);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2411" endline="2413">
public < T > void setEntityEcaHandler (EntityEcaHandler < T > entityEcaHandler) {
    this.entityEcaHandler = entityEcaHandler;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2418" endline="2420">
public < T > EntityEcaHandler < T > getEntityEcaHandler () {
    return UtilGenerics.cast (this.entityEcaHandler);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2425" endline="2427">
public String getNextSeqId (String seqName) {
    return this.getNextSeqId (seqName, 1);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2432" endline="2445">
public String getNextSeqId (String seqName, long staggerMax) {
    Long nextSeqLong = this.getNextSeqIdLong (seqName, staggerMax);
    if (nextSeqLong == null) {
        throw new IllegalArgumentException ("Could not get next sequenced ID for sequence name: " + seqName);
    }
    if (UtilValidate.isNotEmpty (this.getDelegatorInfo ().sequencedIdPrefix)) {
        return this.getDelegatorInfo ().sequencedIdPrefix + nextSeqLong.toString ();
    } else {
        return nextSeqLong.toString ();
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2450" endline="2452">
public Long getNextSeqIdLong (String seqName) {
    return this.getNextSeqIdLong (seqName, 1);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2457" endline="2497">
public Long getNextSeqIdLong (String seqName, long staggerMax) {
    boolean beganTransaction = false;
    try {
        if (alwaysUseTransaction) {
            beganTransaction = TransactionUtil.begin ();
        }
        if (sequencer == null) {
            synchronized (this) {
                if (sequencer == null) {
                    ModelEntity seqEntity = this.getModelEntity ("SequenceValueItem");
                    sequencer = new SequenceUtil (this, this.getEntityHelperInfo ("SequenceValueItem"), seqEntity, "seqName", "seqId");
                }
            }
        }
        ModelEntity seqModelEntity = this.getModelEntity (seqName);
        Long newSeqId = sequencer == null ? null : sequencer.getNextSeqId (seqName, staggerMax, seqModelEntity);
        return newSeqId;
    } catch (GenericEntityException e) {
        String errMsg = "Failure in getNextSeqIdLong operation for seqName [" + seqName + "]: " + e.toString () + ". Rolling back transaction.";
        try {
            TransactionUtil.rollback (beganTransaction, errMsg, e);
        } catch (GenericEntityException e2) {
            Debug.logError (e2, "[GenericDelegator] Could not rollback transaction: " + e2.toString (), module);
        }
        throw new GeneralRuntimeException (errMsg, e);
    } finally {
        try {
            TransactionUtil.commit (beganTransaction);
        } catch (GenericTransactionException e1) {
            Debug.logError (e1, "[GenericDelegator] Could not commit transaction: " + e1.toString (), module);
        }
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2502" endline="2504">
public void setSequencer (SequenceUtil sequencer) {
    this.sequencer = sequencer;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2509" endline="2511">
public void refreshSequencer () {
    this.sequencer = null;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2517" endline="2574">
public void setNextSubSeqId (GenericValue value, String seqFieldName, int numericPadding, int incrementBy) {
    if (value != null && UtilValidate.isEmpty (value.getString (seqFieldName))) {
        String sequencedIdPrefix = this.getDelegatorInfo ().sequencedIdPrefix;
        value.remove (seqFieldName);
        GenericValue lookupValue = this.makeValue (value.getEntityName ());
        lookupValue.setPKFields (value);
        boolean beganTransaction = false;
        try {
            if (alwaysUseTransaction) {
                beganTransaction = TransactionUtil.begin ();
            }
            List < GenericValue > allValues = this.findByAnd (value.getEntityName (), lookupValue, null);
            Integer highestSeqVal = null;
            for (GenericValue curValue : allValues) {
                String currentSeqId = curValue.getString (seqFieldName);
                if (currentSeqId != null) {
                    if (UtilValidate.isNotEmpty (sequencedIdPrefix)) {
                        if (currentSeqId.startsWith (sequencedIdPrefix)) {
                            currentSeqId = currentSeqId.substring (sequencedIdPrefix.length ());
                        } else {
                            continue;
                        }
                    }
                    try {
                        int seqVal = Integer.parseInt (currentSeqId);
                        if (highestSeqVal == null || seqVal > highestSeqVal.intValue ()) {
                            highestSeqVal = Integer.valueOf (seqVal);
                        }
                    } catch (Exception e) {
                        Debug.logWarning ("Error in make-next-seq-id converting SeqId [" + currentSeqId + "] in field: " + seqFieldName + " from entity: " + value.getEntityName () + " to a number: " + e.toString (), module);
                    }
                }
            }
            int seqValToUse = (highestSeqVal == null ? 1 : highestSeqVal.intValue () + incrementBy);
            String newSeqId = sequencedIdPrefix + UtilFormatOut.formatPaddedNumber (seqValToUse, numericPadding);
            value.set (seqFieldName, newSeqId);
            TransactionUtil.commit (beganTransaction);
        } catch (Exception e) {
            String errMsg = "Failure in setNextSubSeqId operation for entity [" + value.getEntityName () + "]: " + e.toString () + ". Rolling back transaction.";
            Debug.logError (e, errMsg, module);
            try {
                TransactionUtil.rollback (beganTransaction, errMsg, e);
            } catch (GenericEntityException e2) {
                Debug.logError (e2, "[GenericDelegator] Could not rollback transaction: " + e2.toString (), module);
            }
            Debug.logError (e, "Error making next seqId", module);
        }
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2579" endline="2585">
public void encryptFields (List < ? extends GenericEntity > entities) throws GenericEntityException {
    if (entities != null) {
        for (GenericEntity entity : entities) {
            this.encryptFields (entity);
        }
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2590" endline="2607">
public void encryptFields (GenericEntity entity) throws GenericEntityException {
    ModelEntity model = entity.getModelEntity ();
    String entityName = model.getEntityName ();
    Iterator < ModelField > i = model.getFieldsIterator ();
    while (i.hasNext ()) {
        ModelField field = i.next ();
        if (field.getEncrypt ()) {
            Object obj = entity.get (field.getName ());
            if (obj != null) {
                if (obj instanceof String && UtilValidate.isEmpty (obj)) {
                    continue;
                }
                entity.dangerousSetNoCheckButFast (field, this.encryptFieldValue (entityName, obj));
            }
        }
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2612" endline="2620">
public Object encryptFieldValue (String entityName, Object fieldValue) throws EntityCryptoException {
    if (fieldValue != null) {
        if (fieldValue instanceof String && UtilValidate.isEmpty (fieldValue)) {
            return fieldValue;
        }
        return this.crypto.encrypt (entityName, fieldValue);
    }
    return fieldValue;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2625" endline="2631">
public void decryptFields (List < ? extends GenericEntity > entities) throws GenericEntityException {
    if (entities != null) {
        for (GenericEntity entity : entities) {
            this.decryptFields (entity);
        }
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2636" endline="2661">
public void decryptFields (GenericEntity entity) throws GenericEntityException {
    ModelEntity model = entity.getModelEntity ();
    String entityName = model.getEntityName ();
    Iterator < ModelField > i = model.getFieldsIterator ();
    while (i.hasNext ()) {
        ModelField field = i.next ();
        if (field.getEncrypt ()) {
            String keyName = entityName;
            if (model instanceof ModelViewEntity) {
                ModelViewEntity modelView = (ModelViewEntity) model;
                keyName = modelView.getAliasedEntity (modelView.getAlias (field.getName ()).getEntityAlias (), modelReader).getEntityName ();
            }
            String encHex = (String) entity.get (field.getName ());
            if (UtilValidate.isNotEmpty (encHex)) {
                try {
                    entity.dangerousSetNoCheckButFast (field, crypto.decrypt (keyName, encHex));
                } catch (EntityCryptoException e) {
                    Debug.logWarning (e, "Problem decrypting field [" + entityName + " / " + field.getName () + "]", module);
                }
            }
        }
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2666" endline="2668">
public void setEntityCrypto (EntityCrypto crypto) {
    this.crypto = crypto;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2670" endline="2677">
protected void absorbList (List < GenericValue > lst) {
    if (lst == null) {
        return;
    }
    for (GenericValue value : lst) {
        value.setDelegator (this);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2682" endline="2684">
public Cache getCache () {
    return cache;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2686" endline="2693">
protected void createEntityAuditLogAll (GenericValue value, boolean isUpdate, boolean isRemove) throws GenericEntityException {
    Timestamp nowTimestamp = UtilDateTime.nowTimestamp ();
    for (ModelField mf : value.getModelEntity ().getFieldsUnmodifiable ()) {
        if (mf.getEnableAuditLog ()) {
            createEntityAuditLogSingle (value, mf, isUpdate, isRemove, nowTimestamp);
        }
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2695" endline="2755">
protected void createEntityAuditLogSingle (GenericValue value, ModelField mf, boolean isUpdate, boolean isRemove, Timestamp nowTimestamp) throws GenericEntityException {
    if (value == null || mf == null || ! mf.getEnableAuditLog () || this.testRollbackInProgress) {
        return;
    }
    String newValueText = null;
    String oldValueText = null;
    GenericValue oldGv = null;
    if (isUpdate) {
        oldGv = this.findOne (value.getEntityName (), value.getPrimaryKey (), false);
    } else if (isRemove) {
        oldGv = value;
    }

    if (oldGv == null) {
        if (isUpdate || isRemove) {
            oldValueText = "[ERROR] Old value not found even though it was an update or remove";
        }
    } else {
        Object oldValue = oldGv.get (mf.getName ());
        if (oldValue != null) {
            oldValueText = oldValue.toString ();
            if (oldValueText.length () > 250) {
                oldValueText = oldValueText.substring (0, 250);
            }
        }
    }
    if (! isRemove) {
        Object newValue = value.get (mf.getName ());
        if (newValue != null) {
            newValueText = newValue.toString ();
            if (newValueText.length () > 250) {
                newValueText = newValueText.substring (0, 250);
            }
        }
    }
    if (! (newValueText == null ? "" : newValueText).equals ((oldValueText == null ? "" : oldValueText))) {
        GenericValue entityAuditLog = this.makeValue ("EntityAuditLog");
        entityAuditLog.set ("auditHistorySeqId", this.getNextSeqId ("EntityAuditLog"));
        entityAuditLog.set ("changedEntityName", value.getEntityName ());
        entityAuditLog.set ("changedFieldName", mf.getName ());
        String pkCombinedValueText = value.getPkShortValueString ();
        if (pkCombinedValueText.length () > 250) {
            pkCombinedValueText = pkCombinedValueText.substring (0, 250);
        }
        entityAuditLog.set ("pkCombinedValueText", pkCombinedValueText);
        entityAuditLog.set ("newValueText", newValueText);
        entityAuditLog.set ("oldValueText", oldValueText);
        entityAuditLog.set ("changedDate", nowTimestamp);
        entityAuditLog.set ("changedByInfo", getCurrentUserIdentifier ());
        entityAuditLog.set ("changedSessionInfo", getCurrentSessionIdentifier ());
        this.create (entityAuditLog);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2760" endline="2785">
public GenericDelegator cloneDelegator (String delegatorFullName) {
    GenericDelegator newDelegator = new GenericDelegator ();
    newDelegator.modelReader = this.modelReader;
    newDelegator.modelGroupReader = this.modelGroupReader;
    newDelegator.setDelegatorNames (UtilValidate.isNotEmpty (delegatorFullName) ? delegatorFullName : this.delegatorFullName);
    newDelegator.delegatorBaseName = this.delegatorBaseName;
    newDelegator.delegatorInfo = this.delegatorInfo;
    newDelegator.cache = this.cache;
    newDelegator.andCacheFieldSets = this.andCacheFieldSets;
    newDelegator.distributedCacheClear = this.distributedCacheClear;
    newDelegator.originalDelegatorName = getOriginalDelegatorName ();
    newDelegator.entityEcaHandler = this.entityEcaHandler;
    newDelegator.crypto = this.crypto;
    newDelegator.testMode = this.testMode;
    testOperationsUpdater.set (newDelegator, this.testOperations);
    return newDelegator;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2790" endline="2792">
public GenericDelegator cloneDelegator () {
    return this.cloneDelegator (this.delegatorFullName);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2797" endline="2803">
public GenericDelegator makeTestDelegator (String delegatorName) {
    GenericDelegator testDelegator = this.cloneDelegator (delegatorName);
    testDelegator.entityEcaHandler = null;
    testDelegator.initEntityEcaHandler ();
    testDelegator.setTestMode (true);
    return testDelegator;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2805" endline="2812">
private void setTestMode (boolean testMode) {
    this.testMode = testMode;
    if (testMode) {
        testOperationsUpdater.set (this, new LinkedBlockingDeque < TestOperation > ());
    } else {
        this.testOperations.clear ();
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2814" endline="2819">
private void storeForTestRollback (TestOperation testOperation) {
    if (! this.testMode || this.testRollbackInProgress) {
        throw new IllegalStateException ("An attempt was made to store a TestOperation during rollback or outside of test mode");
    }
    this.testOperations.add (testOperation);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2824" endline="2851">
public void rollback () {
    if (! this.testMode) {
        Debug.logError ("Rollback requested outside of testmode", module);
    }
    this.testMode = false;
    this.testRollbackInProgress = true;
    Debug.logInfo ("Rolling back " + testOperations.size () + " entity operations", module);
    while (! this.testOperations.isEmpty ()) {
        TestOperation testOperation = this.testOperations.pollLast ();
        if (testOperation == null) {
            break;
        }
        try {
            if (testOperation.getOperation ().equals (OperationType.INSERT)) {
                this.removeValue (testOperation.getValue ());
            } else if (testOperation.getOperation ().equals (OperationType.UPDATE)) {
                this.store (testOperation.getValue ());
            } else if (testOperation.getOperation ().equals (OperationType.DELETE)) {
                this.create (testOperation.getValue ());
            }

        } catch (GenericEntityException e) {
            Debug.logWarning (e.toString (), module);
        }
    }
    this.testOperations.clear ();
    this.testRollbackInProgress = false;
    this.testMode = true;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2857" endline="2860">
public TestOperation (OperationType operation, GenericValue value) {
    this.operation = operation;
    this.value = value;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2862" endline="2864">
public OperationType getOperation () {
    return operation;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2866" endline="2868">
public GenericValue getValue () {
    return value;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2874" endline="2903">
public void initDistributedCacheClear () {
    if (this.distributedCacheClear != null) {
        return;
    }
    if (useDistributedCacheClear ()) {
        ClassLoader loader = Thread.currentThread ().getContextClassLoader ();
        String distributedCacheClearClassName = getDelegatorInfo ().distributedCacheClearClassName;
        try {
            Class < ? > dccClass = loader.loadClass (distributedCacheClearClassName);
            this.distributedCacheClear = UtilGenerics.cast (dccClass.newInstance ());
            this.distributedCacheClear.setDelegator (this, getDelegatorInfo ().distributedCacheClearUserLoginId);
        } catch (ClassNotFoundException e) {
            Debug.logWarning (e, "DistributedCacheClear class with name " + distributedCacheClearClassName + " was not found, distributed cache clearing will be disabled", module);
        } catch (InstantiationException e) {
            Debug.logWarning (e, "DistributedCacheClear class with name " + distributedCacheClearClassName + " could not be instantiated, distributed cache clearing will be disabled", module);
        } catch (IllegalAccessException e) {
            Debug.logWarning (e, "DistributedCacheClear class with name " + distributedCacheClearClassName + " could not be accessed (illegal), distributed cache clearing will be disabled", module);
        } catch (ClassCastException e) {
            Debug.logWarning (e, "DistributedCacheClear class with name " + distributedCacheClearClassName + " does not implement the DistributedCacheClear interface, distributed cache clearing will be disabled", module);
        }
    } else {
        Debug.logVerbose ("Distributed Cache Clear System disabled for delegator [" + delegatorFullName + "]", module);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-GenericDelegator.java" startline="2908" endline="2910">
public boolean useDistributedCacheClear () {
    return this.getDelegatorInfo ().useDistributedCacheClear;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-LoggingRequester.java" startline="43" endline="45">
public LoggingRequester () {
    super (gv);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-LoggingRequester.java" startline="48" endline="51">
public LoggingRequester (GenericValue userLogin) {
    super (userLogin);
    gv = userLogin;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-LoggingRequester.java" startline="57" endline="59">
public void receive_event (WfEventAudit event) throws BaseException, InvalidPerformer {
    Debug.log ("Received event - " + event.event_type (), module);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-LoggingRequester.java" startline="61" endline="63">
public void receive_event (SharkTransaction sharkTransaction, WfEventAudit event) throws BaseException, InvalidPerformer {
    this.receive_event (event);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="136" endline="136">
public ModelEntity () {
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="138" endline="140">
protected ModelEntity (ModelReader reader) {
    this.modelReader = reader;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="142" endline="145">
protected ModelEntity (ModelReader reader, ModelInfo def) {
    super (def);
    this.modelReader = reader;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="148" endline="151">
protected ModelEntity (ModelReader reader, Element entityElement, ModelInfo def) {
    this (reader, def);
    populateFromAttributes (entityElement);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="154" endline="233">
public ModelEntity (ModelReader reader, Element entityElement, UtilTimer utilTimer, ModelInfo def) {
    this (reader, entityElement, def);
    if (utilTimer != null) utilTimer.timerString ("  createModelEntity: before general/basic info");

    this.populateBasicInfo (entityElement);
    if (utilTimer != null) utilTimer.timerString ("  createModelEntity: before fields");

    for (Element fieldElement : UtilXml.childElementList (entityElement, "field")) {
        ModelField field = reader.createModelField (fieldElement);
        if (field != null) {
            field.setModelEntity (this);
            this.fields.add (field);
        }
    }
    if ((this.doLock || ! this.noAutoStamp) && ! this.isField (STAMP_FIELD)) {
        ModelField newField = reader.createModelField (STAMP_FIELD, "date-time", null, false);
        newField.setIsAutoCreatedInternal (true);
        newField.setModelEntity (this);
        this.fields.add (newField);
    }
    if (! this.noAutoStamp && ! this.isField (STAMP_TX_FIELD)) {
        ModelField newField = reader.createModelField (STAMP_TX_FIELD, "date-time", null, false);
        newField.setIsAutoCreatedInternal (true);
        newField.setModelEntity (this);
        this.fields.add (newField);
        String indexName = ModelUtil.shortenDbName (this.tableName + "_TXSTMP", 18);
        ModelIndex txIndex = new ModelIndex (this, indexName, false);
        txIndex.addIndexField (ModelEntity.STAMP_TX_FIELD);
        txIndex.setModelEntity (this);
        indexes.add (txIndex);
    }
    if ((this.doLock || ! this.noAutoStamp) && ! this.isField (CREATE_STAMP_FIELD)) {
        ModelField newField = reader.createModelField (CREATE_STAMP_FIELD, "date-time", null, false);
        newField.setIsAutoCreatedInternal (true);
        newField.setModelEntity (this);
        this.fields.add (newField);
    }
    if (! this.noAutoStamp && ! this.isField (CREATE_STAMP_TX_FIELD)) {
        ModelField newField = reader.createModelField (CREATE_STAMP_TX_FIELD, "date-time", null, false);
        newField.setIsAutoCreatedInternal (true);
        newField.setModelEntity (this);
        this.fields.add (newField);
        String indexName = ModelUtil.shortenDbName (this.tableName + "_TXCRTS", 18);
        ModelIndex txIndex = new ModelIndex (this, indexName, false);
        txIndex.addIndexField (ModelEntity.CREATE_STAMP_TX_FIELD);
        txIndex.setModelEntity (this);
        indexes.add (txIndex);
    }
    if (utilTimer != null) utilTimer.timerString ("  createModelEntity: before prim-keys");

    for (Element pkElement : UtilXml.childElementList (entityElement, "prim-key")) {
        ModelField field = reader.findModelField (this, pkElement.getAttribute ("field").intern ());
        if (field != null) {
            this.pks.add (field);
            field.isPk = true;
            field.isNotNull = true;
        } else {
            Debug.logError ("[ModelReader.createModelEntity] ERROR: Could not find field \"" + pkElement.getAttribute ("field") + "\" specified in a prim-key", module);
        }
    }
    this.nopks = FastList.newInstance ();
    for (ModelField field : this.fields) {
        if (! field.isPk) this.nopks.add (field);

    }
    if (utilTimer != null) utilTimer.timerString ("  createModelEntity: before relations");

    this.populateRelated (reader, entityElement);
    this.populateIndexes (entityElement);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="236" endline="250">
public ModelEntity (String tableName, Map < String, DatabaseUtil.ColumnCheckInfo > colMap, ModelFieldTypeReader modelFieldTypeReader, boolean isCaseSensitive) {
    this.tableName = tableName;
    int dotIndex = this.tableName.indexOf (".");
    if (dotIndex >= 0) {
        this.tableName = this.tableName.substring (dotIndex + 1);
    }
    this.entityName = ModelUtil.dbNameToClassName (this.tableName);
    for (Map.Entry < String, DatabaseUtil.ColumnCheckInfo > columnEntry : colMap.entrySet ()) {
        DatabaseUtil.ColumnCheckInfo ccInfo = columnEntry.getValue ();
        ModelField newField = new ModelField (ccInfo, modelFieldTypeReader);
        this.fields.add (newField);
    }
    this.updatePkLists ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="252" endline="271">
protected void populateBasicInfo (Element entityElement) {
    this.entityName = UtilXml.checkEmpty (entityElement.getAttribute ("entity-name")).intern ();
    this.tableName = UtilXml.checkEmpty (entityElement.getAttribute ("table-name"), ModelUtil.javaNameToDbName (this.entityName)).intern ();
    this.packageName = UtilXml.checkEmpty (entityElement.getAttribute ("package-name")).intern ();
    this.dependentOn = UtilXml.checkEmpty (entityElement.getAttribute ("dependent-on")).intern ();
    this.doLock = UtilXml.checkBoolean (entityElement.getAttribute ("enable-lock"), false);
    this.noAutoStamp = UtilXml.checkBoolean (entityElement.getAttribute ("no-auto-stamp"), false);
    this.neverCache = UtilXml.checkBoolean (entityElement.getAttribute ("never-cache"), false);
    this.neverCheck = UtilXml.checkBoolean (entityElement.getAttribute ("never-check"), false);
    this.autoClearCache = UtilXml.checkBoolean (entityElement.getAttribute ("auto-clear-cache"), true);
    String sequenceBankSizeStr = UtilXml.checkEmpty (entityElement.getAttribute ("sequence-bank-size"));
    if (UtilValidate.isNotEmpty (sequenceBankSizeStr)) {
        try {
            this.sequenceBankSize = Integer.valueOf (sequenceBankSizeStr);
        } catch (NumberFormatException e) {
            Debug.logError ("Error parsing sequence-bank-size value [" + sequenceBankSizeStr + "] for entity [" + this.entityName + "]", module);
        }
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="274" endline="282">
protected void populateRelated (ModelReader reader, Element entityElement) {
    for (Element relationElement : UtilXml.childElementList (entityElement, "relation")) {
        ModelRelation relation = reader.createRelation (this, relationElement);
        if (relation != null) {
            relation.setModelEntity (this);
            this.relations.add (relation);
        }
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="285" endline="291">
protected void populateIndexes (Element entityElement) {
    for (Element indexElement : UtilXml.childElementList (entityElement, "index")) {
        ModelIndex index = new ModelIndex (this, indexElement);
        index.setModelEntity (this);
        this.indexes.add (index);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="293" endline="302">
public boolean containsAllPkFieldNames (Set < String > fieldNames) {
    Iterator < ModelField > pksIter = this.getPksIterator ();
    while (pksIter.hasNext ()) {
        ModelField pkField = pksIter.next ();
        if (! fieldNames.contains (pkField.getName ())) {
            return false;
        }
    }
    return true;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="305" endline="369">
public void addExtendEntity (ModelReader reader, Element extendEntityElement) {
    if (extendEntityElement.hasAttribute ("enable-lock")) {
        this.doLock = UtilXml.checkBoolean (extendEntityElement.getAttribute ("enable-lock"), false);
    }
    if (extendEntityElement.hasAttribute ("no-auto-stamp")) {
        this.noAutoStamp = UtilXml.checkBoolean (extendEntityElement.getAttribute ("no-auto-stamp"), false);
    }
    if (extendEntityElement.hasAttribute ("auto-clear-cache")) {
        this.autoClearCache = UtilXml.checkBoolean (extendEntityElement.getAttribute ("auto-clear-cache"), false);
    }
    if (extendEntityElement.hasAttribute ("never-cache")) {
        this.neverCache = UtilXml.checkBoolean (extendEntityElement.getAttribute ("never-cache"), false);
    }
    if (extendEntityElement.hasAttribute ("sequence-bank-size")) {
        String sequenceBankSizeStr = UtilXml.checkEmpty (extendEntityElement.getAttribute ("sequence-bank-size"));
        if (UtilValidate.isNotEmpty (sequenceBankSizeStr)) {
            try {
                this.sequenceBankSize = Integer.valueOf (sequenceBankSizeStr);
            } catch (NumberFormatException e) {
                Debug.logError ("Error parsing sequence-bank-size value [" + sequenceBankSizeStr + "] for entity [" + this.entityName + "]", module);
            }
        }
    }
    for (Element fieldElement : UtilXml.childElementList (extendEntityElement, "field")) {
        ModelField field = reader.createModelField (fieldElement);
        if (field != null) {
            ModelField existingField = this.getField (field.getName ());
            if (existingField != null) {
                if (UtilValidate.isNotEmpty (field.getType ())) {
                    existingField.setType (field.getType ());
                }
                if (UtilValidate.isNotEmpty (field.getColName ())) {
                    existingField.setColName (field.getColName ());
                }
                if (UtilValidate.isNotEmpty (field.getDescription ())) {
                    existingField.setDescription (field.getDescription ());
                }
            } else {
                field.setModelEntity (this);
                this.fields.add (field);
                if (! field.isPk) this.nopks.add (field);

            }
        }
    }
    String defResourceName = StringUtil.internString (extendEntityElement.getAttribute ("default-resource-name"));
    if (UtilValidate.isNotEmpty (defResourceName)) {
        this.setDefaultResourceName (defResourceName);
    }
    this.populateRelated (reader, extendEntityElement);
    this.populateIndexes (extendEntityElement);
    this.dependentOn = UtilXml.checkEmpty (extendEntityElement.getAttribute ("dependent-on")).intern ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="374" endline="376">
public ModelReader getModelReader () {
    return modelReader;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="379" endline="381">
public String getEntityName () {
    return this.entityName;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="383" endline="385">
public void setEntityName (String entityName) {
    this.entityName = entityName;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="388" endline="390">
public String getPlainTableName () {
    return this.tableName;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="393" endline="395">
public String getTableName (String helperName) {
    return getTableName (EntityConfigUtil.getDatasourceInfo (helperName));
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="398" endline="404">
public String getTableName (DatasourceInfo datasourceInfo) {
    if (datasourceInfo != null && UtilValidate.isNotEmpty (datasourceInfo.schemaName)) {
        return datasourceInfo.schemaName + "." + this.tableName;
    } else {
        return this.tableName;
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="406" endline="408">
public void setTableName (String tableName) {
    this.tableName = tableName;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="411" endline="413">
public String getPackageName () {
    return this.packageName;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="415" endline="417">
public void setPackageName (String packageName) {
    this.packageName = packageName;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="420" endline="422">
public String getDependentOn () {
    return this.dependentOn;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="424" endline="426">
public void setDependentOn (String dependentOn) {
    this.dependentOn = dependentOn;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="432" endline="434">
public boolean getNeverCache () {
    return this.neverCache;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="436" endline="438">
public void setNeverCache (boolean neverCache) {
    this.neverCache = neverCache;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="445" endline="447">
public boolean getNeverCheck () {
    return neverCheck;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="449" endline="451">
public void setNeverCheck (boolean neverCheck) {
    this.neverCheck = neverCheck;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="453" endline="455">
public boolean getAutoClearCache () {
    return this.autoClearCache;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="457" endline="459">
public void setAutoClearCache (boolean autoClearCache) {
    this.autoClearCache = autoClearCache;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="461" endline="473">
public boolean getHasFieldWithAuditLog () {
    if (this.hasFieldWithAuditLog == null) {
        this.hasFieldWithAuditLog = false;
        for (ModelField mf : this.fields) {
            if (mf.getEnableAuditLog ()) {
                this.hasFieldWithAuditLog = true;
            }
        }
        return this.hasFieldWithAuditLog;
    } else {
        return this.hasFieldWithAuditLog;
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="476" endline="478">
public String getLocation () {
    return this.location;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="481" endline="483">
public void setLocation (String location) {
    this.location = location;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="486" endline="488">
public boolean getDoLock () {
    return this.doLock;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="490" endline="492">
public void setDoLock (boolean doLock) {
    this.doLock = doLock;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="494" endline="501">
public boolean lock () {
    if (doLock && isField (STAMP_FIELD)) {
        return true;
    } else {
        doLock = false;
        return false;
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="503" endline="505">
public Integer getSequenceBankSize () {
    return this.sequenceBankSize;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="507" endline="517">
public void updatePkLists () {
    pks = FastList.newInstance ();
    nopks = FastList.newInstance ();
    for (ModelField field : fields) {
        if (field.isPk) pks.add (field);
        else nopks.add (field);

    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="519" endline="525">
public boolean isField (String fieldName) {
    if (fieldName == null) return false;

    for (ModelField field : fields) {
        if (field.name.equals (fieldName)) return true;

    }
    return false;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="527" endline="533">
public boolean areFields (Collection < String > fieldNames) {
    if (fieldNames == null) return false;

    for (String fieldName : fieldNames) {
        if (! isField (fieldName)) return false;

    }
    return true;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="535" endline="537">
public int getPksSize () {
    return this.pks.size ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="539" endline="545">
public ModelField getOnlyPk () {
    if (this.pks.size () == 1) {
        return this.pks.get (0);
    } else {
        throw new IllegalArgumentException ("Error in getOnlyPk, the [" + this.getEntityName () + "] entity has more than one pk!");
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="547" endline="549">
public Iterator < ModelField > getPksIterator () {
    return this.pks.iterator ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="551" endline="553">
public List < ModelField > getPkFieldsUnmodifiable () {
    return Collections.unmodifiableList (this.pks);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="555" endline="562">
public String getFirstPkFieldName () {
    List < String > pkFieldNames = this.getPkFieldNames ();
    String idFieldName = null;
    if (UtilValidate.isNotEmpty (pkFieldNames)) {
        idFieldName = pkFieldNames.get (0);
    }
    return idFieldName;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="564" endline="566">
public int getNopksSize () {
    return this.nopks.size ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="568" endline="570">
public Iterator < ModelField > getNopksIterator () {
    return this.nopks.iterator ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="572" endline="576">
public List < ModelField > getNopksCopy () {
    List < ModelField > newList = FastList.newInstance ();
    newList.addAll (this.nopks);
    return newList;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="578" endline="580">
public int getFieldsSize () {
    return this.fields.size ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="582" endline="584">
public Iterator < ModelField > getFieldsIterator () {
    return this.fields.iterator ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="586" endline="588">
public List < ModelField > getFieldsUnmodifiable () {
    return Collections.unmodifiableList (this.fields);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="591" endline="595">
public String getColNameOrAlias (String fieldName) {
    ModelField modelField = this.getField (fieldName);
    String fieldString = modelField.getColName ();
    return fieldString;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="597" endline="610">
public ModelField getField (String fieldName) {
    if (fieldName == null) return null;

    if (fieldsMap == null) {
        createFieldsMap ();
    }
    ModelField modelField = fieldsMap.get (fieldName);
    if (modelField == null) {
        createFieldsMap ();
        modelField = fieldsMap.get (fieldName);
    }
    return modelField;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="612" endline="619">
protected synchronized void createFieldsMap () {
    Map < String, ModelField > tempMap = FastMap.newInstance ();
    for (int i = 0;
    i < fields.size (); i ++) {
        ModelField field = fields.get (i);
        tempMap.put (field.name, field);
    }
    fieldsMap = tempMap;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="621" endline="631">
public void addField (ModelField field) {
    if (field == null) return;

    field.setModelEntity (this);
    this.fields.add (field);
    if (field.isPk) {
        pks.add (field);
    } else {
        nopks.add (field);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="633" endline="645">
public ModelField removeField (int index) {
    ModelField field = null;
    field = fields.remove (index);
    if (field == null) return null;

    if (field.isPk) {
        pks.remove (field);
    } else {
        nopks.remove (field);
    }
    return field;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="647" endline="666">
public ModelField removeField (String fieldName) {
    if (fieldName == null) return null;

    ModelField field = null;
    for (int i = 0;
    i < fields.size (); i ++) {
        field = fields.get (i);
        if (field.name.equals (fieldName)) {
            fields.remove (i);
            if (field.isPk) {
                pks.remove (field);
            } else {
                nopks.remove (field);
            }
        }
        field = null;
    }
    return field;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="668" endline="670">
public List < String > getAllFieldNames () {
    return getFieldNamesFromFieldVector (fields);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="672" endline="674">
public List < String > getPkFieldNames () {
    return getFieldNamesFromFieldVector (pks);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="676" endline="678">
public List < String > getNoPkFieldNames () {
    return getFieldNamesFromFieldVector (nopks);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="680" endline="682">
public List < String > getFieldNamesFromFieldVector (ModelField...modelFields) {
    return getFieldNamesFromFieldVector (Arrays.asList (modelFields));
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="684" endline="692">
public List < String > getFieldNamesFromFieldVector (List < ModelField > modelFields) {
    List < String > nameList = FastList.newInstance ();
    if (modelFields == null || modelFields.size () <= 0) return nameList;

    for (ModelField field : modelFields) {
        nameList.add (field.name);
    }
    return nameList;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="694" endline="696">
public int getRelationsSize () {
    return this.relations.size ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="698" endline="708">
public int getRelationsOneSize () {
    int numRels = 0;
    Iterator < ModelRelation > relationsIter = this.getRelationsIterator ();
    while (relationsIter.hasNext ()) {
        ModelRelation modelRelation = relationsIter.next ();
        if ("one".equals (modelRelation.getType ())) {
            numRels ++;
        }
    }
    return numRels;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="710" endline="712">
public ModelRelation getRelation (int index) {
    return this.relations.get (index);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="714" endline="716">
public Iterator < ModelRelation > getRelationsIterator () {
    return this.relations.iterator ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="718" endline="732">
public List < ModelRelation > getRelationsList (boolean includeOne, boolean includeOneNoFk, boolean includeMany) {
    List < ModelRelation > relationsList = FastList.newInstance ();
    Iterator < ModelRelation > allIter = this.getRelationsIterator ();
    while (allIter.hasNext ()) {
        ModelRelation modelRelation = allIter.next ();
        if (includeOne && "one".equals (modelRelation.getType ())) {
            relationsList.add (modelRelation);
        } else if (includeOneNoFk && "one-nofk".equals (modelRelation.getType ())) {
            relationsList.add (modelRelation);
        } else if (includeMany && "many".equals (modelRelation.getType ())) {
            relationsList.add (modelRelation);
        }

    }
    return relationsList;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="734" endline="736">
public List < ModelRelation > getRelationsOneList () {
    return getRelationsList (true, true, false);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="738" endline="740">
public List < ModelRelation > getRelationsManyList () {
    return getRelationsList (false, false, true);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="742" endline="748">
public ModelRelation getRelation (String relationName) {
    if (relationName == null) return null;

    for (ModelRelation relation : relations) {
        if (relationName.equals (relation.title + relation.relEntityName)) return relation;

    }
    return null;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="750" endline="753">
public void addRelation (ModelRelation relation) {
    relation.setModelEntity (this);
    this.relations.add (relation);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="755" endline="757">
public ModelRelation removeRelation (int index) {
    return this.relations.remove (index);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="759" endline="761">
public int getIndexesSize () {
    return this.indexes.size ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="763" endline="765">
public ModelIndex getIndex (int index) {
    return this.indexes.get (index);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="767" endline="769">
public Iterator < ModelIndex > getIndexesIterator () {
    return this.indexes.iterator ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="771" endline="777">
public ModelIndex getIndex (String indexName) {
    if (indexName == null) return null;

    for (ModelIndex index : indexes) {
        if (indexName.equals (index.getName ())) return index;

    }
    return null;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="779" endline="782">
public void addIndex (ModelIndex index) {
    index.setModelEntity (this);
    this.indexes.add (index);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="784" endline="786">
public ModelIndex removeIndex (int index) {
    return this.indexes.remove (index);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="788" endline="790">
public int getViewEntitiesSize () {
    return this.viewEntities.size ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="792" endline="794">
public Iterator < String > getViewConvertorsIterator () {
    return this.viewEntities.iterator ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="796" endline="798">
public void addViewEntity (ModelViewEntity view) {
    this.viewEntities.add (view.getEntityName ());
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="800" endline="804">
public List < ? extends Map < String, Object > > convertToViewValues (String viewEntityName, GenericEntity entity) {
    if (entity == null || entity == GenericEntity.NULL_ENTITY || entity == GenericValue.NULL_VALUE) return UtilMisc.toList (entity);

    ModelViewEntity view = (ModelViewEntity) entity.getDelegator ().getModelEntity (viewEntityName);
    return view.convert (getEntityName (), entity);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="806" endline="808">
public boolean removeViewEntity (String viewEntityName) {
    return this.viewEntities.remove (viewEntityName);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="810" endline="812">
public boolean removeViewEntity (ModelViewEntity viewEntity) {
    return removeViewEntity (viewEntity.getEntityName ());
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="814" endline="816">
public String nameString (List < ModelField > flds) {
    return nameString (flds, ", ", "");
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="818" endline="834">
public String nameString (List < ModelField > flds, String separator, String afterLast) {
    StringBuilder returnString = new StringBuilder ();
    if (flds.size () < 1) {
        return "";
    }
    int i = 0;
    for (; i < flds.size () - 1; i ++) {
        returnString.append (flds.get (i).name);
        returnString.append (separator);
    }
    returnString.append (flds.get (i).name);
    returnString.append (afterLast);
    return returnString.toString ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="836" endline="838">
public String typeNameString (ModelField...flds) {
    return typeNameString (Arrays.asList (flds));
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="840" endline="861">
public String typeNameString (List < ModelField > flds) {
    StringBuilder returnString = new StringBuilder ();
    if (flds.size () < 1) {
        return "";
    }
    int i = 0;
    for (; i < flds.size () - 1; i ++) {
        ModelField curField = flds.get (i);
        returnString.append (curField.type);
        returnString.append (" ");
        returnString.append (curField.name);
        returnString.append (", ");
    }
    ModelField curField = flds.get (i);
    returnString.append (curField.type);
    returnString.append (" ");
    returnString.append (curField.name);
    return returnString.toString ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="863" endline="865">
public String fieldNameString () {
    return fieldNameString (", ", "");
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="867" endline="869">
public String fieldNameString (String separator, String afterLast) {
    return nameString (fields, separator, afterLast);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="871" endline="873">
public String fieldTypeNameString () {
    return typeNameString (fields);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="875" endline="877">
public String primKeyClassNameString () {
    return typeNameString (pks);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="879" endline="881">
public String pkNameString () {
    return pkNameString (", ", "");
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="883" endline="885">
public String pkNameString (String separator, String afterLast) {
    return nameString (pks, separator, afterLast);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="887" endline="889">
public String nonPkNullList () {
    return fieldsStringList (fields, "null", ", ", false, true);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="892" endline="894">
public String fieldsStringList (String eachString, String separator, ModelField...flds) {
    return fieldsStringList (Arrays.asList (flds), eachString, separator, false, false);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="896" endline="898">
public StringBuilder fieldsStringList (StringBuilder sb, String eachString, String separator, ModelField...flds) {
    return fieldsStringList (Arrays.asList (flds), sb, eachString, separator, false, false);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="901" endline="903">
public String fieldsStringList (List < ModelField > flds, String eachString, String separator) {
    return fieldsStringList (flds, eachString, separator, false, false);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="905" endline="907">
public StringBuilder fieldsStringList (List < ModelField > flds, StringBuilder sb, String eachString, String separator) {
    return fieldsStringList (flds, sb, eachString, separator, false, false);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="910" endline="912">
public String fieldsStringList (String eachString, String separator, boolean appendIndex, ModelField...flds) {
    return fieldsStringList (Arrays.asList (flds), eachString, separator, appendIndex, false);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="914" endline="916">
public StringBuilder fieldsStringList (StringBuilder sb, String eachString, String separator, boolean appendIndex, ModelField...flds) {
    return fieldsStringList (Arrays.asList (flds), sb, eachString, separator, appendIndex, false);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="919" endline="921">
public String fieldsStringList (List < ModelField > flds, String eachString, String separator, boolean appendIndex) {
    return fieldsStringList (flds, eachString, separator, appendIndex, false);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="923" endline="925">
public StringBuilder fieldsStringList (List < ModelField > flds, StringBuilder sb, String eachString, String separator, boolean appendIndex) {
    return fieldsStringList (flds, sb, eachString, separator, appendIndex, false);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="928" endline="930">
public String fieldsStringList (String eachString, String separator, boolean appendIndex, boolean onlyNonPK, ModelField...flds) {
    return fieldsStringList (Arrays.asList (flds), eachString, separator, appendIndex, onlyNonPK);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="932" endline="934">
public StringBuilder fieldsStringList (StringBuilder sb, String eachString, String separator, boolean appendIndex, boolean onlyNonPK, ModelField...flds) {
    return fieldsStringList (Arrays.asList (flds), sb, eachString, separator, appendIndex, onlyNonPK);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="937" endline="939">
public String fieldsStringList (List < ModelField > flds, String eachString, String separator, boolean appendIndex, boolean onlyNonPK) {
    return fieldsStringList (flds, new StringBuilder (), eachString, separator, appendIndex, onlyNonPK).toString ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="941" endline="955">
public StringBuilder fieldsStringList (List < ModelField > flds, StringBuilder sb, String eachString, String separator, boolean appendIndex, boolean onlyNonPK) {
    if (flds.size () < 1) {
        return sb;
    }
    int i = 0;
    for (; i < flds.size (); i ++) {
        if (onlyNonPK && flds.get (i).isPk) continue;

        sb.append (eachString);
        if (appendIndex) sb.append (i + 1);

        if (i < flds.size () - 1) sb.append (separator);

    }
    return sb;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="958" endline="960">
public String colNameString (ModelField...flds) {
    return colNameString (new StringBuilder (), "", flds).toString ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="962" endline="964">
public StringBuilder colNameString (StringBuilder sb, String prefix, ModelField...flds) {
    return colNameString (Arrays.asList (flds), sb, prefix);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="967" endline="969">
public String colNameString (List < ModelField > flds) {
    return colNameString (flds, new StringBuilder (), "", ", ", "", false).toString ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="971" endline="973">
public StringBuilder colNameString (List < ModelField > flds, StringBuilder sb, String prefix) {
    return colNameString (flds, sb, prefix, ", ", "", false);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="976" endline="978">
public String colNameString (String separator, String afterLast, boolean alias, ModelField...flds) {
    return colNameString (Arrays.asList (flds), new StringBuilder (), "", separator, afterLast, alias).toString ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="980" endline="982">
public StringBuilder colNameString (StringBuilder sb, String prefix, String separator, String afterLast, boolean alias, ModelField...flds) {
    return colNameString (Arrays.asList (flds), sb, prefix, separator, afterLast, alias);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="985" endline="987">
public String colNameString (List < ModelField > flds, String separator, String afterLast, boolean alias) {
    return colNameString (flds, new StringBuilder (), "", separator, afterLast, alias).toString ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="989" endline="1006">
public StringBuilder colNameString (List < ModelField > flds, StringBuilder sb, String prefix, String separator, String afterLast, boolean alias) {
    if (flds.size () < 1) {
        return sb;
    }
    sb.append (prefix);
    Iterator < ModelField > fldsIt = flds.iterator ();
    while (fldsIt.hasNext ()) {
        ModelField field = fldsIt.next ();
        sb.append (field.colName);
        if (fldsIt.hasNext ()) {
            sb.append (separator);
        }
    }
    sb.append (afterLast);
    return sb;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1008" endline="1010">
public String classNameString (ModelField...flds) {
    return classNameString (Arrays.asList (flds));
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1012" endline="1014">
public String classNameString (List < ModelField > flds) {
    return classNameString (flds, ", ", "");
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1016" endline="1018">
public String classNameString (String separator, String afterLast, ModelField...flds) {
    return classNameString (Arrays.asList (flds), separator, afterLast);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1020" endline="1036">
public String classNameString (List < ModelField > flds, String separator, String afterLast) {
    StringBuilder returnString = new StringBuilder ();
    if (flds.size () < 1) {
        return "";
    }
    int i = 0;
    for (; i < flds.size () - 1; i ++) {
        returnString.append (ModelUtil.upperFirstChar (flds.get (i).name));
        returnString.append (separator);
    }
    returnString.append (ModelUtil.upperFirstChar (flds.get (i).name));
    returnString.append (afterLast);
    return returnString.toString ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1038" endline="1040">
public String finderQueryString (ModelField...flds) {
    return finderQueryString (Arrays.asList (flds));
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1042" endline="1061">
public String finderQueryString (List < ModelField > flds) {
    StringBuilder returnString = new StringBuilder ();
    if (flds.size () < 1) {
        return "";
    }
    int i = 0;
    for (; i < flds.size () - 1; i ++) {
        returnString.append (flds.get (i).colName);
        returnString.append (" like {");
        returnString.append (i);
        returnString.append ("} AND ");
    }
    returnString.append (flds.get (i).colName);
    returnString.append (" like {");
    returnString.append (i);
    returnString.append ("}");
    return returnString.toString ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1063" endline="1065">
public String httpArgList (ModelField...flds) {
    return httpArgList (Arrays.asList (flds));
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1067" endline="1091">
public String httpArgList (List < ModelField > flds) {
    StringBuilder returnString = new StringBuilder ();
    if (flds.size () < 1) {
        return "";
    }
    int i = 0;
    for (; i < flds.size () - 1; i ++) {
        returnString.append ("\"");
        returnString.append (tableName);
        returnString.append ("_");
        returnString.append (flds.get (i).colName);
        returnString.append ("=\" + ");
        returnString.append (flds.get (i).name);
        returnString.append (" + \"&\" + ");
    }
    returnString.append ("\"");
    returnString.append (tableName);
    returnString.append ("_");
    returnString.append (flds.get (i).colName);
    returnString.append ("=\" + ");
    returnString.append (flds.get (i).name);
    return returnString.toString ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1093" endline="1095">
public String httpArgListFromClass (ModelField...flds) {
    return httpArgListFromClass (Arrays.asList (flds));
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1097" endline="1127">
public String httpArgListFromClass (List < ModelField > flds) {
    StringBuilder returnString = new StringBuilder ();
    if (flds.size () < 1) {
        return "";
    }
    int i = 0;
    for (; i < flds.size () - 1; i ++) {
        returnString.append ("\"");
        returnString.append (tableName);
        returnString.append ("_");
        returnString.append (flds.get (i).colName);
        returnString.append ("=\" + ");
        returnString.append (ModelUtil.lowerFirstChar (entityName));
        returnString.append (".get");
        returnString.append (ModelUtil.upperFirstChar (flds.get (i).name));
        returnString.append ("() + \"&\" + ");
    }
    returnString.append ("\"");
    returnString.append (tableName);
    returnString.append ("_");
    returnString.append (flds.get (i).colName);
    returnString.append ("=\" + ");
    returnString.append (ModelUtil.lowerFirstChar (entityName));
    returnString.append (".get");
    returnString.append (ModelUtil.upperFirstChar (flds.get (i).name));
    returnString.append ("()");
    return returnString.toString ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1129" endline="1131">
public String httpArgListFromClass (String entityNameSuffix, ModelField...flds) {
    return httpArgListFromClass (Arrays.asList (flds), entityNameSuffix);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1133" endline="1165">
public String httpArgListFromClass (List < ModelField > flds, String entityNameSuffix) {
    StringBuilder returnString = new StringBuilder ();
    if (flds.size () < 1) {
        return "";
    }
    int i = 0;
    for (; i < flds.size () - 1; i ++) {
        returnString.append ("\"");
        returnString.append (tableName);
        returnString.append ("_");
        returnString.append (flds.get (i).colName);
        returnString.append ("=\" + ");
        returnString.append (ModelUtil.lowerFirstChar (entityName));
        returnString.append (entityNameSuffix);
        returnString.append (".get");
        returnString.append (ModelUtil.upperFirstChar (flds.get (i).name));
        returnString.append ("() + \"&\" + ");
    }
    returnString.append ("\"");
    returnString.append (tableName);
    returnString.append ("_");
    returnString.append (flds.get (i).colName);
    returnString.append ("=\" + ");
    returnString.append (ModelUtil.lowerFirstChar (entityName));
    returnString.append (entityNameSuffix);
    returnString.append (".get");
    returnString.append (ModelUtil.upperFirstChar (flds.get (i).name));
    returnString.append ("()");
    return returnString.toString ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1167" endline="1169">
public String httpRelationArgList (ModelRelation relation, ModelField...flds) {
    return httpRelationArgList (Arrays.asList (flds), relation);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1171" endline="1213">
public String httpRelationArgList (List < ModelField > flds, ModelRelation relation) {
    StringBuilder returnString = new StringBuilder ();
    if (flds.size () < 1) {
        return "";
    }
    int i = 0;
    for (; i < flds.size () - 1; i ++) {
        ModelKeyMap keyMap = relation.findKeyMapByRelated (flds.get (i).name);
        if (keyMap != null) {
            returnString.append ("\"");
            returnString.append (tableName);
            returnString.append ("_");
            returnString.append (flds.get (i).colName);
            returnString.append ("=\" + ");
            returnString.append (ModelUtil.lowerFirstChar (relation.mainEntity.entityName));
            returnString.append (".get");
            returnString.append (ModelUtil.upperFirstChar (keyMap.fieldName));
            returnString.append ("() + \"&\" + ");
        } else {
            Debug.logWarning ("-- -- ENTITYGEN ERROR:httpRelationArgList: Related Key in Key Map not found for name: " + flds.get (i).name + " related entity: " + relation.relEntityName + " main entity: " + relation.mainEntity.entityName + " type: " + relation.type, module);
        }
    }
    ModelKeyMap keyMap = relation.findKeyMapByRelated (flds.get (i).name);
    if (keyMap != null) {
        returnString.append ("\"");
        returnString.append (tableName);
        returnString.append ("_");
        returnString.append (flds.get (i).colName);
        returnString.append ("=\" + ");
        returnString.append (ModelUtil.lowerFirstChar (relation.mainEntity.entityName));
        returnString.append (".get");
        returnString.append (ModelUtil.upperFirstChar (keyMap.fieldName));
        returnString.append ("()");
    } else {
        Debug.logWarning ("-- -- ENTITYGEN ERROR:httpRelationArgList: Related Key in Key Map not found for name: " + flds.get (i).name + " related entity: " + relation.relEntityName + " main entity: " + relation.mainEntity.entityName + " type: " + relation.type, module);
    }
    return returnString.toString ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1231" endline="1233">
public String typeNameStringRelatedNoMapped (ModelRelation relation, ModelField...flds) {
    return typeNameStringRelatedNoMapped (Arrays.asList (flds), relation);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1235" endline="1259">
public String typeNameStringRelatedNoMapped (List < ModelField > flds, ModelRelation relation) {
    StringBuilder returnString = new StringBuilder ();
    if (flds.size () < 1) {
        return "";
    }
    int i = 0;
    if (relation.findKeyMapByRelated (flds.get (i).name) == null) {
        returnString.append (flds.get (i).type);
        returnString.append (" ");
        returnString.append (flds.get (i).name);
    }
    i ++;
    for (; i < flds.size (); i ++) {
        if (relation.findKeyMapByRelated (flds.get (i).name) == null) {
            if (returnString.length () > 0) returnString.append (", ");

            returnString.append (flds.get (i).type);
            returnString.append (" ");
            returnString.append (flds.get (i).name);
        }
    }
    return returnString.toString ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1261" endline="1263">
public String typeNameStringRelatedAndMain (ModelRelation relation, ModelField...flds) {
    return typeNameStringRelatedAndMain (Arrays.asList (flds), relation);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1265" endline="1290">
public String typeNameStringRelatedAndMain (List < ModelField > flds, ModelRelation relation) {
    StringBuilder returnString = new StringBuilder ();
    if (flds.size () < 1) {
        return "";
    }
    int i = 0;
    for (; i < flds.size () - 1; i ++) {
        ModelKeyMap keyMap = relation.findKeyMapByRelated (flds.get (i).name);
        if (keyMap != null) {
            returnString.append (keyMap.fieldName);
            returnString.append (", ");
        } else {
            returnString.append (flds.get (i).name);
            returnString.append (", ");
        }
    }
    ModelKeyMap keyMap = relation.findKeyMapByRelated (flds.get (i).name);
    if (keyMap != null) returnString.append (keyMap.fieldName);
    else returnString.append (flds.get (i).name);

    return returnString.toString ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1292" endline="1327">
public int compareTo (ModelEntity otherModelEntity) {
    return this.getEntityName ().compareTo (otherModelEntity.getEntityName ());
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1329" endline="1331">
public void convertFieldMapInPlace (Map < String, Object > inContext, Delegator delegator) {
    convertFieldMapInPlace (inContext, delegator.getModelFieldTypeReader (this));
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1332" endline="1342">
public void convertFieldMapInPlace (Map < String, Object > inContext, ModelFieldTypeReader modelFieldTypeReader) {
    Iterator < ModelField > modelFields = this.getFieldsIterator ();
    while (modelFields.hasNext ()) {
        ModelField modelField = modelFields.next ();
        String fieldName = modelField.getName ();
        Object oldValue = inContext.get (fieldName);
        if (oldValue != null) {
            inContext.put (fieldName, this.convertFieldValue (modelField, oldValue, modelFieldTypeReader, inContext));
        }
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1344" endline="1351">
public Object convertFieldValue (String fieldName, Object value, Delegator delegator) {
    ModelField modelField = this.getField (fieldName);
    if (modelField == null) {
        String errMsg = "Could not convert field value: could not find an entity field for the name: [" + fieldName + "] on the [" + this.getEntityName () + "] entity.";
        throw new IllegalArgumentException (errMsg);
    }
    return convertFieldValue (modelField, value, delegator);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1353" endline="1372">
public Object convertFieldValue (ModelField modelField, Object value, Delegator delegator) {
    if (value == null || value == GenericEntity.NULL_FIELD) {
        return null;
    }
    String fieldJavaType = null;
    try {
        fieldJavaType = delegator.getEntityFieldType (this, modelField.getType ()).getJavaType ();
    } catch (GenericEntityException e) {
        String errMsg = "Could not convert field value: could not find Java type for the field: [" + modelField.getName () + "] on the [" + this.getEntityName () + "] entity: " + e.toString ();
        Debug.logError (e, errMsg, module);
        throw new IllegalArgumentException (errMsg);
    }
    try {
        return ObjectType.simpleTypeConvert (value, fieldJavaType, null, null, false);
    } catch (GeneralException e) {
        String errMsg = "Could not convert field value for the field: [" + modelField.getName () + "] on the [" + this.getEntityName () + "] entity to the [" + fieldJavaType + "] type for the value [" + value + "]: " + e.toString ();
        Debug.logError (e, errMsg, module);
        throw new IllegalArgumentException (errMsg);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1379" endline="1382">
public Object convertFieldValue (ModelField modelField, Object value, Delegator delegator, Map < String, ? extends Object > context) {
    ModelFieldTypeReader modelFieldTypeReader = delegator.getModelFieldTypeReader (this);
    return this.convertFieldValue (modelField, value, modelFieldTypeReader, context);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1388" endline="1400">
public Object convertFieldValue (ModelField modelField, Object value, ModelFieldTypeReader modelFieldTypeReader, Map < String, ? extends Object > context) {
    if (value == null || value == GenericEntity.NULL_FIELD) {
        return null;
    }
    String fieldJavaType = modelFieldTypeReader.getModelFieldType (modelField.getType ()).getJavaType ();
    try {
        return ObjectType.simpleTypeConvert (value, fieldJavaType, null, (TimeZone) context.get ("timeZone"), (Locale) context.get ("locale"), true);
    } catch (GeneralException e) {
        String errMsg = "Could not convert field value for the field: [" + modelField.getName () + "] on the [" + this.getEntityName () + "] entity to the [" + fieldJavaType + "] type for the value [" + value + "]: " + e.toString ();
        Debug.logError (e, errMsg, module);
        throw new IllegalArgumentException (errMsg);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1405" endline="1407">
public boolean getNoAutoStamp () {
    return this.noAutoStamp;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1412" endline="1414">
public void setNoAutoStamp (boolean noAutoStamp) {
    this.noAutoStamp = noAutoStamp;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1417" endline="1419">
public String toString () {
    return "ModelEntity[" + getEntityName () + "]";
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1421" endline="1522">
public Element toXmlElement (Document document, String packageName) {
    if (UtilValidate.isNotEmpty (this.getPackageName ()) && ! packageName.equals (this.getPackageName ())) {
        Debug.logWarning ("Export EntityModel XML Element [" + this.getEntityName () + "] with a NEW package - " + packageName, module);
    }
    Element root = document.createElement ("entity");
    root.setAttribute ("entity-name", this.getEntityName ());
    if (! this.getEntityName ().equals (ModelUtil.dbNameToClassName (this.getPlainTableName ())) || ! ModelUtil.javaNameToDbName (this.getEntityName ()).equals (this.getPlainTableName ())) {
        root.setAttribute ("table-name", this.getPlainTableName ());
    }
    root.setAttribute ("package-name", packageName);
    if (UtilValidate.isNotEmpty (this.getDefaultResourceName ())) {
        root.setAttribute ("default-resource-name", this.getDefaultResourceName ());
    }
    if (UtilValidate.isNotEmpty (this.getDependentOn ())) {
        root.setAttribute ("dependent-on", this.getDependentOn ());
    }
    if (this.getDoLock ()) {
        root.setAttribute ("enable-lock", "true");
    }
    if (this.getNoAutoStamp ()) {
        root.setAttribute ("no-auto-stamp", "true");
    }
    if (this.getNeverCache ()) {
        root.setAttribute ("never-cache", "true");
    }
    if (this.getNeverCheck ()) {
        root.setAttribute ("never-check", "true");
    }
    if (! this.getAutoClearCache ()) {
        root.setAttribute ("auto-clear-cache", "false");
    }
    if (this.getSequenceBankSize () != null) {
        root.setAttribute ("sequence-bank-size", this.getSequenceBankSize ().toString ());
    }
    if (UtilValidate.isNotEmpty (this.getTitle ())) {
        root.setAttribute ("title", this.getTitle ());
    }
    if (UtilValidate.isNotEmpty (this.getCopyright ())) {
        root.setAttribute ("copyright", this.getCopyright ());
    }
    if (UtilValidate.isNotEmpty (this.getAuthor ())) {
        root.setAttribute ("author", this.getAuthor ());
    }
    if (UtilValidate.isNotEmpty (this.getVersion ())) {
        root.setAttribute ("version", this.getVersion ());
    }
    if (UtilValidate.isNotEmpty (this.getDescription ())) {
        UtilXml.addChildElementValue (root, "description", this.getDescription (), document);
    }
    Iterator < ModelField > fieldIter = this.getFieldsIterator ();
    while (fieldIter != null && fieldIter.hasNext ()) {
        ModelField field = fieldIter.next ();
        if (! field.getIsAutoCreatedInternal ()) {
            root.appendChild (field.toXmlElement (document));
        }
    }
    Iterator < ModelField > pkIter = this.getPksIterator ();
    while (pkIter != null && pkIter.hasNext ()) {
        ModelField pk = pkIter.next ();
        Element pkey = document.createElement ("prim-key");
        pkey.setAttribute ("field", pk.getName ());
        root.appendChild (pkey);
    }
    Iterator < ModelRelation > relIter = this.getRelationsIterator ();
    while (relIter != null && relIter.hasNext ()) {
        ModelRelation rel = relIter.next ();
        root.appendChild (rel.toXmlElement (document));
    }
    Iterator < ModelIndex > idxIter = this.getIndexesIterator ();
    while (idxIter != null && idxIter.hasNext ()) {
        ModelIndex idx = idxIter.next ();
        root.appendChild (idx.toXmlElement (document));
    }
    return root;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1524" endline="1526">
public Element toXmlElement (Document document) {
    return this.toXmlElement (document, this.getPackageName ());
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1541" endline="1546">
public void writeEoModelText (PrintWriter writer, String entityPrefix, String helperName, Set < String > entityNameIncludeSet, ModelReader entityModelReader) throws GenericEntityException {
    if (entityPrefix == null) entityPrefix = "";

    if (helperName == null) helperName = "localderby";

    UtilPlist.writePlistPropertyMap (this.createEoModelMap (entityPrefix, helperName, entityNameIncludeSet, entityModelReader), 0, writer, false);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntity.java" startline="1549" endline="1674">
public Map < String, Object > createEoModelMap (String entityPrefix, String helperName, Set < String > entityNameIncludeSet, ModelReader entityModelReader) throws GenericEntityException {
    final boolean useRelationshipNames = false;
    ModelFieldTypeReader modelFieldTypeReader = ModelFieldTypeReader.getModelFieldTypeReader (helperName);
    Map < String, Object > topLevelMap = FastMap.newInstance ();
    topLevelMap.put ("name", this.getEntityName ());
    topLevelMap.put ("externalName", this.getTableName (helperName));
    topLevelMap.put ("className", "EOGenericRecord");
    List < String > classPropertiesList = FastList.newInstance ();
    topLevelMap.put ("classProperties", classPropertiesList);
    for (ModelField field : this.fields) {
        if (field.getIsAutoCreatedInternal ()) continue;

        if (field.getIsPk ()) {
            classPropertiesList.add (field.getName () + "*");
        } else {
            classPropertiesList.add (field.getName ());
        }
    }
    for (ModelRelation relationship : this.relations) {
        if (! entityNameIncludeSet.contains (relationship.getRelEntityName ())) continue;

        if (useRelationshipNames || relationship.isAutoRelation ()) {
            classPropertiesList.add (relationship.getCombinedName ());
        }
    }
    List < Map < String, Object > > attributesList = FastList.newInstance ();
    topLevelMap.put ("attributes", attributesList);
    for (ModelField field : this.fields) {
        if (field.getIsAutoCreatedInternal ()) continue;

        ModelFieldType fieldType = modelFieldTypeReader.getModelFieldType (field.getType ());
        Map < String, Object > attributeMap = FastMap.newInstance ();
        attributesList.add (attributeMap);
        if (field.getIsPk ()) {
            attributeMap.put ("name", field.getName () + "*");
        } else {
            attributeMap.put ("name", field.getName ());
        }
        attributeMap.put ("columnName", field.getColName ());
        attributeMap.put ("valueClassName", fieldType.getJavaType ());
        String sqlType = fieldType.getSqlType ();
        if (sqlType.indexOf ("(") >= 0) {
            attributeMap.put ("externalType", sqlType.substring (0, sqlType.indexOf ("(")));
            String widthStr = sqlType.substring (sqlType.indexOf ("(") + 1, sqlType.indexOf (")"));
            if (widthStr.indexOf (",") >= 0) {
                attributeMap.put ("width", widthStr.substring (0, widthStr.indexOf (",")));
                attributeMap.put ("precision", widthStr.substring (widthStr.indexOf (",") + 1));
            } else {
                attributeMap.put ("width", widthStr);
            }
        } else {
            attributeMap.put ("externalType", sqlType);
        }
    }
    List < String > primaryKeyAttributesList = FastList.newInstance ();
    topLevelMap.put ("primaryKeyAttributes", primaryKeyAttributesList);
    for (ModelField pkField : this.pks) {
        primaryKeyAttributesList.add (pkField.getName ());
    }
    List < Map < String, Object > > relationshipsMapList = FastList.newInstance ();
    for (ModelRelation relationship : this.relations) {
        if (entityNameIncludeSet.contains (relationship.getRelEntityName ())) {
            ModelEntity relEntity = entityModelReader.getModelEntity (relationship.getRelEntityName ());
            Map < String, Object > relationshipMap = FastMap.newInstance ();
            relationshipsMapList.add (relationshipMap);
            if (useRelationshipNames || relationship.isAutoRelation ()) {
                relationshipMap.put ("name", relationship.getCombinedName ());
            } else {
                relationshipMap.put ("name", relationship.getKeyMapsIterator ().next ().getFieldName ());
            }
            relationshipMap.put ("destination", relationship.getRelEntityName ());
            if ("many".equals (relationship.getType ())) {
                relationshipMap.put ("isToMany", "Y");
                relationshipMap.put ("isMandatory", "N");
            } else {
                relationshipMap.put ("isToMany", "N");
                relationshipMap.put ("isMandatory", "Y");
            }
            relationshipMap.put ("joinSemantic", "EOInnerJoin");
            List < Map < String, Object > > joinsMapList = FastList.newInstance ();
            relationshipMap.put ("joins", joinsMapList);
            for (ModelKeyMap keyMap : relationship.getKeyMapsClone ()) {
                Map < String, Object > joinsMap = FastMap.newInstance ();
                joinsMapList.add (joinsMap);
                ModelField thisField = this.getField (keyMap.getFieldName ());
                if (thisField != null && thisField.getIsPk ()) {
                    joinsMap.put ("sourceAttribute", keyMap.getFieldName () + "*");
                } else {
                    joinsMap.put ("sourceAttribute", keyMap.getFieldName ());
                }
                ModelField relField = null;
                if (relEntity != null) relField = relEntity.getField (keyMap.getRelFieldName ());

                if (relField != null && relField.getIsPk ()) {
                    joinsMap.put ("destinationAttribute", keyMap.getRelFieldName () + "*");
                } else {
                    joinsMap.put ("destinationAttribute", keyMap.getRelFieldName ());
                }
            }
        }
    }
    if (relationshipsMapList.size () > 0) {
        topLevelMap.put ("relationships", relationshipsMapList);
    }
    return topLevelMap;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntityChecker.java" startline="42" endline="284">
public static void checkEntities (Delegator delegator, List < String > warningList) throws GenericEntityException {
    ModelReader reader = delegator.getModelReader ();
    TreeSet < String > reservedWords = new TreeSet < String > ();
    initReservedWords (reservedWords);
    Map < String, TreeSet < String > > packages = FastMap.newInstance ();
    TreeSet < String > packageNames = new TreeSet < String > ();
    TreeSet < String > tableNames = new TreeSet < String > ();
    Collection < String > ec = reader.getEntityNames ();
    TreeSet < String > entityNames = new TreeSet < String > (ec);
    for (String eName : ec) {
        ModelEntity ent = reader.getModelEntity (eName);
        if (UtilValidate.isNotEmpty (ent.getPlainTableName ())) tableNames.add (ent.getPlainTableName ());

        TreeSet < String > entities = packages.get (ent.getPackageName ());
        if (entities == null) {
            entities = new TreeSet < String > ();
            packages.put (ent.getPackageName (), entities);
            packageNames.add (ent.getPackageName ());
        }
        entities.add (eName);
    }
    int numberShowed = 0;
    TreeSet < String > fkNames = new TreeSet < String > ();
    TreeSet < String > indexNames = new TreeSet < String > ();
    for (String pName : packageNames) {
        TreeSet < String > entities = packages.get (pName);
        for (String entityName : entities) {
            String helperName = delegator.getEntityHelperName (entityName);
            String groupName = delegator.getEntityGroupName (entityName);
            ModelEntity entity = reader.getModelEntity (entityName);
            if (helperName == null) {
                if (UtilValidate.isEmpty (groupName)) {
                    warningList.add ("[GroupNotFound] No Group Name found for entity " + entity.getEntityName () + ".");
                } else {
                    warningList.add ("[HelperNotFound] No Helper (DataSource) definition found for entity [" + entity.getEntityName () + "] because there is no helper (datasource) configured for the entity group it is in: [" + groupName + "]");
                }
            }
            if (entity.getPlainTableName () != null && entity.getPlainTableName ().length () > 30) {
                warningList.add ("[TableNameGT30] Table name [" + entity.getPlainTableName () + "] of entity " + entity.getEntityName () + " is longer than 30 characters.");
            }
            if (entity.getPlainTableName () != null && reservedWords.contains (entity.getPlainTableName ().toUpperCase ())) {
                warningList.add ("[TableNameRW] Table name [" + entity.getPlainTableName () + "] of entity " + entity.getEntityName () + " is a reserved word.");
            }
            if (entity.getNeverCheck ()) {
                continue;
            }
            TreeSet < String > ufields = new TreeSet < String > ();
            Iterator < ModelField > fieldIter = entity.getFieldsIterator ();
            while (fieldIter.hasNext ()) {
                ModelField field = fieldIter.next ();
                ModelFieldType type = delegator.getEntityFieldType (entity, field.getType ());
                if (ufields.contains (field.getName ())) {
                    warningList.add ("[FieldNotUnique] Field [" + field.getName () + " of entity " + entity.getEntityName () + " is not unique for that entity.");
                } else {
                    ufields.add (field.getName ());
                }
                if (field.getColName ().length () > 30 && ! (entity instanceof ModelViewEntity)) {
                    warningList.add ("[FieldNameGT30] Column name [" + field.getColName () + "] of entity " + entity.getEntityName () + " is longer than 30 characters.");
                }
                if (field.getColName ().length () == 0) {
                    warningList.add ("[FieldNameEQ0] Column name for field name \"" + field.getName () + "\" of entity " + entity.getEntityName () + " is empty (zero length).");
                }
                if (reservedWords.contains (field.getColName ().toUpperCase ())) warningList.add ("[FieldNameRW] Column name " + field.getColName () + " of entity " + entity.getEntityName () + " is a reserved word.");

                if (type == null) {
                    StringBuilder warningMsg = new StringBuilder ();
                    warningMsg.append ("[FieldTypeNotFound] Field type " + field.getType () + " of entity " + entity.getEntityName () + " not found in field type definitions");
                    if (helperName == null) {
                        warningMsg.append (" (no helper definition found)");
                    }
                    warningMsg.append (".");
                    warningList.add (warningMsg.toString ());
                }
            }
            if (entity.getRelationsSize () > 0) {
                Iterator < ModelIndex > indexIter = entity.getIndexesIterator ();
                while (indexIter.hasNext ()) {
                    ModelIndex index = indexIter.next ();
                    if (indexNames.contains (index.getName ())) {
                        warningList.add ("[IndexDuplicateName] Index on entity " + entity.getEntityName () + " has a duplicate index-name \"" + index.getName () + "\".");
                    } else {
                        indexNames.add (index.getName ());
                    }
                    if (tableNames.contains (index.getName ())) {
                        warningList.add ("[IndexTableDupName] Index on entity " + entity.getEntityName () + " has an index-name \"" + index.getName () + "\" that is also being used as a table name.");
                    }
                    if (fkNames.contains (index.getName ())) {
                        warningList.add ("[IndexFKDupName] Index on entity " + entity.getEntityName () + " has an index-name \"" + index.getName () + "\" that is also being used as a Foreign Key name.");
                    }
                    if (index.getName ().length () > 18) {
                        warningList.add ("[IndexNameGT18] The index name " + index.getName () + " (length:" + index.getName ().length () + ") was greater than 18 characters in length for entity " + entity.getEntityName () + ".");
                    }
                }
                TreeSet < String > relations = new TreeSet < String > ();
                for (int r = 0;
                r < entity.getRelationsSize (); r ++) {
                    ModelRelation relation = entity.getRelation (r);
                    if (! entityNames.contains (relation.getRelEntityName ())) {
                        warningList.add ("[RelatedEntityNotFound] Related entity " + relation.getRelEntityName () + " of entity " + entity.getEntityName () + " not found.");
                    }
                    if (relations.contains (relation.getTitle () + relation.getRelEntityName ())) {
                        warningList.add ("[RelationNameNotUnique] Relation " + relation.getTitle () + relation.getRelEntityName () + " of entity " + entity.getEntityName () + " is not unique for that entity.");
                    } else {
                        relations.add (relation.getTitle () + relation.getRelEntityName ());
                    }
                    if (relation.getFkName ().length () > 0) {
                        if (fkNames.contains (relation.getFkName ())) {
                            warningList.add ("[RelationFkDuplicate] Relation to " + relation.getRelEntityName () + " from entity " + entity.getEntityName () + " has a duplicate fk-name \"" + relation.getFkName () + "\".");
                        } else {
                            fkNames.add (relation.getFkName ());
                        }
                        if (tableNames.contains (relation.getFkName ())) {
                            warningList.add ("[RelationFkTableDup] Relation to " + relation.getRelEntityName () + " from entity " + entity.getEntityName () + " has an fk-name \"" + relation.getFkName () + "\" that is also being used as a table name.");
                        }
                        if (indexNames.contains (relation.getFkName ())) {
                            warningList.add ("[RelationFkTableDup] Relation to " + relation.getRelEntityName () + " from entity " + entity.getEntityName () + " has an fk-name \"" + relation.getFkName () + "\" that is also being used as an index name.");
                        }
                    }
                    if (relation.getFkName ().length () > 18) {
                        warningList.add ("[RelFKNameGT18] The foreign key named " + relation.getFkName () + " (length:" + relation.getFkName ().length () + ") was greater than 18 characters in length for relation " + relation.getTitle () + relation.getRelEntityName () + " of entity " + entity.getEntityName () + ".");
                    }
                    ModelEntity relatedEntity = null;
                    try {
                        relatedEntity = reader.getModelEntity (relation.getRelEntityName ());
                    } catch (GenericEntityException e) {
                        Debug.log ("Entity referred to in relation is not defined: " + relation.getRelEntityName ());
                    }
                    if (relatedEntity != null) {
                        if ("one".equals (relation.getType ()) || "one-nofk".equals (relation.getType ())) {
                            if (relatedEntity.getPksSize () != relation.getKeyMapsSize ()) warningList.add ("[RelatedOneKeyMapsWrongSize] The number of primary keys (" + relatedEntity.getPksSize () + ") of related entity " + relation.getRelEntityName () + " does not match the number of keymaps (" + relation.getKeyMapsSize () + ") for relation of type one \"" + relation.getTitle () + relation.getRelEntityName () + "\" of entity " + entity.getEntityName () + ".");

                            Iterator < ModelField > pksIter = relatedEntity.getPksIterator ();
                            while (pksIter.hasNext ()) {
                                ModelField pk = pksIter.next ();
                                if (relation.findKeyMapByRelated (pk.getName ()) == null) {
                                    warningList.add ("[RelationOneRelatedPrimaryKeyMissing] The primary key \"" + pk.getName () + "\" of related entity " + relation.getRelEntityName () + " is missing in the keymaps for relation of type one " + relation.getTitle () + relation.getRelEntityName () + " of entity " + entity.getEntityName () + ".");
                                }
                            }
                        }
                    }
                    for (int rkm = 0;
                    rkm < relation.getKeyMapsSize (); rkm ++) {
                        ModelKeyMap keyMap = relation.getKeyMap (rkm);
                        ModelField field = entity.getField (keyMap.getFieldName ());
                        ModelField rfield = null;
                        if (relatedEntity != null) {
                            rfield = relatedEntity.getField (keyMap.getRelFieldName ());
                        }
                        if (rfield == null) {
                            warningList.add ("[RelationRelatedFieldNotFound] The field \"" + keyMap.getRelFieldName () + "\" of related entity " + relation.getRelEntityName () + " was specified in the keymaps but is not found for relation " + relation.getTitle () + relation.getRelEntityName () + " of entity " + entity.getEntityName () + ".");
                        }
                        if (field == null) {
                            warningList.add ("[RelationFieldNotFound] The field " + keyMap.getFieldName () + " was specified in the keymaps but is not found for relation " + relation.getTitle () + relation.getRelEntityName () + " of entity " + entity.getEntityName () + ".");
                        }
                        if (field != null && rfield != null) {
                            if (! field.getType ().equals (rfield.getType ()) && ! field.getType ().equals (rfield.getType () + "-ne") && ! rfield.getType ().equals (field.getType () + "-ne")) {
                                warningList.add ("[RelationFieldTypesDifferent] The field type (" + field.getType () + ") of " + field.getName () + " of entity " + entity.getEntityName () + " is not the same as field type (" + rfield.getType () + ") of " + rfield.getName () + " of entity " + relation.getRelEntityName () + " for relation " + relation.getTitle () + relation.getRelEntityName () + ".");
                            }
                        }
                    }
                }
            }
            numberShowed ++;
        }
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelEntityChecker.java" startline="505" endline="512">
public static void initReservedWords (TreeSet < String > reservedWords) {
    int asize = rwArray.length;
    Debug.log ("[initReservedWords] array length=" + asize);
    for (int i = 0;
    i < asize; i ++) {
        reservedWords.add (rwArray [i]);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="65" endline="65">
public ModelField () {
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="68" endline="70">
public ModelField (String name, String type, String colName, boolean isPk) {
    this (name, type, colName, isPk, false, false);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="72" endline="79">
public ModelField (String name, String type, String colName, boolean isPk, boolean encrypt, boolean enableAuditLog) {
    this.name = name;
    this.type = type;
    this.setColName (colName);
    this.isPk = isPk;
    this.encrypt = encrypt;
    this.enableAuditLog = enableAuditLog;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="82" endline="100">
public ModelField (Element fieldElement) {
    this.type = UtilXml.checkEmpty (fieldElement.getAttribute ("type")).intern ();
    this.name = UtilXml.checkEmpty (fieldElement.getAttribute ("name")).intern ();
    this.setColName (UtilXml.checkEmpty (fieldElement.getAttribute ("col-name")).intern ());
    this.isPk = false;
    this.encrypt = UtilXml.checkBoolean (fieldElement.getAttribute ("encrypt"), false);
    this.description = UtilXml.childElementValue (fieldElement, "description");
    this.enableAuditLog = UtilXml.checkBoolean (fieldElement.getAttribute ("enable-audit-log"), false);
    this.isNotNull = UtilXml.checkBoolean (fieldElement.getAttribute ("not-null"), false);
    this.fieldSet = UtilXml.checkEmpty (fieldElement.getAttribute ("field-set")).intern ();
    NodeList validateList = fieldElement.getElementsByTagName ("validate");
    for (int i = 0;
    i < validateList.getLength (); i ++) {
        Element element = (Element) validateList.item (i);
        this.validators.add (UtilXml.checkEmpty (element.getAttribute ("name")).intern ());
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="103" endline="111">
public ModelField (DatabaseUtil.ColumnCheckInfo ccInfo, ModelFieldTypeReader modelFieldTypeReader) {
    this.colName = ccInfo.columnName;
    this.name = ModelUtil.dbNameToVarName (this.colName);
    this.type = ModelUtil.induceFieldType (ccInfo.typeName, ccInfo.columnSize, ccInfo.decimalDigits, modelFieldTypeReader);
    this.isPk = ccInfo.isPk;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="114" endline="116">
public String getName () {
    return this.name;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="118" endline="120">
public void setName (String name) {
    this.name = name;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="123" endline="125">
public String getType () {
    return this.type;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="127" endline="129">
public void setType (String type) {
    this.type = type;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="132" endline="134">
public String getColName () {
    return this.colName;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="136" endline="141">
public void setColName (String colName) {
    this.colName = colName;
    if (UtilValidate.isEmpty (this.colName)) {
        this.colName = ModelUtil.javaNameToDbName (UtilXml.checkEmpty (this.name));
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="143" endline="145">
public String getColValue () {
    return UtilValidate.isEmpty (this.colValue) ? this.colName : this.colValue;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="147" endline="149">
public void setColValue (String colValue) {
    this.colValue = colValue;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="152" endline="154">
public boolean getIsPk () {
    return this.isPk;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="156" endline="161">
public void setIsPk (boolean isPk) {
    this.isPk = isPk;
    if (isPk) {
        setIsNotNull (true);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="163" endline="165">
public boolean getIsNotNull () {
    return this.isNotNull;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="167" endline="169">
public void setIsNotNull (boolean isNotNull) {
    this.isNotNull = isNotNull;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="171" endline="173">
public boolean getEncrypt () {
    return this.encrypt;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="175" endline="177">
public void setEncrypt (boolean encrypt) {
    this.encrypt = encrypt;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="179" endline="181">
public boolean getEnableAuditLog () {
    return this.enableAuditLog;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="183" endline="185">
public boolean getIsAutoCreatedInternal () {
    return this.isAutoCreatedInternal;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="187" endline="189">
public void setIsAutoCreatedInternal (boolean isAutoCreatedInternal) {
    this.isAutoCreatedInternal = isAutoCreatedInternal;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="191" endline="193">
public String getFieldSet () {
    return fieldSet;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="195" endline="197">
public void setFieldSet (String fieldSet) {
    this.fieldSet = fieldSet;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="200" endline="202">
public String getValidator (int index) {
    return this.validators.get (index);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="204" endline="206">
public int getValidatorsSize () {
    return this.validators.size ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="208" endline="210">
public void addValidator (String validator) {
    this.validators.add (validator);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="212" endline="214">
public String removeValidator (int index) {
    return this.validators.remove (index);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="217" endline="221">
public boolean equals (Object obj) {
    if (obj.getClass () != getClass ()) return false;

    ModelField other = (ModelField) obj;
    return other.getName ().equals (getName ()) && other.getModelEntity () == getModelEntity ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="224" endline="226">
public int hashCode () {
    return getModelEntity ().hashCode () ^ getName ().hashCode ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="229" endline="231">
public String toString () {
    return getModelEntity () + "@" + getName ();
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ModelField.java" startline="233" endline="258">
public Element toXmlElement (Document document) {
    Element root = document.createElement ("field");
    root.setAttribute ("name", this.getName ());
    if (! this.getColName ().equals (ModelUtil.javaNameToDbName (this.getName ()))) {
        root.setAttribute ("col-name", this.getColName ());
    }
    root.setAttribute ("type", this.getType ());
    if (this.getEncrypt ()) {
        root.setAttribute ("encrypt", "true");
    }
    if (this.getIsNotNull ()) {
        root.setAttribute ("not-null", "true");
    }
    Iterator < String > valIter = this.validators.iterator ();
    if (valIter != null) {
        while (valIter.hasNext ()) {
            String validator = valIter.next ();
            Element val = document.createElement ("validate");
            val.setAttribute ("name", validator);
            root.appendChild (val);
        }
    }
    return root;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ServiceRequester.java" startline="53" endline="56">
public ServiceRequester (GenericValue userLogin, String eventType) {
    super (userLogin);
    this.setEventType (eventType);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ServiceRequester.java" startline="58" endline="60">
public ServiceRequester (GenericValue userLogin) {
    super (userLogin);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ServiceRequester.java" startline="66" endline="76">
public void receive_event (WfEventAudit event) throws BaseException, InvalidPerformer {
    Debug.logInfo ("Call : ServiceRequester.receive_event(WfEventAudit event)", module);
    if (this.getEventType () == null || this.getEventType ().equals (event.event_type ())) {
        try {
            this.run (event);
        } catch (GenericServiceException e) {
            Debug.logError (e, module);
            throw new BaseException (e);
        }
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ServiceRequester.java" startline="78" endline="81">
public void receive_event (SharkTransaction trans, WfEventAudit event) throws BaseException, InvalidPerformer {
    Debug.logInfo ("Call : ServiceRequester.receive_event (SharkTransaction trans, WfEventAudit event)", module);
    receive_event (event);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ServiceRequester.java" startline="88" endline="90">
public void setEventType (String eventType) {
    this.eventType = eventType;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ServiceRequester.java" startline="92" endline="94">
public String getEventType () {
    return this.eventType;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ServiceRequester.java" startline="96" endline="99">
public void setService (String serviceName, int serviceMode) {
    this.serviceName = serviceName;
    this.serviceMode = serviceMode;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ServiceRequester.java" startline="101" endline="103">
public void setService (String serviceName) {
    this.setService (serviceName, ServiceRequester.ASYNC);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ServiceRequester.java" startline="105" endline="107">
public String getServiceName () {
    return this.serviceName;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ServiceRequester.java" startline="109" endline="111">
public int getServiceMode () {
    return this.serviceMode;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ServiceRequester.java" startline="113" endline="115">
public void setInitalContextValues (Map initialContext) {
    this.initialContext = new HashMap (initialContext);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ServiceRequester.java" startline="117" endline="139">
private void run (WfEventAudit event) throws GenericServiceException {
    LocalDispatcher dispatcher = SharkContainer.getDispatcher ();
    if (dispatcher == null) {
        throw new GenericServiceException ("Cannot run service with null dispatcher");
    }
    Map serviceContext = makeServiceContext (event, dispatcher);
    String serviceName = this.getServiceName ();
    if (serviceName != null) {
        int mode = this.getServiceMode ();
        if (mode == ServiceRequester.SYNC) {
            dispatcher.runSyncIgnore (serviceName, serviceContext);
        } else {
            dispatcher.runAsync (serviceName, serviceContext);
        }
    } else {
        Debug.logWarning ("ServiceRequester -> receive_event() called with no service defined!", module);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-ServiceRequester.java" startline="141" endline="148">
private Map makeServiceContext (WfEventAudit event, LocalDispatcher dispatcher) throws GenericServiceException {
    DispatchContext dctx = dispatcher.getDispatchContext ();
    try {
        return dctx.getModelService (this.getServiceName ()).makeValid (getWRD (event, initialContext), ModelService.IN_PARAM);
    } catch (BaseException e) {
        throw new GenericServiceException (e);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-SimpleRequester.java" startline="39" endline="44">
public SimpleRequester (GenericValue userLogin, ModelService model, GenericRequester req) {
    super (userLogin);
    this.model = model;
    this.setServiceRequester (req);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-SimpleRequester.java" startline="46" endline="48">
public SimpleRequester (GenericValue userLogin, ModelService model) {
    this (userLogin, model, null);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-SimpleRequester.java" startline="54" endline="59">
public void receive_event (WfEventAudit event) throws BaseException, InvalidPerformer {
    if (this.req != null) {
        Map out = model.makeValid (this.getWRD (event, null), ModelService.OUT_PARAM);
        req.receiveResult (out);
    }
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-SimpleRequester.java" startline="61" endline="63">
public void receive_event (SharkTransaction sharkTransaction, WfEventAudit event) throws BaseException, InvalidPerformer {
    this.receive_event (event);
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-SimpleRequester.java" startline="69" endline="71">
public void setServiceRequester (GenericRequester req) {
    this.req = req;
}
</source>
<source file="../../Dataset/Dataset_full/Audit/1.12-SimpleRequester.java" startline="73" endline="75">
public GenericRequester getServiceRequester () {
    return this.req;
}
</source>
