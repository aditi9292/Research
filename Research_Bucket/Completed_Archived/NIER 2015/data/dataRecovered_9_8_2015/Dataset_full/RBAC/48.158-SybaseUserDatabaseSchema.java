/*
 * Copyright (c) 2003 - 2008 OpenSubsystems s.r.o. Slovak Republic. All rights reserved.
 * 
 * Project: OpenSubsystems
 * 
 * $Id: SybaseUserDatabaseSchema.java,v 1.22 2009/04/22 06:29:40 bastafidli Exp $
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License. 
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA 
 */

package org.opensubsystems.security.persist.db.sybase;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.opensubsystems.core.error.OSSException;
import org.opensubsystems.core.util.Log;
import org.opensubsystems.core.util.jdbc.DatabaseUtils;
import org.opensubsystems.patterns.listdata.persist.db.ListDatabaseUtils;
import org.opensubsystems.security.data.User;
import org.opensubsystems.security.persist.db.DomainDatabaseSchema;
import org.opensubsystems.security.persist.db.UserDatabaseSchema;

/**
 * Database specific operations related to persistence of users in Sybase ASE.
 *
 * @version $Id: SybaseUserDatabaseSchema.java,v 1.22 2009/04/22 06:29:40 bastafidli Exp $
 * @author Julo Legeny
 * @code.reviewer Miro Halas
 * @code.reviewed 1.8 2006/03/16 01:28:22 jlegeny
 */
public class SybaseUserDatabaseSchema extends UserDatabaseSchema
{
   /*
      Use autogenerated numbers for IDs using sequence
      Name all constraints to easily identify them later.
      ON DELETE CASCADE must be provided by trigger (but there can by just 1 
      delete trigger for the table). There will be not used triggers and all
      data will be deleted manually.

      CREATE TABLE BF_USER
      (
         ID NUMERIC(10, 0) IDENTITY NOT NULL,
         DOMAIN_ID NUMERIC(10, 0) NOT NULL,
         FIRST_NAME VARCHAR(50) NOT NULL,
         LAST_NAME VARCHAR(50) NOT NULL,
         PHONE VARCHAR(20) NOT NULL,
         FAX VARCHAR(20) NOT NULL,
         ADDRESS VARCHAR(1024) NOT NULL,
         EMAIL VARCHAR(50) NOT NULL,
         LOGIN_NAME VARCHAR(30) NOT NULL,
         PASSWORD VARCHAR(90) NOT NULL,
         LOGIN_ENABLED SMALLINT DEFAULT 0 NOT NULL,
         GUEST_ACCESS_ENABLED SMALLINT DEFAULT 0 NOT NULL,
         SUPER_USER SMALLINT DEFAULT 0 NOT NULL,
         INTERNAL_USER SMALLINT DEFAULT 0 NOT NULL,
         CREATION_DATE DATETIME NOT NULL,
         MODIFICATION_DATE DATETIME NOT NULL,
         CONSTRAINT BF_USR_PK PRIMARY KEY (ID),
         CONSTRAINT BF_USR_LOGIN_UQ UNIQUE (LOGIN_NAME),
         CONSTRAINT BF_USR_EMAIL_UQ UNIQUE (DOMAIN_ID, EMAIL),
         CONSTRAINT BF_USR_FK FOREIGN KEY (DOMAIN_ID)
            REFERENCES BF_DOMAIN (ID)
      )

      Create combined index DOMAIN_ID with COLUMN that can be 
      used for sorting in the list. There columns are specified by
      DEFAULT_LIST_COLUMNS constant and they are not disabled for 
      sorting within the UserListTag class.
      Name of the list will be constructed by method from ListDatabaseUtils class
       
      CREATE INDEX LST_USERLOGNAME ON BF_USER (DOMAIN_ID, LOGIN_NAME);
      CREATE INDEX LST_USERFIRNAME ON BF_USER (DOMAIN_ID, FIRST_NAME);
      CREATE INDEX LST_USERLASNAME ON BF_USER (DOMAIN_ID, LAST_NAME);
      CREATE INDEX LST_USEREMAIL ON BF_USER (DOMAIN_ID, EMAIL);
      CREATE INDEX LST_USERPHONE ON BF_USER (DOMAIN_ID, PHONE);
      CREATE INDEX LST_USERLOGBLED ON BF_USER (DOMAIN_ID, LOGIN_ENABLED);
      CREATE INDEX LST_USERMODDATE ON BF_USER (DOMAIN_ID, MODIFICATION_DATE);

      CREATE PROCEDURE INSERT_BF_USER
         @IN_DOMAIN_ID NUMERIC(10, 0),
         @IN_FIRST_NAME VARCHAR(50),
         @IN_LAST_NAME VARCHAR(50),
         @IN_PHONE VARCHAR(20),
         @IN_FAX VARCHAR(20),
         @IN_ADDRESS VARCHAR(1024),
         @IN_EMAIL VARCHAR(50),
         @IN_LOGIN_NAME VARCHAR(30),
         @IN_PASSWORD VARCHAR(90),
         @IN_LOGIN_ENABLED SMALLINT,
         @IN_GUEST_ACCESS_ENABLED SMALLINT,
         @IN_SUPER_USER SMALLINT,
         @IN_INTERNAL_USER SMALLINT,
         @OUT_KEY INTEGER OUTPUT,
         @OUT_TIMESTAMP DATETIME OUTPUT
      AS
         SET @OUT_TIMESTAMP = GETDATE()
         INSERT INTO " + strUserName + ".BF_USER(DOMAIN_ID, FIRST_NAME, 
            LAST_NAME, PHONE, FAX, ADDRESS, EMAIL, LOGIN_NAME, PASSWORD, 
            LOGIN_ENABLED, GUEST_ACCESS_ENABLED, SUPER_USER, INTERNAL_USER, 
            CREATION_DATE, MODIFICATION_DATE)
            VALUES (@IN_DOMAIN_ID, @IN_FIRST_NAME, @IN_LAST_NAME, 
            @IN_PHONE, @IN_FAX, @IN_ADDRESS, @IN_EMAIL, @IN_LOGIN_NAME, 
            @IN_PASSWORD, @IN_LOGIN_ENABLED, @IN_GUEST_ACCESS_ENABLED, 
            @IN_SUPER_USER, @IN_INTERNAL_USER, @OUT_TIMESTAMP, @OUT_TIMESTAMP)
         SET @OUT_KEY = @@IDENTITY
      RETURN


      CREATE PROCEDURE UPDATE_BF_USER
         @IN_FIRST_NAME VARCHAR(50),
         @IN_LAST_NAME VARCHAR(50),
         @IN_PHONE VARCHAR(20),
         @IN_FAX VARCHAR(20),
         @IN_ADDRESS VARCHAR(1024),
         @IN_EMAIL VARCHAR(50),
         @IN_LOGIN_NAME VARCHAR(30),
         @IN_PASSWORD VARCHAR(90),
         @IN_LOGIN_ENABLED SMALLINT,
         @IN_GUEST_ACCESS_ENABLED SMALLINT,
         @IN_SUPER_USER SMALLINT,
         @IN_INTERNAL_USER SMALLINT,
         @IN_USER_ID NUMERIC(10, 0),
         @IN_DOMAIN_ID NUMERIC(10, 0),
         @IN_TIMESTAMP DATETIME,
         @OUT_TIMESTAMP DATETIME OUTPUT
      AS
         SET @OUT_TIMESTAMP = GETDATE()
         IF (len(rtrim(ltrim(@IN_PASSWORD))) = 0 OR len(rtrim(ltrim(@IN_PASSWORD))) = NULL)
         BEGIN
            UPDATE " + strUserName + ".BF_USER SET FIRST_NAME = @IN_FIRST_NAME,
               LAST_NAME = @IN_LAST_NAME, PHONE = @IN_PHONE, FAX = @IN_FAX,
               ADDRESS = @IN_ADDRESS, EMAIL = @IN_EMAIL, 
               LOGIN_NAME = @IN_LOGIN_NAME,
               LOGIN_ENABLED = @IN_LOGIN_ENABLED, 
               GUEST_ACCESS_ENABLED = @IN_GUEST_ACCESS_ENABLED,
               SUPER_USER = @IN_SUPER_USER,
               INTERNAL_USER = @IN_INTERNAL_USER,
               MODIFICATION_DATE = @OUT_TIMESTAMP
               WHERE ID = @IN_USER_ID AND DOMAIN_ID = @IN_DOMAIN_ID AND
               MODIFICATION_DATE = @IN_TIMESTAMP
         END
         ELSE
         BEGIN 
            UPDATE " + strUserName + ".BF_USER SET FIRST_NAME = @IN_FIRST_NAME,
               LAST_NAME = @IN_LAST_NAME, PHONE = @IN_PHONE, FAX = @IN_FAX,
               ADDRESS = @IN_ADDRESS, EMAIL = @IN_EMAIL,
               LOGIN_NAME = @IN_LOGIN_NAME,
               PASSWORD = @IN_PASSWORD, LOGIN_ENABLED = @IN_LOGIN_ENABLED,
               GUEST_ACCESS_ENABLED = @IN_GUEST_ACCESS_ENABLED,
               SUPER_USER = @IN_SUPER_USER, INTERNAL_USER = @IN_INTERNAL_USER,
               MODIFICATION_DATE = @OUT_TIMESTAMP
               WHERE ID = @IN_USER_ID AND DOMAIN_ID = @IN_DOMAIN_ID AND
               MODIFICATION_DATE = @IN_TIMESTAMP
         END
      RETURN
   */

   // Constants ////////////////////////////////////////////////////////////////

   /**
    * Maximal length of user first name.
    */
   public static final int USER_FIRST_NAME_MAXLENGTH = 50;

   /**
    * Maximal length of user last name.
    */
   public static final int USER_LAST_NAME_MAXLENGTH = 50;

   /**
    * Maximal length of user phone number.
    */
   public static final int USER_PHONE_MAXLENGTH = 20;

   /**
    * Maximal length of user fax number.
    */
   public static final int USER_FAX_MAXLENGTH = 20;

   /**
    * Maximal length of user postal address.
    */
   public static final int USER_ADDRESS_MAXLENGTH = 1024;

   /**
    * Maximal length of user e-mail address.
    */
   public static final int USER_EMAIL_MAXLENGTH = 50;

   /**
    * Maximal length of user login name.
    */
   public static final int USER_LOGIN_NAME_MAXLENGTH = 30;

   /**
    * Maximal length of user password.
    * 
    * This length does not correspond with the final encoded password.
    * Password string is encoded by some message digest algorithm and there is 
    * returned XX characters string and after that each character is converted 
    * into the hexa-decimal number. Final password length should have at most
    * approximately 3*XX characters. 
    */
   public static final int USER_PASSWORD_MAXLENGTH = 30;

   // Cached values ////////////////////////////////////////////////////////////

   /**
    * Logger for this class
    */
   private static Logger s_logger = Log.getInstance(SybaseUserDatabaseSchema.class);

   // Constructors /////////////////////////////////////////////////////////////

   /**
    * Default constructor.
    * 
    * @throws OSSException - error occurred.
    */
   public SybaseUserDatabaseSchema(
   ) throws OSSException
   {
      super();
      
      // Setup maximal length of individual fields for entities
      m_userDescriptor.setFirstNameMaxLength(USER_FIRST_NAME_MAXLENGTH);
      m_userDescriptor.setLastNameMaxLength(USER_LAST_NAME_MAXLENGTH);
      m_userDescriptor.setPhoneMaxLength(USER_PHONE_MAXLENGTH);
      m_userDescriptor.setFaxMaxLength(USER_FAX_MAXLENGTH);
      m_userDescriptor.setAddressMaxLength(USER_ADDRESS_MAXLENGTH);
      m_userDescriptor.setEmailMaxLength(USER_EMAIL_MAXLENGTH);
      m_userDescriptor.setLoginNameMaxLength(USER_LOGIN_NAME_MAXLENGTH);
      m_userDescriptor.setPasswordMaxLength(USER_PASSWORD_MAXLENGTH);
   }

   // Logic ////////////////////////////////////////////////////////////////////

   /**
    * {@inheritDoc}
    */
   public void create(
      Connection cntDBConnection,
      String     strUserName
   ) throws SQLException, OSSException
   {
      Statement stmQuery = null;
      try
      {
         stmQuery = cntDBConnection.createStatement();

         ///////////////////////////////////////////////////////////////////////

         if (stmQuery.execute(
            "create table " + USER_TABLE_NAME + " " + NL + 
            "(" + NL +
            "   ID NUMERIC(10, 0) IDENTITY NOT NULL," + NL +
            "   DOMAIN_ID NUMERIC(10, 0) NOT NULL," + NL +
            "   FIRST_NAME VARCHAR(" + USER_FIRST_NAME_MAXLENGTH + ") NOT NULL," + NL +
            "   LAST_NAME VARCHAR(" + USER_LAST_NAME_MAXLENGTH + ") NOT NULL," + NL +
            "   PHONE VARCHAR(" + USER_PHONE_MAXLENGTH + ") NOT NULL," + NL +
            "   FAX VARCHAR(" + USER_FAX_MAXLENGTH + ") NOT NULL," + NL +
            "   ADDRESS VARCHAR(" + USER_ADDRESS_MAXLENGTH + ") NOT NULL," + NL +
            "   EMAIL VARCHAR(" + USER_EMAIL_MAXLENGTH + ") NOT NULL," + NL +
            "   LOGIN_NAME VARCHAR(" + USER_LOGIN_NAME_MAXLENGTH + ") NOT NULL," + NL +
            "   PASSWORD VARCHAR(" + (3 * USER_PASSWORD_MAXLENGTH) + ") NOT NULL," + NL +
            "   LOGIN_ENABLED SMALLINT DEFAULT 0 NOT NULL," + NL +
            "   GUEST_ACCESS_ENABLED SMALLINT DEFAULT 0 NOT NULL," + NL +
            "   SUPER_USER SMALLINT DEFAULT 0 NOT NULL," + NL +
            "   INTERNAL_USER SMALLINT DEFAULT 0 NOT NULL," + NL +
            "   CREATION_DATE DATETIME NOT NULL," + NL +
            "   MODIFICATION_DATE DATETIME NOT NULL," + NL +
            "   CONSTRAINT BF_USR_PK PRIMARY KEY (ID)," + NL +
            "   CONSTRAINT BF_USR_LOGIN_UQ UNIQUE (LOGIN_NAME)," + NL +
            "   CONSTRAINT BF_USR_EMAIL_UQ UNIQUE (DOMAIN_ID, EMAIL)," + NL +
            "   CONSTRAINT BF_USR_FK FOREIGN KEY (DOMAIN_ID)" + NL +
            "      REFERENCES " + DomainDatabaseSchema.DOMAIN_TABLE_NAME + " (ID)" + NL +
            ")"))
         {
            // Close any results
            stmQuery.getMoreResults(Statement.CLOSE_ALL_RESULTS);
         }
         s_logger.log(Level.FINEST, "Table " + USER_TABLE_NAME + " created.");

         ///////////////////////////////////////////////////////////////////////

         // create all combined indexes used for speeding up retrieving data into the list
         createListIndexes(cntDBConnection);

         ///////////////////////////////////////////////////////////////////////

         if (stmQuery.execute(
            "CREATE PROCEDURE INSERT_" + USER_TABLE_NAME + NL +
            "   @IN_DOMAIN_ID NUMERIC(10, 0)," + NL +
            "   @IN_FIRST_NAME VARCHAR(" + USER_FIRST_NAME_MAXLENGTH + ")," + NL +
            "   @IN_LAST_NAME VARCHAR(" + USER_LAST_NAME_MAXLENGTH + ")," + NL +
            "   @IN_PHONE VARCHAR(" + USER_PHONE_MAXLENGTH + ")," + NL +
            "   @IN_FAX VARCHAR(" + USER_FAX_MAXLENGTH + ")," + NL +
            "   @IN_ADDRESS VARCHAR(" + USER_ADDRESS_MAXLENGTH + ")," + NL +
            "   @IN_EMAIL VARCHAR(" + USER_EMAIL_MAXLENGTH + ")," + NL +
            "   @IN_LOGIN_NAME VARCHAR(" + USER_LOGIN_NAME_MAXLENGTH + ")," + NL +
            "   @IN_PASSWORD VARCHAR(" + (3 * USER_PASSWORD_MAXLENGTH) + ")," + NL +
            "   @IN_LOGIN_ENABLED SMALLINT," + NL +
            "   @IN_GUEST_ACCESS_ENABLED SMALLINT," + NL +
            "   @IN_SUPER_USER SMALLINT," + NL +
            "   @IN_INTERNAL_USER SMALLINT," + NL +
            "   @OUT_KEY INTEGER OUTPUT," + NL +
            "   @OUT_TIMESTAMP DATETIME OUTPUT " + NL +
            "AS " + NL +
            "   SET @OUT_TIMESTAMP = GETDATE() " + NL +
            "   INSERT INTO " + strUserName + "." + USER_TABLE_NAME + "(DOMAIN_ID, FIRST_NAME, " + NL +
            "      LAST_NAME, PHONE, FAX, ADDRESS, EMAIL, LOGIN_NAME, PASSWORD, " + NL +
            "      LOGIN_ENABLED, GUEST_ACCESS_ENABLED, SUPER_USER, INTERNAL_USER, " + NL +
            "      CREATION_DATE, MODIFICATION_DATE)" + NL +
            "      VALUES (@IN_DOMAIN_ID, @IN_FIRST_NAME, @IN_LAST_NAME, " + NL +
            "      @IN_PHONE, @IN_FAX, @IN_ADDRESS, @IN_EMAIL, @IN_LOGIN_NAME, " + NL +
            "      @IN_PASSWORD, @IN_LOGIN_ENABLED, @IN_GUEST_ACCESS_ENABLED, " + NL +
            "      @IN_SUPER_USER, @IN_INTERNAL_USER, @OUT_TIMESTAMP, @OUT_TIMESTAMP) " + NL +
            "   SET @OUT_KEY = @@IDENTITY " + NL +
            "RETURN"))
         {
            // Close any results
            stmQuery.getMoreResults(Statement.CLOSE_ALL_RESULTS);
         }
         s_logger.log(Level.FINEST, "Procedure INSERT_" + USER_TABLE_NAME + " created.");

         ///////////////////////////////////////////////////////////////////////
      
         if (stmQuery.execute(
            "CREATE PROCEDURE UPDATE_" + USER_TABLE_NAME + " " + NL +
            "   @IN_FIRST_NAME VARCHAR(" + USER_FIRST_NAME_MAXLENGTH + ")," + NL +
            "   @IN_LAST_NAME VARCHAR(" + USER_LAST_NAME_MAXLENGTH + ")," + NL +
            "   @IN_PHONE VARCHAR(" + USER_PHONE_MAXLENGTH + ")," + NL +
            "   @IN_FAX VARCHAR(" + USER_FAX_MAXLENGTH + ")," + NL +
            "   @IN_ADDRESS VARCHAR(" + USER_ADDRESS_MAXLENGTH + ")," + NL +
            "   @IN_EMAIL VARCHAR(" + USER_EMAIL_MAXLENGTH + ")," + NL +
            "   @IN_LOGIN_NAME VARCHAR(" + USER_LOGIN_NAME_MAXLENGTH + ")," + NL +
            "   @IN_PASSWORD VARCHAR(" + (3 * USER_PASSWORD_MAXLENGTH) + ")," + NL +
            "   @IN_LOGIN_ENABLED SMALLINT," + NL +
            "   @IN_GUEST_ACCESS_ENABLED SMALLINT," + NL +
            "   @IN_SUPER_USER SMALLINT," + NL +
            "   @IN_INTERNAL_USER SMALLINT," + NL +
            "   @IN_USER_ID NUMERIC(10, 0)," + NL +
            "   @IN_DOMAIN_ID NUMERIC(10, 0)," + NL +
            "   @IN_TIMESTAMP DATETIME," + NL +
            "   @OUT_TIMESTAMP DATETIME OUTPUT " + NL +
            "AS " + NL +
            "   SET @OUT_TIMESTAMP = GETDATE() " + NL +
            "   IF (len(rtrim(ltrim(@IN_PASSWORD))) = 0 " +
            "       OR len(rtrim(ltrim(@IN_PASSWORD))) = NULL) " + NL +
            "   BEGIN " + NL +
            "      UPDATE " + strUserName + "." + USER_TABLE_NAME + " SET FIRST_NAME = @IN_FIRST_NAME," + NL +
            "         LAST_NAME = @IN_LAST_NAME, PHONE = @IN_PHONE, FAX = @IN_FAX," + NL +
            "         ADDRESS = @IN_ADDRESS, EMAIL = @IN_EMAIL, " + NL +
            "         LOGIN_NAME = @IN_LOGIN_NAME," + NL +
            "         LOGIN_ENABLED = @IN_LOGIN_ENABLED, " + NL +
            "         GUEST_ACCESS_ENABLED = @IN_GUEST_ACCESS_ENABLED," + NL +
            "         SUPER_USER = @IN_SUPER_USER," + NL +
            "         INTERNAL_USER = @IN_INTERNAL_USER," + NL +
            "         MODIFICATION_DATE = @OUT_TIMESTAMP" + NL +
            "         WHERE ID = @IN_USER_ID AND DOMAIN_ID = @IN_DOMAIN_ID AND" + NL +
            "         MODIFICATION_DATE = @IN_TIMESTAMP " + NL +
            "   END " + NL +
            "   ELSE " + NL +
            "   BEGIN " + NL +
            "      UPDATE " + strUserName + "." + USER_TABLE_NAME + " SET FIRST_NAME = @IN_FIRST_NAME," + NL +
            "         LAST_NAME = @IN_LAST_NAME, PHONE = @IN_PHONE, FAX = @IN_FAX," + NL +
            "         ADDRESS = @IN_ADDRESS, EMAIL = @IN_EMAIL," + NL +
            "         LOGIN_NAME = @IN_LOGIN_NAME," + NL +
            "         PASSWORD = @IN_PASSWORD, LOGIN_ENABLED = @IN_LOGIN_ENABLED," + NL +
            "         GUEST_ACCESS_ENABLED = @IN_GUEST_ACCESS_ENABLED," + NL +
            "         SUPER_USER = @IN_SUPER_USER, INTERNAL_USER = @IN_INTERNAL_USER," + NL +
            "         MODIFICATION_DATE = @OUT_TIMESTAMP" + NL +
            "         WHERE ID = @IN_USER_ID AND DOMAIN_ID = @IN_DOMAIN_ID AND" + NL +
            "         MODIFICATION_DATE = @IN_TIMESTAMP " + NL +
            "   END " + NL +
            "RETURN"))
         {
            // Close any results
            stmQuery.getMoreResults(Statement.CLOSE_ALL_RESULTS);
         }
         s_logger.log(Level.FINEST, "Procedure UPDATE_" + USER_TABLE_NAME + " created.");
      }
      catch (SQLException sqleExc)
      {
         s_logger.log(Level.WARNING, "Failed to create user.", sqleExc);
         throw sqleExc;
      }
      finally
      {
         DatabaseUtils.closeStatement(stmQuery);
      }
   }

   /**
    * {@inheritDoc}
    */
   public void createListIndexes(
      Connection cntDBConnection
   ) throws SQLException, 
            OSSException
   {
      Statement stmQuery = null;
      String strIndexName = null;

      try
      {
         stmQuery = cntDBConnection.createStatement();
         // This index causes problem for Oracle because it is automatically indexed 
         // for unique column - therefore we have to specify it within each DB specific 
         // class.
         strIndexName = ListDatabaseUtils.getInstance().generateListIndexName(
                  USER_TABLE_NAME, "EMAIL");
         if (stmQuery.execute("CREATE INDEX " + strIndexName + " ON " + USER_TABLE_NAME + " (DOMAIN_ID, EMAIL)"))
         {
            // Close any results
            stmQuery.getMoreResults(Statement.CLOSE_ALL_RESULTS);
         }
         s_logger.log(Level.FINEST, "Index " + strIndexName + " created.");
      }
      catch (SQLException sqleExc)
      {
         s_logger.log(Level.WARNING, 
                      "Failed to create schema LST indexes for User data object", sqleExc);
         throw sqleExc;
      }
      finally
      {
         DatabaseUtils.closeStatement(stmQuery);
      }

      super.createListIndexes(cntDBConnection);
   }

   /**
    * {@inheritDoc}
    */
   public String getInsertUserAndFetchGeneratedValues(
   ) throws OSSException
   {
      return "{call INSERT_" + USER_TABLE_NAME + " (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)}";
   }

   /**
    * {@inheritDoc}
    */
   public String getUpdateUserAndFetchGeneratedValues(
      User data
   ) throws OSSException
   {
      return "{call UPDATE_" + USER_TABLE_NAME + " (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)}";
   }
   
   /**
    * {@inheritDoc}
    */
   public int deleteRelatedData(
      Connection dbConnection,
      int iDataType,
      int iId
   ) throws OSSException, SQLException
   {
      PreparedStatement pstmDelete = null;
      int iDeleted = 0;

      if (iDataType == m_userDescriptor.getDataType())
      {
         try
         {
            // execute query for delete related data
            pstmDelete = dbConnection.prepareStatement(
                            "delete from " + USER_TABLE_NAME + "_ROLE_MAP where USER_ID = ?");
            pstmDelete.setInt(1, iId);
            iDeleted = pstmDelete.executeUpdate();
         }
         finally
         {
            DatabaseUtils.closeStatement(pstmDelete);
         }
      }
      
      return iDeleted;
   }
}
