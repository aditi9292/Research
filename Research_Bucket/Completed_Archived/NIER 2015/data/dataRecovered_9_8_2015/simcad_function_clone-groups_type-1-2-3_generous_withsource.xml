<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="simcad.xsl"?>
<SimCad version="SimCad 2.2">
<DetectionTimeStamp>2014-11-21 20:18:46.275</DetectionTimeStamp>
<SearchInput>n/a</SearchInput>
<SearchTarget>../../Dataset/small/</SearchTarget>
<SourceFragmentType>function</SourceFragmentType>
<SourceTransformation>generous</SourceTransformation>
<CloneType>Type-1, Type-2, Type-3</CloneType>
<CloneGroupingType>group</CloneGroupingType>
<SourceFragmentTotal>50</SourceFragmentTotal>
<CloneFragmentTotal>36</CloneFragmentTotal>
<CloneSetTotal>12</CloneSetTotal>
<Clones fragmentType="function" cloneSetType="group" nfragments="36" ngroups="12">
<CloneGroup groupid="1" nfragments="3" type="Type-3">
<CloneFragment file="../../Dataset/small/1.12-EventAudit.java" startline="168" endline="175" pcid="47"><![CDATA[
public void store () throws GenericEntityException {
    if (newValue) {
        newValue = false;
        delegator.createOrStore (eventAudit);
    } else {
        delegator.store (eventAudit);
    }
}
]]></CloneFragment>
<CloneFragment file="../../Dataset/small/1.12-EventAudit.java" startline="183" endline="187" pcid="49"><![CDATA[
public void remove () throws GenericEntityException {
    if (! newValue) {
        delegator.removeValue (eventAudit);
    }
}
]]></CloneFragment>
<CloneFragment file="../../Dataset/small/1.12-EventAudit.java" startline="177" endline="181" pcid="48"><![CDATA[
public void reload () throws GenericEntityException {
    if (! newValue) {
        eventAudit.refresh ();
    }
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="2" nfragments="2" type="Type-3">
<CloneFragment file="../../Dataset/small/1.12-EventAudit.java" startline="40" endline="52" pcid="44"><![CDATA[
public EventAudit (EntityAuditMgr mgr, Delegator delegator, String eventAuditId) {
    super (mgr, delegator);
    this.eventAuditId = eventAuditId;
    if (this.delegator != null) {
        try {
            this.eventAudit = delegator.findByPrimaryKey (org.ofbiz.shark.SharkConstants.WfEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.eventAuditId, eventAuditId));
        } catch (GenericEntityException e) {
            Debug.logError (e, module);
        }
    } else {
        Debug.logError ("Invalid delegator object passed", module);
    }
}
]]></CloneFragment>
<CloneFragment file="../../Dataset/small/1.12-DataEventAudit.java" startline="45" endline="56" pcid="19"><![CDATA[
public DataEventAudit (EntityAuditMgr mgr, Delegator delegator, String eventAuditId) {
    super (mgr, delegator, eventAuditId);
    if (this.delegator != null) {
        try {
            this.dataEventAudit = delegator.findByPrimaryKey (org.ofbiz.shark.SharkConstants.WfDataEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.eventAuditId, eventAuditId));
        } catch (GenericEntityException e) {
            Debug.logError (e, module);
        }
    } else {
        Debug.logError ("Invalid delegator object passed", module);
    }
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="3" nfragments="2" type="Type-3">
<CloneFragment file="../../Dataset/small/1.12-AssignmentEventAudit.java" startline="39" endline="50" pcid="7"><![CDATA[
public AssignmentEventAudit (EntityAuditMgr mgr, Delegator delegator, String eventAuditId) {
    super (mgr, delegator, eventAuditId);
    if (this.delegator != null) {
        try {
            this.assignmentEventAudit = delegator.findByPrimaryKey ("WfAssignmentEventAudit", UtilMisc.toMap ("eventAuditId", eventAuditId));
        } catch (GenericEntityException e) {
            Debug.logError (e, module);
        }
    } else {
        Debug.logError ("Invalid delegator object passed", module);
    }
}
]]></CloneFragment>
<CloneFragment file="../../Dataset/small/1.12-CreateProcessEventAudit.java" startline="38" endline="49" pcid="14"><![CDATA[
public CreateProcessEventAudit (EntityAuditMgr mgr, Delegator delegator, String eventAuditId) {
    super (mgr, delegator, eventAuditId);
    if (this.delegator != null) {
        try {
            this.createProcessEventAudit = delegator.findByPrimaryKey ("WfCreateProcessEventAudit", UtilMisc.toMap ("eventAuditId", eventAuditId));
        } catch (GenericEntityException e) {
            Debug.logError (e, module);
        }
    } else {
        Debug.logError ("Invalid delegator object passed", module);
    }
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="4" nfragments="6" type="Type-3">
<CloneFragment file="../../Dataset/small/1.12-AssignmentEventAudit.java" startline="113" endline="118" pcid="10"><![CDATA[
public void reload () throws GenericEntityException {
    super.reload ();
    if (! newValue) {
        assignmentEventAudit.refresh ();
    }
}
]]></CloneFragment>
<CloneFragment file="../../Dataset/small/1.12-CreateProcessEventAudit.java" startline="145" endline="150" pcid="17"><![CDATA[
public void reload () throws GenericEntityException {
    super.reload ();
    if (! newValue) {
        createProcessEventAudit.refresh ();
    }
}
]]></CloneFragment>
<CloneFragment file="../../Dataset/small/1.12-DataEventAudit.java" startline="105" endline="110" pcid="24"><![CDATA[
public void reload () throws GenericEntityException {
    super.reload ();
    if (! newValue) {
        dataEventAudit.refresh ();
    }
}
]]></CloneFragment>
<CloneFragment file="../../Dataset/small/1.12-AssignmentEventAudit.java" startline="120" endline="125" pcid="11"><![CDATA[
public void remove () throws GenericEntityException {
    super.remove ();
    if (! newValue) {
        delegator.removeValue (assignmentEventAudit);
    }
}
]]></CloneFragment>
<CloneFragment file="../../Dataset/small/1.12-CreateProcessEventAudit.java" startline="152" endline="157" pcid="18"><![CDATA[
public void remove () throws GenericEntityException {
    super.remove ();
    if (! newValue) {
        delegator.removeValue (createProcessEventAudit);
    }
}
]]></CloneFragment>
<CloneFragment file="../../Dataset/small/1.12-DataEventAudit.java" startline="112" endline="117" pcid="25"><![CDATA[
public void remove () throws GenericEntityException {
    super.remove ();
    if (! newValue) {
        delegator.removeValue (dataEventAudit);
    }
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="5" nfragments="3" type="Type-2">
<CloneFragment file="../../Dataset/small/1.12-AssignmentEventAudit.java" startline="103" endline="111" pcid="9"><![CDATA[
public void store () throws GenericEntityException {
    super.store ();
    if (newValue) {
        newValue = false;
        delegator.createOrStore (assignmentEventAudit);
    } else {
        delegator.store (assignmentEventAudit);
    }
}
]]></CloneFragment>
<CloneFragment file="../../Dataset/small/1.12-CreateProcessEventAudit.java" startline="135" endline="143" pcid="16"><![CDATA[
public void store () throws GenericEntityException {
    super.store ();
    if (newValue) {
        newValue = false;
        delegator.createOrStore (createProcessEventAudit);
    } else {
        delegator.store (createProcessEventAudit);
    }
}
]]></CloneFragment>
<CloneFragment file="../../Dataset/small/1.12-DataEventAudit.java" startline="95" endline="103" pcid="23"><![CDATA[
public void store () throws GenericEntityException {
    super.store ();
    if (newValue) {
        newValue = false;
        delegator.createOrStore (dataEventAudit);
    } else {
        delegator.store (dataEventAudit);
    }
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="6" nfragments="4" type="Type-2">
<CloneFragment file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="78" endline="84" pcid="29"><![CDATA[
public void persist (CreateProcessEventAuditPersistenceInterface processEvent, SharkTransaction trans) throws EventAuditException {
    try {
        ((CreateProcessEventAudit) processEvent).store ();
    } catch (GenericEntityException e) {
        throw new EventAuditException (e);
    }
}
]]></CloneFragment>
<CloneFragment file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="86" endline="92" pcid="30"><![CDATA[
public void persist (DataEventAuditPersistenceInterface dataEvent, SharkTransaction trans) throws EventAuditException {
    try {
        ((DataEventAudit) dataEvent).store ();
    } catch (GenericEntityException e) {
        throw new EventAuditException (e);
    }
}
]]></CloneFragment>
<CloneFragment file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="94" endline="100" pcid="31"><![CDATA[
public void persist (StateEventAuditPersistenceInterface stateEvent, SharkTransaction trans) throws EventAuditException {
    try {
        ((StateEventAudit) stateEvent).store ();
    } catch (GenericEntityException e) {
        throw new EventAuditException (e);
    }
}
]]></CloneFragment>
<CloneFragment file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="70" endline="76" pcid="28"><![CDATA[
public void persist (AssignmentEventAuditPersistenceInterface assignmentEvent, SharkTransaction trans) throws EventAuditException {
    try {
        ((AssignmentEventAudit) assignmentEvent).store ();
    } catch (GenericEntityException e) {
        throw new EventAuditException (e);
    }
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="7" nfragments="4" type="Type-2">
<CloneFragment file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="124" endline="129" pcid="35"><![CDATA[
public boolean restore (StateEventAuditPersistenceInterface state, SharkTransaction trans) throws EventAuditException {
    if (state == null) {
        return false;
    }
    return true;
}
]]></CloneFragment>
<CloneFragment file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="117" endline="122" pcid="34"><![CDATA[
public boolean restore (DataEventAuditPersistenceInterface data, SharkTransaction trans) throws EventAuditException {
    if (data == null) {
        return false;
    }
    return true;
}
]]></CloneFragment>
<CloneFragment file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="110" endline="115" pcid="33"><![CDATA[
public boolean restore (CreateProcessEventAuditPersistenceInterface createProcess, SharkTransaction trans) throws EventAuditException {
    if (createProcess == null) {
        return false;
    }
    return true;
}
]]></CloneFragment>
<CloneFragment file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="103" endline="108" pcid="32"><![CDATA[
public boolean restore (AssignmentEventAuditPersistenceInterface assignment, SharkTransaction trans) throws EventAuditException {
    if (assignment == null) {
        return false;
    }
    return true;
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="8" nfragments="3" type="Type-3">
<CloneFragment file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="192" endline="213" pcid="39"><![CDATA[
private List getProcessStateEvents (String processId) throws EventAuditException {
    if (Debug.verboseOn ()) Debug.log (":: getProcessStateEvents ::", module);

    Delegator delegator = SharkContainer.getDelegator ();
    List stateEvents = new ArrayList ();
    List lookupList = null;
    try {
        lookupList = delegator.findByAnd (org.ofbiz.shark.SharkConstants.WfEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.auditType, "processStateChanged", org.ofbiz.shark.SharkConstants.processId, processId));
    } catch (GenericEntityException e) {
        Debug.logError (e, module);
        throw new EventAuditException (e);
    }
    if (UtilValidate.isNotEmpty (lookupList)) {
        Iterator i = lookupList.iterator ();
        while (i.hasNext ()) {
            GenericValue v = (GenericValue) i.next ();
            if (v != null) {
                stateEvents.add (new StateEventAudit (this, delegator, v.getString (org.ofbiz.shark.SharkConstants.eventAuditId)));
            }
        }
    }
    return stateEvents;
}
]]></CloneFragment>
<CloneFragment file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="169" endline="190" pcid="38"><![CDATA[
private List getCreateProcessEvents (String processId) throws EventAuditException {
    if (Debug.verboseOn ()) Debug.log (":: getCreateProcessEvents ::", module);

    Delegator delegator = SharkContainer.getDelegator ();
    List createProcessEvents = new ArrayList ();
    List lookupList = null;
    try {
        lookupList = delegator.findByAnd (org.ofbiz.shark.SharkConstants.WfEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.auditType, "processCreated", org.ofbiz.shark.SharkConstants.processId, processId));
    } catch (GenericEntityException e) {
        Debug.logError (e, module);
        throw new EventAuditException (e);
    }
    if (UtilValidate.isNotEmpty (lookupList)) {
        Iterator i = lookupList.iterator ();
        while (i.hasNext ()) {
            GenericValue v = (GenericValue) i.next ();
            if (v != null) {
                createProcessEvents.add (new CreateProcessEventAudit (this, delegator, v.getString (org.ofbiz.shark.SharkConstants.eventAuditId)));
            }
        }
    }
    return createProcessEvents;
}
]]></CloneFragment>
<CloneFragment file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="215" endline="236" pcid="40"><![CDATA[
private List getProcessDataEvents (String processId) throws EventAuditException {
    if (Debug.verboseOn ()) Debug.log (":: getProcessDataEvents ::", module);

    Delegator delegator = SharkContainer.getDelegator ();
    List dataEvents = new ArrayList ();
    List lookupList = null;
    try {
        lookupList = delegator.findByAnd (org.ofbiz.shark.SharkConstants.WfEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.auditType, "processContextChanged", org.ofbiz.shark.SharkConstants.processId, processId));
    } catch (GenericEntityException e) {
        Debug.logError (e, module);
        throw new EventAuditException (e);
    }
    if (UtilValidate.isNotEmpty (lookupList)) {
        Iterator i = lookupList.iterator ();
        while (i.hasNext ()) {
            GenericValue v = (GenericValue) i.next ();
            if (v != null) {
                dataEvents.add (new DataEventAudit (this, delegator, v.getString (org.ofbiz.shark.SharkConstants.eventAuditId)));
            }
        }
    }
    return dataEvents;
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="9" nfragments="3" type="Type-3">
<CloneFragment file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="239" endline="260" pcid="41"><![CDATA[
private List getAssignmentEvents (String processId, String activityId) throws EventAuditException {
    if (Debug.verboseOn ()) Debug.log (":: getAssignmentEvents ::", module);

    Delegator delegator = SharkContainer.getDelegator ();
    List assignmentEvents = new ArrayList ();
    List lookupList = null;
    try {
        lookupList = delegator.findByAnd (org.ofbiz.shark.SharkConstants.WfEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.auditType, "activityAssignmentChanged", org.ofbiz.shark.SharkConstants.processId, processId, org.ofbiz.shark.SharkConstants.activityId, activityId));
    } catch (GenericEntityException e) {
        Debug.logError (e, module);
        throw new EventAuditException (e);
    }
    if (UtilValidate.isNotEmpty (lookupList)) {
        Iterator i = lookupList.iterator ();
        while (i.hasNext ()) {
            GenericValue v = (GenericValue) i.next ();
            if (v != null) {
                assignmentEvents.add (new AssignmentEventAudit (this, delegator, v.getString (org.ofbiz.shark.SharkConstants.eventAuditId)));
            }
        }
    }
    return assignmentEvents;
}
]]></CloneFragment>
<CloneFragment file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="262" endline="283" pcid="42"><![CDATA[
private List getActivityStateEvents (String processId, String activityId) throws EventAuditException {
    if (Debug.verboseOn ()) Debug.log (":: getActivityStateEvents ::", module);

    Delegator delegator = SharkContainer.getDelegator ();
    List stateEvents = new ArrayList ();
    List lookupList = null;
    try {
        lookupList = delegator.findByAnd (org.ofbiz.shark.SharkConstants.WfEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.auditType, "activityStateChanged", org.ofbiz.shark.SharkConstants.processId, processId, org.ofbiz.shark.SharkConstants.activityId, activityId));
    } catch (GenericEntityException e) {
        Debug.logError (e, module);
        throw new EventAuditException (e);
    }
    if (UtilValidate.isNotEmpty (lookupList)) {
        Iterator i = lookupList.iterator ();
        while (i.hasNext ()) {
            GenericValue v = (GenericValue) i.next ();
            if (v != null) {
                stateEvents.add (new StateEventAudit (this, delegator, v.getString (org.ofbiz.shark.SharkConstants.eventAuditId)));
            }
        }
    }
    return stateEvents;
}
]]></CloneFragment>
<CloneFragment file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="285" endline="306" pcid="43"><![CDATA[
private List getActivityDataEvents (String processId, String activityId) throws EventAuditException {
    if (Debug.verboseOn ()) Debug.log (":: getActivityDataEvents ::", module);

    Delegator delegator = SharkContainer.getDelegator ();
    List dataEvents = new ArrayList ();
    List lookupList = null;
    try {
        lookupList = delegator.findByAnd (org.ofbiz.shark.SharkConstants.WfEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.auditType, "activityContextChanged", org.ofbiz.shark.SharkConstants.processId, processId, org.ofbiz.shark.SharkConstants.activityId, activityId));
    } catch (GenericEntityException e) {
        Debug.logError (e, module);
        throw new EventAuditException (e);
    }
    if (UtilValidate.isNotEmpty (lookupList)) {
        Iterator i = lookupList.iterator ();
        while (i.hasNext ()) {
            GenericValue v = (GenericValue) i.next ();
            if (v != null) {
                dataEvents.add (new DataEventAudit (this, delegator, v.getString (org.ofbiz.shark.SharkConstants.eventAuditId)));
            }
        }
    }
    return dataEvents;
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="10" nfragments="2" type="Type-3">
<CloneFragment file="../../Dataset/small/1.12-AbstractRequester.java" startline="150" endline="155" pcid="4"><![CDATA[
protected synchronized Delegator getDelegator () {
    if (this.delegator == null && this.delegatorName != null) {
        this.delegator = DelegatorFactory.getDelegator (this.delegatorName);
    }
    return this.delegator;
}
]]></CloneFragment>
<CloneFragment file="../../Dataset/small/1.12-AuditEntityObject.java" startline="42" endline="47" pcid="13"><![CDATA[
public Delegator getDelegator () {
    if (this.delegator == null && delegatorName != null) {
        this.delegator = DelegatorFactory.getDelegator (delegatorName);
    }
    return this.delegator;
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="11" nfragments="2" type="Type-2">
<CloneFragment file="../../Dataset/small/1.12-DataEventAudit.java" startline="58" endline="62" pcid="20"><![CDATA[
public DataEventAudit (EntityAuditMgr mgr, Delegator delegator) {
    super (mgr, delegator);
    this.newValue = true;
    this.dataEventAudit = delegator.makeValue (org.ofbiz.shark.SharkConstants.WfDataEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.eventAuditId, this.eventAuditId));
}
]]></CloneFragment>
<CloneFragment file="../../Dataset/small/1.12-CreateProcessEventAudit.java" startline="51" endline="56" pcid="15"><![CDATA[
public CreateProcessEventAudit (EntityAuditMgr mgr, Delegator delegator) {
    super (mgr, delegator);
    this.newValue = true;
    this.createProcessEventAudit = delegator.makeValue (org.ofbiz.shark.SharkConstants.WfCreateProcessEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.eventAuditId, this.eventAuditId));
}
]]></CloneFragment>
</CloneGroup>
<CloneGroup groupid="12" nfragments="2" type="Type-2">
<CloneFragment file="../../Dataset/small/1.12-DataEventAudit.java" startline="74" endline="80" pcid="21"><![CDATA[
public Map getOldData () {
    byte [] value = dataEventAudit.getBytes (org.ofbiz.shark.SharkConstants.oldData);
    if (value != null) {
        return deserialize (value);
    }
    return null;
}
]]></CloneFragment>
<CloneFragment file="../../Dataset/small/1.12-DataEventAudit.java" startline="87" endline="93" pcid="22"><![CDATA[
public Map getNewData () {
    byte [] value = dataEventAudit.getBytes (org.ofbiz.shark.SharkConstants.newData);
    if (value != null) {
        return deserialize (value);
    }
    return null;
}
]]></CloneFragment>
</CloneGroup>
</Clones>
</SimCad>