
\documentclass{sig-alternate}
  \pdfpagewidth=8.5truein
  \pdfpageheight=11truein

\usepackage{cite}
\usepackage{color}
\usepackage{courier}
\usepackage{listings}
\usepackage{balance} % Add this back in. Probably needed during camera ready.
\usepackage{listings}
\usepackage{tikz} % Need for all tikz material
\usetikzlibrary{shapes,arrows, positioning} %  Need for all tikz material




\lstset{ %
language=Java,                % choose the language of the code
basicstyle=\footnotesize,       % the size of the fonts that are used for the code
numbers=left,                   % where to put the line-numbers
numberstyle=\footnotesize,      % the size of the fonts that are used for the line-numbers
stepnumber=1,                   % the step between two line-numbers. If it is 1 each line will be numbered
numbersep=5pt,                  % how far the line-numbers are from the code
backgroundcolor=\color{white},  % choose the background color. You must add \usepackage{color}
showspaces=false,               % show spaces adding particular underscores
showstringspaces=false,         % underline spaces within strings
showtabs=false,                 % show tabs within strings adding particular underscores
%frame=single,           % adds a frame around the code
tabsize=2,          % sets default tabsize to 2 spaces
captionpos=b,           % sets the caption-position to bottom
breaklines=true,        % sets automatic line breaking
breakatwhitespace=false,    % sets if automatic breaks should only happen at whitespace
escapeinside={\%*}{*)}          % if you want to add a comment within your code
}










\newcommand{\todo}[1]{\textcolor{cyan}{\textbf{[#1]}}}
\newcommand{\xxx}[1]{\textcolor{green}{{\it [xxx says: #1]}}}
\newcommand{\dan}[1]{\textcolor{blue}{{\it [Dan says: #1]}}}


\begin{document}
%
% --- Author Metadata here ---
\conferenceinfo{SAC'15}{April 13-17, 2015, Salamanca, Spain.}
\CopyrightYear{2015} % Allows default copyright year (2002) to be over-ridden - IF NEED BE.
\crdata{X-XXXXX-XX-X/XX/XX}  % Allows default copyright data (X-XXXXX-XX-X/XX/XX) to be over-ridden.
% --- End of Author Metadata ---

\title{Using Concolic Analysis to Detect Repackaged Android Applications}
\numberofauthors{1} %  in this sample file, there are a *total*
% of EIGHT authors. SIX appear on the 'first-page' (for formatting
% reasons) and the remaining two appear in the \additionalauthors section.
%
\author{
%
% 1st. author
\alignauthor
Daniel E. Krutz and Samuel A. Malachowsky\\ 	
	\affaddr{Software Engineering Department}\\
       \affaddr{Rochester Institute of Technology}\\
       \affaddr{1 Lomb Memorial Drive}\\
       \affaddr{Rochester, NY 14623} \\
       \email{\{dxkvse, samvse\}@rit.edu}
} % Must not be a space above this


\maketitle
\begin{abstract}

The Android platform has emerged as a market leader, largely due to its flexibility to run on a diverse set of hardware, and for users to freely install applications from a wide variety of sources. Unfortunately, a significant portion of Android applications are repackaged versions of legitimate applications, often containing malware. Other than small variations in the source code, they often precisely mimic their legitimate counterparts. making many of these malicious applications very difficult for end users, researchers and protection systems difficult to detect.

We propose a new technique for discovering repackaged Android applications based on Concolic analysis. This static analysis process will form a powerful Android repackaging detection technique since it only traverses the functional aspects of the application, and is not affected by the syntax of the application's code. In this paper, we demonstrate how concolic analysis can be used to detect repackaged Android applications and lay the foundation for future research.
\dan{Really work on this.. Maybe shorten it a bit}

\end{abstract}


% I think this is the most appropriate
\category{D.4.6}{Operating Systems}Security and Protection;

%\terms{xxx, xxx, xxx}
\keywords{Android, Malware, Repackaged Applications}



% Add in categories and keywords


\section{Introduction}
% Introduce the problem
% What do I plan on accomplishing
%	How is the work I am doing important
% H


% Potential tools
% Really outline how I will do the study and how it will be successful
%


The Android platform has gained widespread popularity, largely due its flexibly, including the ability to download applications~(\emph{apps}) from a wide range of locations and the ability to view the source code of the application\dan{find a better benefit} Unfortunately, this openness often leads to severe security vulnerabilities. Since anyone may extract the source code of the application file~(\emph{.apk}), malicious developers often download a legitimate version of an app, reverse engineer the application to view its source code using a simple process using dex2jar\footnote{https://code.google.com/p/dex2jar/}, inject malicious code in the file, and then upload the malicious version of the application for users to unsuspectingly download~\cite{Gibler_adrob:examining}. While GooglePlay employs various protection techniques to varying degrees of success against these repackaged applications~\cite{bouncer_url1}, 3rd party application sites such as AppksAPK\footnote{http://www.appsapk.com/} and F-Droid\footnote{https://f-droid.org/} offer essentially no protection. Previous research shows that about 5\%-13\% of applications in third party markets have been repackaged~\cite{Zhou:2012:DRS:2133601.2133640}. Furthermore, a recent study found 86\% of malware samples were re-packaged Android applications, which indicates the formidability of this attack method~\cite{Zhou:2012:DAM:2310656.2310710}.

Repackaged Android applications are often very difficult for users to discover since they may appear to be functionally equivalent to the legitimate applications, and may be used for years with no sign of malicious actions. Researchers often have a hard time detecting the difference between these applications since they are so functionally equivalent, with often very little variations in the source code between legitimate, and malicious applications. Current techniques for detecting repackaged Android applications include techniques based on dependency graphs~\cite{Chen:2014:AAS:2568225.2568286}, fuzzy hash matching~\cite{Zhou:2012:DRS:2133601.2133640} and user interface based approaches~\cite{Zhang:2014:VTO:2627393.2627395}.



% Show example of repackaged application and the malicious source code?
In the following work, we propose a new technique for detecting repackaged Android application based on concolic analysis, an approach which we are not aware has been previously attempted. A concolic analysis based approach has the advantage of only examining the functional nature of the, and is not affected by common obfuscation attempts~\cite{krutz2013cccd}, such as altering of naming conventions or other syntactical changes.


% Good site for describing malicious copy of coin pirates
% http://blog.trendmicro.com/trendlabs-security-intelligence/trojanized-android-app-checks-for-keywords-in-sms-messages/


% Describe repackaged Applications and why they are a problem


% Describe what they are
% Why are they a problem
% Show a brief example of how an application can be repackaged
%	Think about using coin pirate as an example

% Describe how applications signed by different developers are an indication of a repackaged application


\section{Concolic Analysis}
%\label{sec: conclusion}

% How does concolic analysis work
%	


Concolic analysis combines concrete and symbolic values in order to traverse all possible paths (up to a given length) of an application. Concolic Analysis is not affected by factors such as naming conventions, syntax and comments. Traditionally, concolic analysis has been used for software testing~\cite{Sen:2005:CCU:1081706.1081750}, code clone detection~\cite{krutz2013cccd} and vulnerability detection~\cite{Chen:2014:CIB:2554850.2554875}.

We show example concolic output in Listing~\ref{lst:concolicoutput}, where constant variable types are represented generically by ``CONST'' while the variable type integer is represented by a generic tag ``SYMINT.'' Though not present above, other variable types are represented in a similar fashion in concolic output such as this. Actual variable names do not appear anywhere in the output and are irrelevant to the concolic analysis technique. We more complete example of concolic analysis and its output may be found on our project website.\todo{Add this data to the website - also add a link to the site as well?}

\begin{lstlisting}[label=lst:concolicoutput, caption=Example Concolic Output]
PC#=3
CONST_3>a_1_SYMINT[2]&&
CONST_2<=a_1_SYMINT[2]&&
CONST_1<=a_1_SYMINT[2]
PC#=2
CONST_2>a_1_SYMINT[1]&&
CONST_1<=a_1_SYMINT[1]
PC#=1
CONST_1>a_1_SYMINT[2]
\end{lstlisting}

\todo{should we show this output here? Maybe compare to sets of identical concolic output }
\todo{center output, remove lines?}





% Talk about developers signing applications.

% Why will concolic analysis detect duplicate infroatmion.
Since concolic analysis is not affected by syntax or comments, identically traversed paths are indications of duplicate functionality, and is therefore functionally equivalent code~\cite{krutz2013cccd,krutz2013code}. Very large amounts of duplicated code in Android applications, which have been signed by different developers, is an indication of a potentially repackaged application .




% Talk about the concolic output very briefly and what is included in it

\cite{qin2014detecting}

% Show examples from the journal paper?

\todo{Show how similar malware can be detected as well.}
\todo{Show a brief example of CA?-- I do not feel I am describing CA well enough here}





% Give a name to this technique
% Find a better title for this
\section{Proposed Detection Technique}
%\label{sec: conclusion}

% Maybe use URL of Java Path Finder is space is an issue? http://babelfish.arc.nasa.gov/trac/jpf/wiki


\todo{Come up with name?}
Our technique will utilize a modified version of Concolic Code Clone Detection (CCCD) which we proposed in a previous work~\cite{krutz2013cccd}. CCCD detects duplicate functionality by first performing concolic analysis on the target source code and then separating the output at the method level and  finally comparing methods against each other using the Levenshtein distance metric. A high similarity score is an indication of redundant functionality, and potentially duplicate or very similar source code. One of the biggest differences between CCCD and our proposed technique is that we will be unable to use CREST~\footnote{https://code.google.com/p/crest/} as its concolic testing engine since it is only compatible with C. We will use an existing concolic analysis tool such as Java Path Finder(JPF)Java Path Finder (JPF)\cite{Visser:2004:TIG:1013886.1007526}, or will adapt other existing such as that method~\cite{Anand:2012:ACT:2393596.2393666}.



Similar to previous research~\cite{Zhou:2012:DRS:2133601.2133640}, we assume that repackaged applications are the same app type with the legitimate version and do not differ substantially in the size of the application due to the small amount of altered code, and we also assume that signing keys are not leaked so that repacked applications will have not been signed with the same key as legitimate versions. Based on these assumptions, we will only compare applications which have been signed by different keys, have a similar application size\dan{mention specific value}, and are the same app type. This will assist in significantly limiting the amount of comparisons that need to be conducted.




The proposed concolic analysis comparison process is shown in Figure~\ref{fig:comparisionprocess}.




\begin{figure}[h]
\begin{center}
\label{fig:comparisionprocess}
% Define block styles
\tikzstyle{line} = [draw, -latex']

\tikzstyle{action} = [draw=none, ellipse,fill=white!20, node distance=2.0cm, minimum height=2em]
\tikzstyle{block} = [rectangle, draw, fill=white!20, text width=5em, text centered, rounded corners, minimum height=4em]

\begin{tikzpicture}[node distance = 2.0cm, auto]

    % Place nodes
%     \node [cloud] (init) {APK Collection};
     \node [block] (ApkFiles) {ApkFiles};
     \node [action, below of=ApkFiles] (Decompile) {Decompile};
     \node [block, below of=Decompile] (SourceCode) {Source Code};
     \node [block, right of=ApkFiles] (ConcolicOutput) {Concolic Output};
      \node [action, below of=ConcolicOutput] (Compare) {Compare};
%       \node [action, right of=Decompile] (ConcolicAnalysis) {Concolic Analysis};
      \node [block, below of=Compare] (IdentifiedApps) {Results};



    % Draw edges
    \path [line] (ApkFiles) -- (Decompile);
    \path [line] (SourceCode) -- (SourceCode);
    \path [line] (Decompile) -- (SourceCode);
     \path [line] (ConcolicOutput) -- (Compare);
     \path [line] (Compare) -- (IdentifiedApps);



         % \path [line] (SourceCode) -- (ConcolicOutput);


 %   \path [line] (apkanalysis) -- (SqliteDB);
  %  \path [line] (JavaAnalysis) -- (SqliteDB);
  %  \path [line] (Decompile) -- (SqliteDB);

\end{tikzpicture}
\caption{Comparision Process}
\end{center}
\end{figure}


\todo{Make this look better}
\dan{Is this a good way to show the process?}


As a proof of concept, we conducted several small analysis of Android applications using a modified version of JPF. We chose JPF since it is highly configurable, and has been extensively used in previous research\todo{cite}.




% Add in delete method
%   http://www.webroot.com/blog/2012/08/21/french-android-users-hit-again-by-sms-trojan/






% Find similar malware segments in applications.







% Compare groups of malware




% Compoare Malware to repackaged
%   As a control, malware to non-repackaged



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Once we are able to perform concolic analysis on Android applications, the next phase will be to match


%As a small proof of concept, we created a small prototype of our proposed tool using a modified version of CCCD, -- Not actually use CCCD since that checks for C clones.




% Show an example of CA working here to find a repackaged application.
%   Describe how and why it found the repackaged application
%   Use Coinpirates or another clearly documented example.




% Very briefly describe why CA needs a main method


% Not complete code segments
% Will it actually work?
% Can repackaged applications be detected like this?
%   Look at how others detect repackaged applcations, how do we follow a similar process?
% Assupmptions: Same app type, size will not be a substantial difference, assume signing keys are not leaked.








% As part of our process, we can 1st determine if two applications have the same signing key.

% Problems with just using CCCD.
% Show a table with the similarity score of CCCD
% How will this technique be better than what is already out there?


% Clearly describe what we will do


% Our technique is innovative because.....

% How will it actually detect duplicate functionality

% Explain how CA is going to be able to find repackaged Apps
% Provide a clear example of things
%	Make the user really understand how this process is going to work
% How will the analysis be carried out
%
% What are some hurdles to overcome
%	CA tool will need to be altered
%	Speed
%	All code similarities cannot be detected


% Run an instance of JPF (or another tool) on the source code to show that this would be found




\section{Conclusion \& Future Work}
\label{sec: conclusion}


% What hurdles do we have to overcome
%	Speed
%	Lots of code snippets - only looking for significant functionality
%		? How do other applications do this
% Only separated at method level
%	Is this a problem?
%	How will it be addressed in the future?

% Will not be able to detect some malware.... IE simple text links.
%


Several barriers need to be overcome in order to adapt a concolic based approach such as this to detecting repackaged Android applications. The first is that Android applications lack a main method and implement parts of the Android SDK API, making it very difficult to run existing concolic analysis tools on Android applications since they often require main methods\todo{check}. In order to address this issue, we will either alter an existing concolic analysis tool such as JPF, or employ an approach similar to that of Anand et al.~\cite{Anand:2012:ACT:2393596.2393666} who use an approach based on concolic testing and event sequences.


% Put in a filler between these two segments


The next phase of our research will be to create a more robust detection tool to conduct a more widespread analysis on the capabilities of concolic analysis in detecting repackaged Android applications. The initial step will be to create a concolic analysis based tool to generate the necessary output for comparison. We will likely follow a process presented by Anand~\emph{et al.}~\cite{Anand:2012:ACT:2393596.2393666}, but are exploring other possibilities as well, such as modifying JPF.

% Should JPF be cited? ~\cite{Visser:2004:TIG:1013886.1007526}


% List some of the challenges of making the tool
%   No main methods in Android applications



% Look and see if there are other resources available
%


Once the tool has been completed, we will conduct our analysis in several phases. We will first evaluate our tool in a controlled environment comparing known repackaged applications as identified by sources such as Conagio Mobile\footnote{http://contagiominidump.blogspot.com} and the Malware Genome Project\footnote{http://www.malgenomeproject.org} to their legitimate counterparts. We will also compare non-repackaged applications in order to ensure that our technique exceeds acceptable levels of precision and recall. We will next examine Android applications from sources such as GooglePlay and AppsAPK to discover repackaged applications which may have been previously undiscovered and compare our findings to previously proposed techniques for detection repackaged applications~\cite{Chen:2014:AAS:2568225.2568286, Zhou:2012:DRS:2133601.2133640,Zhang:2014:VTO:2627393.2627395}.

% More robust testing of applications
% Will do a larger study


\dan{Add to this?}
\dan{Should we mention that name of our tool? - I am not sure what the name will be yet?}


\bibliographystyle{abbrv} % Check on this
\bibliography{Repackaged_Android}

% that's all folks
\end{document}




%%%% Todo
% Make sure entire formatting is correct
% Fix the author list at the top of the document
% Add in categories and keywords section
% Do labels go on top or bottom?
%	I think tables and figures go on bottom
% Find name of our tool
% Create website to share our results - http://www.se.rit.edu/~dkrutz/RAA/
%   Create a GH repo to tie data in



% Notes
% This is the ICSE template
% SACS - 9/12 -  2 pgs notify: 11/17
%	http://www.acm.org/conferences/sac/sac2014/Author-kit-2014.pdf
% ICSE 11/21 4 pgs notify:1/21
%	http://2015.icse-conferences.org/call-dates/call-for-contributions/nier-2015


% 2 pages, a third is an extra $80 cost

% Thoughts
%   If we cannot find a good example of malware, we can create our own example
%

% Possible links
%   http://contagiominidump.blogspot.com/2014/05/android-fake-av-se-cure-mobieav.html
%   http://blogs.360.cn/360mobile/2014/04/02/analysis_of_oldboot_b_en/

% http://blog.andrototal.org/post/89637972097/another-android-trojan-scheme-using-google-cloud
%       May be a good way of showing that all of the similar malware copies can be detected


