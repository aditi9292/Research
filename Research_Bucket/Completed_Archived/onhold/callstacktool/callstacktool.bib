% This file was created with JabRef 2.9.2.
% Encoding: ISO8859_1

@INPROCEEDINGS{5298423,
  author = {Ahsan, S.N. and Ferzund, J. and Wotawa, F.},
  title = {Are There Language Specific Bug Patterns? Results Obtained from a
	Case Study Using Mozilla},
  booktitle = {Software Engineering Advances, 2009. ICSEA '09. Fourth International
	Conference on},
  year = {2009},
  pages = {210-215},
  doi = {10.1109/ICSEA.2009.41},
  keywords = {C++ language;Java;data mining;program debugging;Bugzilla;C files;C++
	files;Java files;Mozilla;configuration management systems;information
	extraction;language specific bug patterns;post-release bug databases;programming
	language;Computer bugs;Computer errors;Computer languages;Data mining;Databases;Java;Lab-on-a-chip;Open
	source software;Software engineering;Testing;bugs;error patterns;faults;programming-language}
}

@INPROCEEDINGS{Allwood:2009:FNS:1596638.1596654,
  author = {Allwood, Tristan O.R. and Peyton Jones, Simon and Eisenbach, Susan},
  title = {Finding the needle: stack traces for GHC},
  booktitle = {Proceedings of the 2nd ACM SIGPLAN symposium on Haskell},
  year = {2009},
  series = {Haskell '09},
  pages = {129--140},
  address = {New York, NY, USA},
  publisher = {ACM},
  acmid = {1596654},
  doi = {10.1145/1596638.1596654},
  isbn = {978-1-60558-508-6},
  keywords = {debugging, stack trace},
  location = {Edinburgh, Scotland},
  numpages = {12},
  url = {http://doi.acm.org/10.1145/1596638.1596654}
}

@INPROCEEDINGS{Artzi:2008:RMS:1428508.1428540,
  author = {Artzi, Shay and Kim, Sunghun and Ernst, Michael D.},
  title = {ReCrash: Making Software Failures Reproducible by Preserving Object
	States},
  booktitle = {Proceedings of the 22nd European conference on Object-Oriented Programming},
  year = {2008},
  series = {ECOOP '08},
  pages = {542--565},
  address = {Berlin, Heidelberg},
  publisher = {Springer-Verlag},
  acmid = {1428540},
  doi = {10.1007/978-3-540-70592-5_23},
  isbn = {978-3-540-70591-8},
  keywords = {Fault, bug, capture, crash, failure, object, replay, reproducing,
	test generation},
  location = {Paphos, Cypress},
  numpages = {24},
  url = {http://dx.doi.org/10.1007/978-3-540-70592-5_23}
}

@INPROCEEDINGS{Bard:2007:STO:1274531.1274545,
  author = {Bard, Gregory V.},
  title = {Spelling-error tolerant, order-independent pass-phrases via the damerau-levenshtein
	string-edit distance metric},
  booktitle = {Proceedings of the fifth Australasian symposium on ACSW frontiers
	- Volume 68},
  year = {2007},
  series = {ACSW '07},
  pages = {117--124},
  address = {Darlinghurst, Australia, Australia},
  publisher = {Australian Computer Society, Inc.},
  acmid = {1274545},
  isbn = {1-920-68285-X},
  keywords = {damerau-levenshtein string-edit distance metric, password-based authentication
	and key exchange (PAKE), passwords, usable security},
  location = {Ballarat, Australia},
  numpages = {8},
  url = {http://dl.acm.org/citation.cfm?id=1274531.1274545}
}

@INPROCEEDINGS{Bartz:2008:FSF:1855895.1855896,
  author = {Bartz, Kevin and Stokes, Jack W. and Platt, John C. and Kivett, Ryan
	and Grant, David and Calinoiu, Silviu and Loihle, Gretchen},
  title = {Finding similar failures using callstack similarity},
  booktitle = {Proceedings of the Third conference on Tackling computer systems
	problems with machine learning techniques},
  year = {2008},
  series = {SysML'08},
  pages = {1--1},
  address = {Berkeley, CA, USA},
  publisher = {USENIX Association},
  acmid = {1855896},
  location = {San Diego, California},
  numpages = {1},
  url = {http://dl.acm.org/citation.cfm?id=1855895.1855896}
}

@INPROCEEDINGS{Bettenburg:2008:ESI:1370750.1370757,
  author = {Bettenburg, Nicolas and Premraj, Rahul and Zimmermann, Thomas and
	Kim, Sunghun},
  title = {Extracting structural information from bug reports},
  booktitle = {Proceedings of the 2008 international working conference on Mining
	software repositories},
  year = {2008},
  series = {MSR '08},
  pages = {27--30},
  address = {New York, NY, USA},
  publisher = {ACM},
  acmid = {1370757},
  doi = {10.1145/1370750.1370757},
  isbn = {978-1-60558-024-1},
  keywords = {bug reports, patches, source code, stack traces, structural information},
  location = {Leipzig, Germany},
  numpages = {4},
  url = {http://doi.acm.org/10.1145/1370750.1370757}
}

@INPROCEEDINGS{Brodie2,
  author = {Mark Brodie and Sheng Ma and Guy M. Lohman and Laurent Mignet and
	Natwar Modani and Mark Wilding and Jon Champlin and Peter Sohn},
  title = {Quickly Finding Known Software Problems via Automated Symptom Matching},
  booktitle = {ICAC},
  year = {2005},
  pages = {101-110},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  ee = {http://doi.ieeecomputersociety.org/10.1109/ICAC.2005.49}
}

@ARTICLE{raey,
  author = {Brodie, Mark and Ma, Sheng and Rachevsky, Leonid and Champlin, Jon},
  title = {Automated Problem Determination Using Call-Stack Matching},
  journal = {Journal of Network and Systems Management},
  year = {2005},
  volume = {13},
  pages = {219-237},
  number = {2},
  doi = {10.1007/s10922-005-4443-8},
  issn = {1064-7570},
  keywords = {Diagnosis; self-managing; machine learning; case database; common
	problems; help-desk support},
  language = {English},
  publisher = {Kluwer Academic Publishers-Plenum Publishers},
  url = {http://dx.doi.org/10.1007/s10922-005-4443-8}
}

@INPROCEEDINGS{Chierichetti:2010:FJM:1873601.1873626,
  author = {Chierichetti, Flavio and Kumar, Ravi and Pandey, Sandeep and Vassilvitskii,
	Sergei},
  title = {Finding the Jaccard median},
  booktitle = {Proceedings of the Twenty-First Annual ACM-SIAM Symposium on Discrete
	Algorithms},
  year = {2010},
  series = {SODA '10},
  pages = {293--311},
  address = {Philadelphia, PA, USA},
  publisher = {Society for Industrial and Applied Mathematics},
  acmid = {1873626},
  isbn = {978-0-898716-98-6},
  location = {Austin, Texas},
  numpages = {19},
  url = {http://dl.acm.org/citation.cfm?id=1873601.1873626}
}

@INPROCEEDINGS{Dang:2012:RMC:2337223.2337364,
  author = {Dang, Yingnong and Wu, Rongxin and Zhang, Hongyu and Zhang, Dongmei
	and Nobel, Peter},
  title = {ReBucket: a method for clustering duplicate crash reports based on
	call stack similarity},
  booktitle = {Proceedings of the 2012 International Conference on Software Engineering},
  year = {2012},
  series = {ICSE 2012},
  pages = {1084--1093},
  address = {Piscataway, NJ, USA},
  publisher = {IEEE Press},
  acmid = {2337364},
  isbn = {978-1-4673-1067-3},
  location = {Zurich, Switzerland},
  numpages = {10},
  url = {http://dl.acm.org/citation.cfm?id=2337223.2337364}
}

@INPROCEEDINGS{Dhaliwal:2011:CFC:2117694.2119726,
  author = {Dhaliwal, Tejinder and Khomh, Foutse and Zou, Ying},
  title = {Classifying field crash reports for fixing bugs: A case study of
	Mozilla Firefox},
  booktitle = {Proceedings of the 2011 27th IEEE International Conference on Software
	Maintenance},
  year = {2011},
  series = {ICSM '11},
  pages = {333--342},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  acmid = {2119726},
  doi = {10.1109/ICSM.2011.6080800},
  isbn = {978-1-4577-0663-9},
  numpages = {10},
  url = {http://dx.doi.org/10.1109/ICSM.2011.6080800}
}

@ARTICLE{Dunlavey:2007:PTI:1294297.1294298,
  author = {Dunlavey, Michael},
  title = {Performance tuning with instruction-level cost derived from call-stack
	sampling},
  journal = {SIGPLAN Not.},
  year = {2007},
  volume = {42},
  pages = {4--8},
  number = {8},
  month = aug,
  acmid = {1294298},
  address = {New York, NY, USA},
  doi = {10.1145/1294297.1294298},
  issn = {0362-1340},
  issue_date = {August 2007},
  keywords = {bottleneck, call stack sampling, instrumentation, optimization, performance
	analysis, profiling, software development},
  numpages = {5},
  publisher = {ACM},
  url = {http://doi.acm.org/10.1145/1294297.1294298}
}

@INPROCEEDINGS{1199328,
  author = {Feng, H.H. and Kolesnikov, O.M. and Fogla, P. and Wenke Lee and Gong,
	W.},
  title = {Anomaly detection using call stack information},
  booktitle = {Security and Privacy, 2003. Proceedings. 2003 Symposium on},
  year = {2003},
  pages = {62-75},
  doi = {10.1109/SECPRI.2003.1199328},
  issn = {1081-6011},
  keywords = {invasive software;program diagnostics;abstract execution path;anomaly
	detection;attacks;call stack information;convergence;extract return
	addresses;false positive performance;intrusion detection;program
	execution;program execution points;Automata;Automatic generation
	control;Computerized monitoring;Convergence;Counting circuits;Data
	mining;Educational institutions;Intrusion detection;Performance analysis;Runtime}
}

@INPROCEEDINGS{Glerum:2009:DLT:1629575.1629586,
  author = {Glerum, Kirk and Kinshumann, Kinshuman and Greenberg, Steve and Aul,
	Gabriel and Orgovan, Vince and Nichols, Greg and Grant, David and
	Loihle, Gretchen and Hunt, Galen},
  title = {Debugging in the (very) large: ten years of implementation and experience},
  booktitle = {Proceedings of the ACM SIGOPS 22nd symposium on Operating systems
	principles},
  year = {2009},
  series = {SOSP '09},
  pages = {103--116},
  address = {New York, NY, USA},
  publisher = {ACM},
  acmid = {1629586},
  doi = {10.1145/1629575.1629586},
  isbn = {978-1-60558-752-3},
  keywords = {blue screen of death, bucketing, classifying, error reports, labeling,
	minidump, statistics-based debugging.},
  location = {Big Sky, Montana, USA},
  numpages = {14},
  url = {http://doi.acm.org/10.1145/1629575.1629586}
}

@INPROCEEDINGS{6224279,
  author = {Khomh, F. and Dhaliwal, T. and Ying Zou and Adams, B.},
  title = {Do faster releases improve software quality? An empirical case study
	of Mozilla Firefox},
  booktitle = {Mining Software Repositories (MSR), 2012 9th IEEE Working Conference
	on},
  year = {2012},
  pages = {179-188},
  doi = {10.1109/MSR.2012.6224279},
  issn = {2160-1852},
  keywords = {configuration management;online front-ends;program debugging;software
	houses;software process improvement;software quality;Mozilla Firefox;post-release
	bugs;release cycle length;software companies;software execution;software
	product quality improvement;software versions;user waiting time reduction;Companies;Computer
	bugs;Data mining;Fires;Software quality;Software release;bugs;release
	cycle;software quality;testing}
}

@ARTICLE{5711013,
  author = {Dongsun Kim and Xinming Wang and Sunghun Kim and Zeller, A. and Cheung,
	S.C. and Sooyong Park},
  title = {Which Crashes Should I Fix First?: Predicting Top Crashes at an Early
	Stage to Prioritize Debugging Efforts},
  journal = {Software Engineering, IEEE Transactions on},
  year = {2011},
  volume = {37},
  pages = {430-447},
  number = {3},
  doi = {10.1109/TSE.2011.20},
  issn = {0098-5589},
  keywords = {program debugging;software maintenance;software quality;system recovery;Firefox
	crash report databases;Thunderbird crash report databases;debugging;software
	failures;software maintenance;software quality;software systems;Computer
	bugs;Feature extraction;Fires;Software;Testing;Training;Top crash;crash
	reports;data mining.;machine learning;social network analysis}
}

@INPROCEEDINGS{5958261,
  author = {Sunghun Kim and Zimmermann, T. and Nagappan, N.},
  title = {Crash graphs: An aggregated view of multiple crashes to improve crash
	triage},
  booktitle = {Dependable Systems Networks (DSN), 2011 IEEE/IFIP 41st International
	Conference on},
  year = {2011},
  pages = {486-493},
  doi = {10.1109/DSN.2011.5958261},
  issn = {1530-0889},
  keywords = {graph theory;program debugging;software reliability;system recovery;Windows
	error reporting system;crash graphs;crash reporting systems;crash
	triage;debugging;system dependability;system reliability;Algorithm
	design and analysis;Complexity theory;Computer bugs;Debugging;Feature
	extraction;Servers;crash;graph;network;triaging}
}

@INPROCEEDINGS{6498456,
  author = {Lerch, J. and Mezini, M.},
  title = {Finding Duplicates of Your Yet Unwritten Bug Report},
  booktitle = {Software Maintenance and Reengineering (CSMR), 2013 17th European
	Conference on},
  year = {2013},
  pages = {69-78},
  doi = {10.1109/CSMR.2013.17},
  issn = {1534-5351},
  keywords = {learning (artificial intelligence);natural language processing;program
	debugging;text analysis;Eclipse project;bug-report duplicate detection
	annotation;development team;duplicate recognition;machine learning
	algorithm;natural language processing;software project;stack trace;testing
	effort;text similarity measure;bug report;duplicate detection;stack
	trace}
}

@INPROCEEDINGS{1510148,
  author = {McMaster, S. and Memon, A.M.},
  title = {Call stack coverage for test suite reduction},
  booktitle = {Software Maintenance, 2005. ICSM'05. Proceedings of the 21st IEEE
	International Conference on},
  year = {2005},
  pages = {539-548},
  doi = {10.1109/ICSM.2005.29},
  issn = {1063-6773},
  keywords = {program testing;software fault tolerance;software maintenance;software
	reusability;systems analysis;call stack coverage;component reuse;fault
	detection;language-independent information;multi-language implementation;software
	development;space antenna-steering application;stringent performance
	requirement;test suite reduction algorithm;Computer science;Costs;Educational
	institutions;Fault detection;Instruments;Programming;Quality of service;Runtime;Software
	testing;System testing}
}

@INPROCEEDINGS{4401026,
  author = {Modani, N. and Gupta, R. and Lohman, G. and Syeda-Mahmood, T. and
	Mignet, L.},
  title = {Automatically Identifying Known Software Problems},
  booktitle = {Data Engineering Workshop, 2007 IEEE 23rd International Conference
	on},
  year = {2007},
  pages = {433-441},
  doi = {10.1109/ICDEW.2007.4401026},
  keywords = {program diagnostics;automated software diagnosis;call-stack matching;function
	call stacks;indexing;software problem;software product;Algorithms;Application
	software;Code standards;Computer crashes;Databases;Humans;Indexing;Scalability}
}

@MISC{mozillacrashreporter,
  author = {Mozilla Crash Reporter},
  title = {Mozilla Crash Reporter},
  howpublished = {https://support.mozilla.org/en-US/ kb/Mozilla\%20Crash\%20Reporter},
  note = {[Online; accessed 2013-07-25]}
}

@INPROCEEDINGS{RoBler:2011:UFT:2025113.2025174,
  author = {Rongxin Wussler, Jeremias},
  title = {Understanding failures through facts},
  booktitle = {Proceedings of the 19th ACM SIGSOFT symposium and the 13th European
	conference on Foundations of software engineering},
  year = {2011},
  series = {ESEC/FSE '11},
  pages = {404--407},
  address = {New York, NY, USA},
  publisher = {ACM},
  acmid = {2025174},
  doi = {10.1145/2025113.2025174},
  isbn = {978-1-4503-0443-6},
  keywords = {automated debugging, failure classification, statistical debugging,
	test case generation},
  location = {Szeged, Hungary},
  numpages = {4},
  url = {http://doi.acm.org/10.1145/2025113.2025174}
}

@INPROCEEDINGS{5463280,
  author = {Schroter, A. and Bettenburg, N. and Premraj, R.},
  title = {Do stack traces help developers fix bugs?},
  booktitle = {Mining Software Repositories (MSR), 2010 7th IEEE Working Conference
	on},
  year = {2010},
  pages = {118-121},
  doi = {10.1109/MSR.2010.5463280},
  keywords = {program debugging;software engineering;ECLIPSE project;bug fixing;debugging;software
	engineering;stack traces;Collaboration;Computer bugs;Computer crashes;Documentation;Java;Needles;Open
	source software;Programming profession;Software debugging;Software
	engineering;bug tracking;collaboration;debugging;empirical study;stack
	traces}
}

@INPROCEEDINGS{Seo:2012:PRC:2351676.2351702,
  author = {Seo, Hyunmin and Kim, Sunghun},
  title = {Predicting recurring crash stacks},
  booktitle = {Proceedings of the 27th IEEE/ACM International Conference on Automated
	Software Engineering},
  year = {2012},
  series = {ASE 2012},
  pages = {180--189},
  address = {New York, NY, USA},
  publisher = {ACM},
  acmid = {2351702},
  doi = {10.1145/2351676.2351702},
  isbn = {978-1-4503-1204-2},
  keywords = {Crash, bug, crash reporting system},
  location = {Essen, Germany},
  numpages = {10},
  url = {http://doi.acm.org/10.1145/2351676.2351702}
}

@INPROCEEDINGS{5928673,
  author = {Jing Wang and Carroll, J.M.},
  title = {Behind Linus's law: A preliminary analysis of open source software
	peer review practices in Mozilla and Python},
  booktitle = {Collaboration Technologies and Systems (CTS), 2011 International
	Conference on},
  year = {2011},
  pages = {117-124},
  doi = {10.1109/CTS.2011.5928673},
  keywords = {groupware;program debugging;programming languages;public domain software;software
	performance evaluation;software reviews;virtual enterprises;Linus
	law;Mozilla;Python;bug tracking system;collaborative knowledge work;data
	analysis;evaluation;identification;open source community;open source
	software peer review practice;organization size;product structure;product
	type;reporter expertise;resolution;submission;virtual organization;Collaboration;Communities;Computer
	bugs;Fires;Open source software;Organizations;Coordination;cooperation
	and collaboration;designing collaborative & virtual organizations}
}

@INPROCEEDINGS{Wang:2013:IBL:2487085.2487135,
  author = {Wang, Shaohua and Khomh, Foutse and Zou, Ying},
  title = {Improving bug localization using correlations in crash reports},
  booktitle = {Proceedings of the 10th Working Conference on Mining Software Repositories},
  year = {2013},
  series = {MSR '13},
  pages = {247--256},
  address = {Piscataway, NJ, USA},
  publisher = {IEEE Press},
  acmid = {2487135},
  isbn = {978-1-4673-2936-1},
  location = {San Francisco, CA, USA},
  numpages = {10},
  url = {http://dl.acm.org/citation.cfm?id=2487085.2487135}
}

@MISC{drwatson,
  author = {Microsoft Dr. Watson},
  title = {Microsoft Dr. Watson},
  howpublished = {https://www.microsoft.com/resources/ documentation/windows/xp/all/proddocs/en-us/drwatson
	overview.mspx?mfr=true},
  note = {[Online; accessed 2013-07-12]}
}

@INPROCEEDINGS{Yin:2011:FBB:2025113.2025121,
  author = {Yin, Zuoning and Yuan, Ding and Zhou, Yuanyuan and Pasupathy, Shankar
	and Bairavasundaram, Lakshmi},
  title = {How do fixes become bugs?},
  booktitle = {Proceedings of the 19th ACM SIGSOFT symposium and the 13th European
	conference on Foundations of software engineering},
  year = {2011},
  series = {ESEC/FSE '11},
  pages = {26--36},
  address = {New York, NY, USA},
  publisher = {ACM},
  acmid = {2025121},
  doi = {10.1145/2025113.2025121},
  isbn = {978-1-4503-0443-6},
  keywords = {bug fixing, human factor, incorrect fixes, software bugs, testing},
  location = {Szeged, Hungary},
  numpages = {11},
  url = {http://doi.acm.org/10.1145/2025113.2025121}
}

@INPROCEEDINGS{6224281,
  author = {Zaman, S. and Adams, B. and Hassan, A.E.},
  title = {A qualitative study on performance bugs},
  booktitle = {Mining Software Repositories (MSR), 2012 9th IEEE Working Conference
	on},
  year = {2012},
  pages = {199-208},
  doi = {10.1109/MSR.2012.6224281},
  issn = {2160-1852},
  keywords = {program debugging;Google Chrome;Mozilla Firefox;context;fix validation;impact;non-performance
	bugs;performance bugs;performance regressions;qualitative study;software
	performance;Browsers;Computer bugs;Context;Fires;Google;Software;Switches;Chromium;Mozilla
	Firefox;Performance bugs;qualitative study}
}

@BOOK{citeulike:259508,
  title = {Time Warps, String Edits, and Macromolecules: The Theory and Practice
	of Sequence Comparison},
  publisher = {Addison-Wesley},
  year = {1983},
  editor = {Sankoff, David and Kruskal, Joseph},
  address = {Reading, MA},
  abstract = {{Time Warps, String Edits and Macromolecules is a young classic in
	computational science, scientific analysis from a computational perspective.
	The computational perspective is that of sequence processing, in
	particular the problem of recognizing related sequences. The book
	is the first, and still best compilation of papers explaining how
	to measure distance between sequences, and how to compute that measure
	effectively. This is called string distance, Levenshtein distance,
	or edit distance. The book contains lucid explanations of the basic
	techniques; well-annotated examples of applications; mathematical
	analysis of its computational (algorithmic) complexity; and extensive
	discussion of the variants needed for weighted measures, timed sequences
	(songs), applications to continuous data, comparison of multiple
	sequences and extensions to tree-structures. In molecular biology
	the sequences compared are the macromolecules DNA and RNA. Sequence
	distance allows the recognition of homologies (correspondences) between
	related molecules. One may interpret the distance between molecular
	sequences in terms of the mutations necessary for one molecule to
	evolve into another. A further application explores methods of predicting
	the secondary structure (chemical bonding) of RNA sequences. In speech
	recognition speech input must be compared to stored patterns to find
	the most likely interpretation (e.g., syllable). Because speech varies
	in tempo, part of the comparison allows for temporal variation, and
	is known as "time-warping". In dialectology Levenshtein distance
	allows analysis of the learned variation in pronunication, its cultural
	component. Levenshtein distance introduces a metric which allows
	more sophisticated analysis than traditional dialectology's focus
	on classes of alternative pronunciations. A similar application is
	the study of bird song, where degrees of distance in song are seen
	to correspond to the divergence of bird populations. A final application
	area is software, where Levenshtein distance is employed to located
	differing parts of different versions of computer files, and to perform
	error correction.}},
  citeulike-article-id = {259508},
  keywords = {atwally, computerscience, methods, models, statistics},
  posted-at = {2005-07-19 14:33:25},
  priority = {5}
}

