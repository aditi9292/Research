<project>
<name></name>
<description></description>
<prog_language></prog_language>
<source_elements>
<source file="../../Dataset/small/1.12-AbstractRequester.java" startline="64" endline="70"><![CDATA[
public AbstractRequester (GenericValue userLogin) {
    this.delegator = userLogin.getDelegator ();
    this.userLogin = userLogin;
    this.delegatorName = delegator.getDelegatorName ();
    this.userLoginId = userLogin.getString ("userLoginId");
}
]]></source>
<source file="../../Dataset/small/1.12-AbstractRequester.java" startline="72" endline="74"><![CDATA[
public void addPerformer (WfProcess process) throws BaseException {
    performerIds.add (process.key ());
}
]]></source>
<source file="../../Dataset/small/1.12-AbstractRequester.java" startline="76" endline="78"><![CDATA[
public int how_many_performer () throws BaseException {
    return performerIds.size ();
}
]]></source>
<source file="../../Dataset/small/1.12-AbstractRequester.java" startline="80" endline="82"><![CDATA[
public int how_many_performer (SharkTransaction trans) throws BaseException {
    return performerIds.size ();
}
]]></source>
<source file="../../Dataset/small/1.12-AbstractRequester.java" startline="84" endline="86"><![CDATA[
public WfProcessIterator get_iterator_performer () throws BaseException {
    return new WfProcessIteratorImpl (this.getPerformers ());
}
]]></source>
<source file="../../Dataset/small/1.12-AbstractRequester.java" startline="88" endline="90"><![CDATA[
public WfProcessIterator get_iterator_performer (SharkTransaction trans) throws BaseException {
    return new WfProcessIteratorImpl (trans, this.getPerformers ());
}
]]></source>
<source file="../../Dataset/small/1.12-AbstractRequester.java" startline="92" endline="97"><![CDATA[
public WfProcess [] get_sequence_performer (int i) throws BaseException {
    if (i > how_many_performer ()) {
        i = how_many_performer ();
    }
    return (WfProcess []) this.getPerformers ().subList (0, i).toArray ();
}
]]></source>
<source file="../../Dataset/small/1.12-AbstractRequester.java" startline="99" endline="104"><![CDATA[
public WfProcess [] get_sequence_performer (SharkTransaction trans, int i) throws BaseException {
    if (i > how_many_performer ()) {
        i = how_many_performer ();
    }
    return (WfProcess []) this.getPerformers ().subList (0, i).toArray ();
}
]]></source>
<source file="../../Dataset/small/1.12-AbstractRequester.java" startline="106" endline="108"><![CDATA[
public boolean is_member_of_performer (WfProcess process) throws BaseException {
    return performerIds.contains (process.key ());
}
]]></source>
<source file="../../Dataset/small/1.12-AbstractRequester.java" startline="110" endline="112"><![CDATA[
public boolean is_member_of_performer (SharkTransaction trans, WfProcess process) throws BaseException {
    return performerIds.contains (process.key ());
}
]]></source>
<source file="../../Dataset/small/1.12-AbstractRequester.java" startline="118" endline="148"><![CDATA[
protected Map getWRD (WfEventAudit event, Map initialContext) throws BaseException {
    Map wrdMap = new HashMap ();
    if (initialContext != null) {
        wrdMap.putAll (initialContext);
    }
    wrdMap.put ("eventType", event.event_type ());
    wrdMap.put (org.ofbiz.shark.SharkConstants.activityId, event.activity_key ());
    wrdMap.put (org.ofbiz.shark.SharkConstants.activityName, event.activity_name ());
    wrdMap.put (org.ofbiz.shark.SharkConstants.processId, event.process_key ());
    wrdMap.put (org.ofbiz.shark.SharkConstants.processName, event.process_name ());
    wrdMap.put (org.ofbiz.shark.SharkConstants.processMgrName, event.process_mgr_name ());
    wrdMap.put ("processMgrVersion", event.process_mgr_version ());
    wrdMap.put ("eventTime", event.time_stamp ().getTimestamp ());
    try {
        Map wrd = new HashMap (event.source ().process_context ());
        if (wrd != null) {
            wrdMap.put ("_WRDMap", wrd);
            wrdMap.putAll (wrd);
        }
    } catch (SourceNotAvailable e) {
        Debug.logError (e, "No WRD available since event.source() cannot be obtained", module);
    }
    return wrdMap;
}
]]></source>
<source file="../../Dataset/small/1.12-AbstractRequester.java" startline="150" endline="155"><![CDATA[
protected synchronized Delegator getDelegator () {
    if (this.delegator == null && this.delegatorName != null) {
        this.delegator = DelegatorFactory.getDelegator (this.delegatorName);
    }
    return this.delegator;
}
]]></source>
<source file="../../Dataset/small/1.12-AbstractRequester.java" startline="157" endline="166"><![CDATA[
protected synchronized GenericValue getUserLogin () throws GenericEntityException {
    if (userLogin == null && this.userLoginId != null) {
        Delegator delegator = this.getDelegator ();
        if (delegator != null) {
            this.userLogin = delegator.findByPrimaryKey ("UserLogin", UtilMisc.toMap ("userLoginId", this.userLoginId));
        }
    }
    return this.userLogin;
}
]]></source>
<source file="../../Dataset/small/1.12-AbstractRequester.java" startline="168" endline="213"><![CDATA[
protected List getPerformers () {
    GenericValue userLogin = null;
    List performers = null;
    try {
        userLogin = this.getUserLogin ();
    } catch (GenericEntityException e) {
        Debug.logError (e, module);
    }
    if (userLogin != null) {
        AdminInterface admin = SharkContainer.getAdminInterface ();
        ExecutionAdministration exAdmin = admin.getExecutionAdministration ();
        boolean connected = true;
        try {
            exAdmin.connect (userLogin.getString ("userLoginId"), userLogin.getString ("currentPassword"), null, null);
        } catch (BaseException e) {
            Debug.logError (e, module);
            connected = false;
        } catch (ConnectFailed e) {
            Debug.logError (e, module);
            connected = false;
        }
        if (connected) {
            performers = new ArrayList (performerIds.size ());
            Iterator i = performerIds.iterator ();
            try {
                while (i.hasNext ()) {
                    String processId = (String) i.next ();
                    exAdmin.getProcess (processId);
                }
            } catch (Exception e) {
                Debug.logError (e, module);
                performers = null;
            } finally {
                try {
                    exAdmin.disconnect ();
                } catch (BaseException e) {
                    Debug.logError (e, module);
                } catch (NotConnected e) {
                    Debug.logError (e, module);
                }
            }
        }
    }
    return performers;
}
]]></source>
<source file="../../Dataset/small/1.12-AbstractRequester.java" startline="222" endline="224"><![CDATA[
public WfProcessIteratorImpl (SharkTransaction trans, List performers) throws BaseException {
    super (trans, null, performers);
}
]]></source>
<source file="../../Dataset/small/1.12-AbstractRequester.java" startline="226" endline="228"><![CDATA[
public WfProcessIteratorImpl (List performers) throws BaseException {
    super (null, null, performers);
}
]]></source>
<source file="../../Dataset/small/1.12-AssignmentEventAudit.java" startline="39" endline="50"><![CDATA[
public AssignmentEventAudit (EntityAuditMgr mgr, Delegator delegator, String eventAuditId) {
    super (mgr, delegator, eventAuditId);
    if (this.delegator != null) {
        try {
            this.assignmentEventAudit = delegator.findByPrimaryKey ("WfAssignmentEventAudit", UtilMisc.toMap ("eventAuditId", eventAuditId));
        } catch (GenericEntityException e) {
            Debug.logError (e, module);
        }
    } else {
        Debug.logError ("Invalid delegator object passed", module);
    }
}
]]></source>
<source file="../../Dataset/small/1.12-AssignmentEventAudit.java" startline="52" endline="56"><![CDATA[
public AssignmentEventAudit (EntityAuditMgr mgr, Delegator delegator) {
    super (mgr, delegator);
    this.newValue = true;
    this.assignmentEventAudit = delegator.makeValue ("WfAssignmentEventAudit", UtilMisc.toMap ("eventAuditId", this.eventAuditId));
}
]]></source>
<source file="../../Dataset/small/1.12-AssignmentEventAudit.java" startline="58" endline="61"><![CDATA[
public AssignmentEventAudit (EntityAuditMgr mgr, GenericValue assignmentEventAudit) {
    super (mgr, assignmentEventAudit.getDelegator (), assignmentEventAudit.getString ("eventAuditId"));
    this.assignmentEventAudit = assignmentEventAudit;
}
]]></source>
<source file="../../Dataset/small/1.12-AssignmentEventAudit.java" startline="63" endline="65"><![CDATA[
public void setOldResourceUsername (String un) {
    assignmentEventAudit.set ("oldUserName", un);
}
]]></source>
<source file="../../Dataset/small/1.12-AssignmentEventAudit.java" startline="67" endline="69"><![CDATA[
public String getOldResourceUsername () {
    return assignmentEventAudit.getString ("oldUserName");
}
]]></source>
<source file="../../Dataset/small/1.12-AssignmentEventAudit.java" startline="71" endline="73"><![CDATA[
public void setOldResourceName (String nm) {
    assignmentEventAudit.set ("oldName", nm);
}
]]></source>
<source file="../../Dataset/small/1.12-AssignmentEventAudit.java" startline="75" endline="77"><![CDATA[
public String getOldResourceName () {
    return assignmentEventAudit.getString ("oldName");
}
]]></source>
<source file="../../Dataset/small/1.12-AssignmentEventAudit.java" startline="79" endline="81"><![CDATA[
public void setNewResourceUsername (String un) {
    assignmentEventAudit.set ("newUserName", un);
}
]]></source>
<source file="../../Dataset/small/1.12-AssignmentEventAudit.java" startline="83" endline="85"><![CDATA[
public String getNewResourceUsername () {
    return assignmentEventAudit.getString ("newUserName");
}
]]></source>
<source file="../../Dataset/small/1.12-AssignmentEventAudit.java" startline="87" endline="89"><![CDATA[
public void setNewResourceName (String nm) {
    assignmentEventAudit.set ("newName", nm);
}
]]></source>
<source file="../../Dataset/small/1.12-AssignmentEventAudit.java" startline="91" endline="93"><![CDATA[
public String getNewResourceName () {
    return assignmentEventAudit.getString ("newName");
}
]]></source>
<source file="../../Dataset/small/1.12-AssignmentEventAudit.java" startline="95" endline="97"><![CDATA[
public void setIsAccepted (boolean acc) {
    assignmentEventAudit.set ("isAccepted", acc);
}
]]></source>
<source file="../../Dataset/small/1.12-AssignmentEventAudit.java" startline="99" endline="101"><![CDATA[
public boolean getIsAccepted () {
    return assignmentEventAudit.getBoolean ("isAccepted").booleanValue ();
}
]]></source>
<source file="../../Dataset/small/1.12-AssignmentEventAudit.java" startline="103" endline="111"><![CDATA[
public void store () throws GenericEntityException {
    super.store ();
    if (newValue) {
        newValue = false;
        delegator.createOrStore (assignmentEventAudit);
    } else {
        delegator.store (assignmentEventAudit);
    }
}
]]></source>
<source file="../../Dataset/small/1.12-AssignmentEventAudit.java" startline="113" endline="118"><![CDATA[
public void reload () throws GenericEntityException {
    super.reload ();
    if (! newValue) {
        assignmentEventAudit.refresh ();
    }
}
]]></source>
<source file="../../Dataset/small/1.12-AssignmentEventAudit.java" startline="120" endline="125"><![CDATA[
public void remove () throws GenericEntityException {
    super.remove ();
    if (! newValue) {
        delegator.removeValue (assignmentEventAudit);
    }
}
]]></source>
<source file="../../Dataset/small/1.12-AuditEntityObject.java" startline="32" endline="36"><![CDATA[
public AuditEntityObject (EntityAuditMgr mgr, Delegator delegator) {
    this.delegatorName = delegator.getDelegatorName ();
    this.delegator = delegator;
    this.mgr = mgr;
}
]]></source>
<source file="../../Dataset/small/1.12-AuditEntityObject.java" startline="38" endline="40"><![CDATA[
public EntityAuditMgr getAuditManager () {
    return this.mgr;
}
]]></source>
<source file="../../Dataset/small/1.12-AuditEntityObject.java" startline="42" endline="47"><![CDATA[
public Delegator getDelegator () {
    if (this.delegator == null && delegatorName != null) {
        this.delegator = DelegatorFactory.getDelegator (delegatorName);
    }
    return this.delegator;
}
]]></source>
<source file="../../Dataset/small/1.12-CreateProcessEventAudit.java" startline="38" endline="49"><![CDATA[
public CreateProcessEventAudit (EntityAuditMgr mgr, Delegator delegator, String eventAuditId) {
    super (mgr, delegator, eventAuditId);
    if (this.delegator != null) {
        try {
            this.createProcessEventAudit = delegator.findByPrimaryKey ("WfCreateProcessEventAudit", UtilMisc.toMap ("eventAuditId", eventAuditId));
        } catch (GenericEntityException e) {
            Debug.logError (e, module);
        }
    } else {
        Debug.logError ("Invalid delegator object passed", module);
    }
}
]]></source>
<source file="../../Dataset/small/1.12-CreateProcessEventAudit.java" startline="51" endline="56"><![CDATA[
public CreateProcessEventAudit (EntityAuditMgr mgr, Delegator delegator) {
    super (mgr, delegator);
    this.newValue = true;
    this.createProcessEventAudit = delegator.makeValue (org.ofbiz.shark.SharkConstants.WfCreateProcessEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.eventAuditId, this.eventAuditId));
}
]]></source>
<source file="../../Dataset/small/1.12-CreateProcessEventAudit.java" startline="58" endline="61"><![CDATA[
public CreateProcessEventAudit (EntityAuditMgr mgr, GenericValue createProcessEventAudit) {
    super (mgr, createProcessEventAudit.getDelegator (), createProcessEventAudit.getString (org.ofbiz.shark.SharkConstants.eventAuditId));
    this.createProcessEventAudit = createProcessEventAudit;
}
]]></source>
<source file="../../Dataset/small/1.12-CreateProcessEventAudit.java" startline="63" endline="65"><![CDATA[
public void setPActivityId (String paId) {
    createProcessEventAudit.set (org.ofbiz.shark.SharkConstants.pActivityId, paId);
}
]]></source>
<source file="../../Dataset/small/1.12-CreateProcessEventAudit.java" startline="67" endline="69"><![CDATA[
public String getPActivityId () {
    return createProcessEventAudit.getString (org.ofbiz.shark.SharkConstants.pActivityId);
}
]]></source>
<source file="../../Dataset/small/1.12-CreateProcessEventAudit.java" startline="71" endline="73"><![CDATA[
public void setPProcessId (String ppId) {
    createProcessEventAudit.set (org.ofbiz.shark.SharkConstants.pProcessId, ppId);
}
]]></source>
<source file="../../Dataset/small/1.12-CreateProcessEventAudit.java" startline="75" endline="77"><![CDATA[
public String getPProcessId () {
    return createProcessEventAudit.getString (org.ofbiz.shark.SharkConstants.pProcessId);
}
]]></source>
<source file="../../Dataset/small/1.12-CreateProcessEventAudit.java" startline="79" endline="81"><![CDATA[
public void setPProcessName (String ppn) {
    createProcessEventAudit.set (org.ofbiz.shark.SharkConstants.pProcessName, ppn);
}
]]></source>
<source file="../../Dataset/small/1.12-CreateProcessEventAudit.java" startline="83" endline="85"><![CDATA[
public String getPProcessName () {
    return createProcessEventAudit.getString (org.ofbiz.shark.SharkConstants.pProcessName);
}
]]></source>
<source file="../../Dataset/small/1.12-CreateProcessEventAudit.java" startline="87" endline="89"><![CDATA[
public void setPProcessDefinitionName (String ppdn) {
    createProcessEventAudit.set (org.ofbiz.shark.SharkConstants.pProcessDefName, ppdn);
}
]]></source>
<source file="../../Dataset/small/1.12-CreateProcessEventAudit.java" startline="91" endline="93"><![CDATA[
public String getPProcessDefinitionName () {
    return createProcessEventAudit.getString (org.ofbiz.shark.SharkConstants.pProcessDefName);
}
]]></source>
<source file="../../Dataset/small/1.12-CreateProcessEventAudit.java" startline="95" endline="97"><![CDATA[
public void setPProcessDefinitionVersion (String ppdv) {
    createProcessEventAudit.set (org.ofbiz.shark.SharkConstants.pProcessDefVer, ppdv);
}
]]></source>
<source file="../../Dataset/small/1.12-CreateProcessEventAudit.java" startline="99" endline="101"><![CDATA[
public String getPProcessDefinitionVersion () {
    return createProcessEventAudit.getString (org.ofbiz.shark.SharkConstants.pProcessDefVer);
}
]]></source>
<source file="../../Dataset/small/1.12-CreateProcessEventAudit.java" startline="103" endline="105"><![CDATA[
public void setPActivityDefinitionId (String padId) {
    createProcessEventAudit.set (org.ofbiz.shark.SharkConstants.pActivityDefId, padId);
}
]]></source>
<source file="../../Dataset/small/1.12-CreateProcessEventAudit.java" startline="107" endline="109"><![CDATA[
public String getPActivityDefinitionId () {
    return createProcessEventAudit.getString (org.ofbiz.shark.SharkConstants.pActivityDefId);
}
]]></source>
<source file="../../Dataset/small/1.12-CreateProcessEventAudit.java" startline="111" endline="113"><![CDATA[
public void setPActivitySetDefinitionId (String padId) {
    createProcessEventAudit.set (org.ofbiz.shark.SharkConstants.pActivitySetDefId, padId);
}
]]></source>
<source file="../../Dataset/small/1.12-CreateProcessEventAudit.java" startline="115" endline="117"><![CDATA[
public String getPActivitySetDefinitionId () {
    return createProcessEventAudit.getString (org.ofbiz.shark.SharkConstants.pActivitySetDefId);
}
]]></source>
<source file="../../Dataset/small/1.12-CreateProcessEventAudit.java" startline="119" endline="121"><![CDATA[
public void setPProcessDefinitionId (String ppdId) {
    createProcessEventAudit.set (org.ofbiz.shark.SharkConstants.pProcessDefId, ppdId);
}
]]></source>
<source file="../../Dataset/small/1.12-CreateProcessEventAudit.java" startline="123" endline="125"><![CDATA[
public String getPProcessDefinitionId () {
    return createProcessEventAudit.getString (org.ofbiz.shark.SharkConstants.pProcessDefId);
}
]]></source>
<source file="../../Dataset/small/1.12-CreateProcessEventAudit.java" startline="127" endline="129"><![CDATA[
public void setPPackageId (String ppkgId) {
    createProcessEventAudit.set (org.ofbiz.shark.SharkConstants.pPackageId, ppkgId);
}
]]></source>
<source file="../../Dataset/small/1.12-CreateProcessEventAudit.java" startline="131" endline="133"><![CDATA[
public String getPPackageId () {
    return createProcessEventAudit.getString (org.ofbiz.shark.SharkConstants.pPackageId);
}
]]></source>
<source file="../../Dataset/small/1.12-CreateProcessEventAudit.java" startline="135" endline="143"><![CDATA[
public void store () throws GenericEntityException {
    super.store ();
    if (newValue) {
        newValue = false;
        delegator.createOrStore (createProcessEventAudit);
    } else {
        delegator.store (createProcessEventAudit);
    }
}
]]></source>
<source file="../../Dataset/small/1.12-CreateProcessEventAudit.java" startline="145" endline="150"><![CDATA[
public void reload () throws GenericEntityException {
    super.reload ();
    if (! newValue) {
        createProcessEventAudit.refresh ();
    }
}
]]></source>
<source file="../../Dataset/small/1.12-CreateProcessEventAudit.java" startline="152" endline="157"><![CDATA[
public void remove () throws GenericEntityException {
    super.remove ();
    if (! newValue) {
        delegator.removeValue (createProcessEventAudit);
    }
}
]]></source>
<source file="../../Dataset/small/1.12-DataEventAudit.java" startline="45" endline="56"><![CDATA[
public DataEventAudit (EntityAuditMgr mgr, Delegator delegator, String eventAuditId) {
    super (mgr, delegator, eventAuditId);
    if (this.delegator != null) {
        try {
            this.dataEventAudit = delegator.findByPrimaryKey (org.ofbiz.shark.SharkConstants.WfDataEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.eventAuditId, eventAuditId));
        } catch (GenericEntityException e) {
            Debug.logError (e, module);
        }
    } else {
        Debug.logError ("Invalid delegator object passed", module);
    }
}
]]></source>
<source file="../../Dataset/small/1.12-DataEventAudit.java" startline="58" endline="62"><![CDATA[
public DataEventAudit (EntityAuditMgr mgr, Delegator delegator) {
    super (mgr, delegator);
    this.newValue = true;
    this.dataEventAudit = delegator.makeValue (org.ofbiz.shark.SharkConstants.WfDataEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.eventAuditId, this.eventAuditId));
}
]]></source>
<source file="../../Dataset/small/1.12-DataEventAudit.java" startline="64" endline="67"><![CDATA[
public DataEventAudit (EntityAuditMgr mgr, GenericValue dataEventAudit) {
    super (mgr, dataEventAudit.getDelegator (), dataEventAudit.getString (org.ofbiz.shark.SharkConstants.eventAuditId));
    this.dataEventAudit = dataEventAudit;
}
]]></source>
<source file="../../Dataset/small/1.12-DataEventAudit.java" startline="69" endline="72"><![CDATA[
public void setOldData (Map od) {
    byte [] value = serialize (od);
    dataEventAudit.setBytes (org.ofbiz.shark.SharkConstants.oldData, (value != null ? value : null));
}
]]></source>
<source file="../../Dataset/small/1.12-DataEventAudit.java" startline="74" endline="80"><![CDATA[
public Map getOldData () {
    byte [] value = dataEventAudit.getBytes (org.ofbiz.shark.SharkConstants.oldData);
    if (value != null) {
        return deserialize (value);
    }
    return null;
}
]]></source>
<source file="../../Dataset/small/1.12-DataEventAudit.java" startline="82" endline="85"><![CDATA[
public void setNewData (Map nd) {
    byte [] value = serialize (nd);
    dataEventAudit.setBytes (org.ofbiz.shark.SharkConstants.newData, (value != null ? value : null));
}
]]></source>
<source file="../../Dataset/small/1.12-DataEventAudit.java" startline="87" endline="93"><![CDATA[
public Map getNewData () {
    byte [] value = dataEventAudit.getBytes (org.ofbiz.shark.SharkConstants.newData);
    if (value != null) {
        return deserialize (value);
    }
    return null;
}
]]></source>
<source file="../../Dataset/small/1.12-DataEventAudit.java" startline="95" endline="103"><![CDATA[
public void store () throws GenericEntityException {
    super.store ();
    if (newValue) {
        newValue = false;
        delegator.createOrStore (dataEventAudit);
    } else {
        delegator.store (dataEventAudit);
    }
}
]]></source>
<source file="../../Dataset/small/1.12-DataEventAudit.java" startline="105" endline="110"><![CDATA[
public void reload () throws GenericEntityException {
    super.reload ();
    if (! newValue) {
        dataEventAudit.refresh ();
    }
}
]]></source>
<source file="../../Dataset/small/1.12-DataEventAudit.java" startline="112" endline="117"><![CDATA[
public void remove () throws GenericEntityException {
    super.remove ();
    if (! newValue) {
        delegator.removeValue (dataEventAudit);
    }
}
]]></source>
<source file="../../Dataset/small/1.12-DataEventAudit.java" startline="119" endline="151"><![CDATA[
private Map deserialize (byte [] bytes) {
    ByteArrayInputStream bis = null;
    ObjectInputStream ois = null;
    Map map = null;
    try {
        bis = new ByteArrayInputStream (bytes);
        ois = new ObjectInputStream (bis);
        map = (Map) ois.readObject ();
    } catch (IOException e) {
        Debug.logError (e, module);
    } catch (ClassCastException e) {
        Debug.logError (e, module);
    } catch (ClassNotFoundException e) {
        Debug.logError (e, module);
    } finally {
        if (ois != null) {
            try {
                ois.close ();
            } catch (IOException e) {
                Debug.logError (e, module);
            }
        }
        if (bis != null) {
            try {
                bis.close ();
            } catch (IOException e) {
                Debug.logError (e, module);
            }
        }
    }
    return map;
}
]]></source>
<source file="../../Dataset/small/1.12-DataEventAudit.java" startline="153" endline="183"><![CDATA[
private byte [] serialize (Map map) {
    ByteArrayOutputStream bos = null;
    ObjectOutputStream oos = null;
    byte [] bytes = null;
    try {
        bos = new ByteArrayOutputStream ();
        oos = new ObjectOutputStream (bos);
        oos.writeObject (map);
        oos.flush ();
        bytes = bos.toByteArray ();
    } catch (IOException e) {
        Debug.logError (e, module);
    } finally {
        if (oos != null) {
            try {
                oos.close ();
            } catch (IOException e) {
                Debug.logError (e, module);
            }
        }
        if (bos != null) {
            try {
                bos.close ();
            } catch (IOException e) {
                Debug.logError (e, module);
            }
        }
    }
    return bytes;
}
]]></source>
<source file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="48" endline="50"><![CDATA[
public void configure (CallbackUtilities callBackUtil) throws RootException {
    this.callBackUtil = callBackUtil;
}
]]></source>
<source file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="53" endline="55"><![CDATA[
public AssignmentEventAuditPersistenceInterface createAssignmentEventAudit () {
    return new AssignmentEventAudit (this, SharkContainer.getDelegator ());
}
]]></source>
<source file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="57" endline="59"><![CDATA[
public CreateProcessEventAuditPersistenceInterface createCreateProcessEventAudit () {
    return new CreateProcessEventAudit (this, SharkContainer.getDelegator ());
}
]]></source>
<source file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="61" endline="63"><![CDATA[
public DataEventAuditPersistenceInterface createDataEventAudit () {
    return new DataEventAudit (this, SharkContainer.getDelegator ());
}
]]></source>
<source file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="65" endline="67"><![CDATA[
public StateEventAuditPersistenceInterface createStateEventAudit () {
    return new StateEventAudit (this, SharkContainer.getDelegator ());
}
]]></source>
<source file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="70" endline="76"><![CDATA[
public void persist (AssignmentEventAuditPersistenceInterface assignmentEvent, SharkTransaction trans) throws EventAuditException {
    try {
        ((AssignmentEventAudit) assignmentEvent).store ();
    } catch (GenericEntityException e) {
        throw new EventAuditException (e);
    }
}
]]></source>
<source file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="78" endline="84"><![CDATA[
public void persist (CreateProcessEventAuditPersistenceInterface processEvent, SharkTransaction trans) throws EventAuditException {
    try {
        ((CreateProcessEventAudit) processEvent).store ();
    } catch (GenericEntityException e) {
        throw new EventAuditException (e);
    }
}
]]></source>
<source file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="86" endline="92"><![CDATA[
public void persist (DataEventAuditPersistenceInterface dataEvent, SharkTransaction trans) throws EventAuditException {
    try {
        ((DataEventAudit) dataEvent).store ();
    } catch (GenericEntityException e) {
        throw new EventAuditException (e);
    }
}
]]></source>
<source file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="94" endline="100"><![CDATA[
public void persist (StateEventAuditPersistenceInterface stateEvent, SharkTransaction trans) throws EventAuditException {
    try {
        ((StateEventAudit) stateEvent).store ();
    } catch (GenericEntityException e) {
        throw new EventAuditException (e);
    }
}
]]></source>
<source file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="103" endline="108"><![CDATA[
public boolean restore (AssignmentEventAuditPersistenceInterface assignment, SharkTransaction trans) throws EventAuditException {
    if (assignment == null) {
        return false;
    }
    return true;
}
]]></source>
<source file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="110" endline="115"><![CDATA[
public boolean restore (CreateProcessEventAuditPersistenceInterface createProcess, SharkTransaction trans) throws EventAuditException {
    if (createProcess == null) {
        return false;
    }
    return true;
}
]]></source>
<source file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="117" endline="122"><![CDATA[
public boolean restore (DataEventAuditPersistenceInterface data, SharkTransaction trans) throws EventAuditException {
    if (data == null) {
        return false;
    }
    return true;
}
]]></source>
<source file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="124" endline="129"><![CDATA[
public boolean restore (StateEventAuditPersistenceInterface state, SharkTransaction trans) throws EventAuditException {
    if (state == null) {
        return false;
    }
    return true;
}
]]></source>
<source file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="132" endline="134"><![CDATA[
public void delete (AssignmentEventAuditPersistenceInterface assignmentEventAuditPersistenceInterface, SharkTransaction trans) throws EventAuditException {
}
]]></source>
<source file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="136" endline="138"><![CDATA[
public void delete (CreateProcessEventAuditPersistenceInterface createProcessEventAuditPersistenceInterface, SharkTransaction trans) throws EventAuditException {
}
]]></source>
<source file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="140" endline="142"><![CDATA[
public void delete (DataEventAuditPersistenceInterface dataEventAuditPersistenceInterface, SharkTransaction trans) throws EventAuditException {
}
]]></source>
<source file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="144" endline="146"><![CDATA[
public void delete (StateEventAuditPersistenceInterface stateEventAuditPersistenceInterface, SharkTransaction trans) throws EventAuditException {
}
]]></source>
<source file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="149" endline="156"><![CDATA[
public List restoreProcessHistory (String processId, SharkTransaction trans) throws EventAuditException {
    List processHistory = new ArrayList ();
    processHistory.addAll (getCreateProcessEvents (processId));
    processHistory.addAll (getProcessDataEvents (processId));
    processHistory.addAll (getProcessStateEvents (processId));
    if (Debug.verboseOn ()) Debug.log (":: restoreProcessHistory :: " + processHistory.size (), module);

    return processHistory;
}
]]></source>
<source file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="158" endline="166"><![CDATA[
public List restoreActivityHistory (String processId, String activityId, SharkTransaction trans) throws EventAuditException {
    if (Debug.verboseOn ()) Debug.log (":: restoreActivityHistory ::", module);

    List activityHistory = new ArrayList ();
    activityHistory.addAll (getAssignmentEvents (processId, activityId));
    activityHistory.addAll (getActivityDataEvents (processId, activityId));
    activityHistory.addAll (getActivityStateEvents (processId, activityId));
    if (Debug.verboseOn ()) Debug.log (":: restoreActivityHistory :: " + activityHistory.size (), module);

    return activityHistory;
}
]]></source>
<source file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="169" endline="190"><![CDATA[
private List getCreateProcessEvents (String processId) throws EventAuditException {
    if (Debug.verboseOn ()) Debug.log (":: getCreateProcessEvents ::", module);

    Delegator delegator = SharkContainer.getDelegator ();
    List createProcessEvents = new ArrayList ();
    List lookupList = null;
    try {
        lookupList = delegator.findByAnd (org.ofbiz.shark.SharkConstants.WfEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.auditType, "processCreated", org.ofbiz.shark.SharkConstants.processId, processId));
    } catch (GenericEntityException e) {
        Debug.logError (e, module);
        throw new EventAuditException (e);
    }
    if (UtilValidate.isNotEmpty (lookupList)) {
        Iterator i = lookupList.iterator ();
        while (i.hasNext ()) {
            GenericValue v = (GenericValue) i.next ();
            if (v != null) {
                createProcessEvents.add (new CreateProcessEventAudit (this, delegator, v.getString (org.ofbiz.shark.SharkConstants.eventAuditId)));
            }
        }
    }
    return createProcessEvents;
}
]]></source>
<source file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="192" endline="213"><![CDATA[
private List getProcessStateEvents (String processId) throws EventAuditException {
    if (Debug.verboseOn ()) Debug.log (":: getProcessStateEvents ::", module);

    Delegator delegator = SharkContainer.getDelegator ();
    List stateEvents = new ArrayList ();
    List lookupList = null;
    try {
        lookupList = delegator.findByAnd (org.ofbiz.shark.SharkConstants.WfEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.auditType, "processStateChanged", org.ofbiz.shark.SharkConstants.processId, processId));
    } catch (GenericEntityException e) {
        Debug.logError (e, module);
        throw new EventAuditException (e);
    }
    if (UtilValidate.isNotEmpty (lookupList)) {
        Iterator i = lookupList.iterator ();
        while (i.hasNext ()) {
            GenericValue v = (GenericValue) i.next ();
            if (v != null) {
                stateEvents.add (new StateEventAudit (this, delegator, v.getString (org.ofbiz.shark.SharkConstants.eventAuditId)));
            }
        }
    }
    return stateEvents;
}
]]></source>
<source file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="215" endline="236"><![CDATA[
private List getProcessDataEvents (String processId) throws EventAuditException {
    if (Debug.verboseOn ()) Debug.log (":: getProcessDataEvents ::", module);

    Delegator delegator = SharkContainer.getDelegator ();
    List dataEvents = new ArrayList ();
    List lookupList = null;
    try {
        lookupList = delegator.findByAnd (org.ofbiz.shark.SharkConstants.WfEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.auditType, "processContextChanged", org.ofbiz.shark.SharkConstants.processId, processId));
    } catch (GenericEntityException e) {
        Debug.logError (e, module);
        throw new EventAuditException (e);
    }
    if (UtilValidate.isNotEmpty (lookupList)) {
        Iterator i = lookupList.iterator ();
        while (i.hasNext ()) {
            GenericValue v = (GenericValue) i.next ();
            if (v != null) {
                dataEvents.add (new DataEventAudit (this, delegator, v.getString (org.ofbiz.shark.SharkConstants.eventAuditId)));
            }
        }
    }
    return dataEvents;
}
]]></source>
<source file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="239" endline="260"><![CDATA[
private List getAssignmentEvents (String processId, String activityId) throws EventAuditException {
    if (Debug.verboseOn ()) Debug.log (":: getAssignmentEvents ::", module);

    Delegator delegator = SharkContainer.getDelegator ();
    List assignmentEvents = new ArrayList ();
    List lookupList = null;
    try {
        lookupList = delegator.findByAnd (org.ofbiz.shark.SharkConstants.WfEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.auditType, "activityAssignmentChanged", org.ofbiz.shark.SharkConstants.processId, processId, org.ofbiz.shark.SharkConstants.activityId, activityId));
    } catch (GenericEntityException e) {
        Debug.logError (e, module);
        throw new EventAuditException (e);
    }
    if (UtilValidate.isNotEmpty (lookupList)) {
        Iterator i = lookupList.iterator ();
        while (i.hasNext ()) {
            GenericValue v = (GenericValue) i.next ();
            if (v != null) {
                assignmentEvents.add (new AssignmentEventAudit (this, delegator, v.getString (org.ofbiz.shark.SharkConstants.eventAuditId)));
            }
        }
    }
    return assignmentEvents;
}
]]></source>
<source file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="262" endline="283"><![CDATA[
private List getActivityStateEvents (String processId, String activityId) throws EventAuditException {
    if (Debug.verboseOn ()) Debug.log (":: getActivityStateEvents ::", module);

    Delegator delegator = SharkContainer.getDelegator ();
    List stateEvents = new ArrayList ();
    List lookupList = null;
    try {
        lookupList = delegator.findByAnd (org.ofbiz.shark.SharkConstants.WfEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.auditType, "activityStateChanged", org.ofbiz.shark.SharkConstants.processId, processId, org.ofbiz.shark.SharkConstants.activityId, activityId));
    } catch (GenericEntityException e) {
        Debug.logError (e, module);
        throw new EventAuditException (e);
    }
    if (UtilValidate.isNotEmpty (lookupList)) {
        Iterator i = lookupList.iterator ();
        while (i.hasNext ()) {
            GenericValue v = (GenericValue) i.next ();
            if (v != null) {
                stateEvents.add (new StateEventAudit (this, delegator, v.getString (org.ofbiz.shark.SharkConstants.eventAuditId)));
            }
        }
    }
    return stateEvents;
}
]]></source>
<source file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="285" endline="306"><![CDATA[
private List getActivityDataEvents (String processId, String activityId) throws EventAuditException {
    if (Debug.verboseOn ()) Debug.log (":: getActivityDataEvents ::", module);

    Delegator delegator = SharkContainer.getDelegator ();
    List dataEvents = new ArrayList ();
    List lookupList = null;
    try {
        lookupList = delegator.findByAnd (org.ofbiz.shark.SharkConstants.WfEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.auditType, "activityContextChanged", org.ofbiz.shark.SharkConstants.processId, processId, org.ofbiz.shark.SharkConstants.activityId, activityId));
    } catch (GenericEntityException e) {
        Debug.logError (e, module);
        throw new EventAuditException (e);
    }
    if (UtilValidate.isNotEmpty (lookupList)) {
        Iterator i = lookupList.iterator ();
        while (i.hasNext ()) {
            GenericValue v = (GenericValue) i.next ();
            if (v != null) {
                dataEvents.add (new DataEventAudit (this, delegator, v.getString (org.ofbiz.shark.SharkConstants.eventAuditId)));
            }
        }
    }
    return dataEvents;
}
]]></source>
<source file="../../Dataset/small/1.12-EntityAuditMgr.java" startline="308" endline="311"><![CDATA[
public synchronized String getNextId (String string) throws EventAuditException {
    Delegator delegator = SharkContainer.getDelegator ();
    return delegator.getNextSeqId ("SharkAuditSeq").toString ();
}
]]></source>
<source file="../../Dataset/small/1.12-EventAudit.java" startline="40" endline="52"><![CDATA[
public EventAudit (EntityAuditMgr mgr, Delegator delegator, String eventAuditId) {
    super (mgr, delegator);
    this.eventAuditId = eventAuditId;
    if (this.delegator != null) {
        try {
            this.eventAudit = delegator.findByPrimaryKey (org.ofbiz.shark.SharkConstants.WfEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.eventAuditId, eventAuditId));
        } catch (GenericEntityException e) {
            Debug.logError (e, module);
        }
    } else {
        Debug.logError ("Invalid delegator object passed", module);
    }
}
]]></source>
<source file="../../Dataset/small/1.12-EventAudit.java" startline="54" endline="59"><![CDATA[
public EventAudit (EntityAuditMgr mgr, Delegator delegator) {
    super (mgr, delegator);
    this.newValue = true;
    this.eventAuditId = delegator.getNextSeqId (org.ofbiz.shark.SharkConstants.WfEventAudit);
    this.eventAudit = delegator.makeValue (org.ofbiz.shark.SharkConstants.WfEventAudit, UtilMisc.toMap (org.ofbiz.shark.SharkConstants.eventAuditId, eventAuditId));
}
]]></source>
<source file="../../Dataset/small/1.12-EventAudit.java" startline="61" endline="65"><![CDATA[
public EventAudit (EntityAuditMgr mgr, GenericValue eventAudit) {
    super (mgr, eventAudit.getDelegator ());
    this.eventAuditId = eventAudit.getString (org.ofbiz.shark.SharkConstants.eventAuditId);
    this.eventAudit = eventAudit;
}
]]></source>
<source file="../../Dataset/small/1.12-EventAudit.java" startline="67" endline="69"><![CDATA[
public String getEventAuditId () {
    return eventAudit.getString (org.ofbiz.shark.SharkConstants.eventAuditId);
}
]]></source>
<source file="../../Dataset/small/1.12-EventAudit.java" startline="71" endline="73"><![CDATA[
public void setUTCTime (String ts) {
    eventAudit.set (org.ofbiz.shark.SharkConstants.auditTime, ts);
}
]]></source>
<source file="../../Dataset/small/1.12-EventAudit.java" startline="75" endline="77"><![CDATA[
public String getUTCTime () {
    return eventAudit.getString (org.ofbiz.shark.SharkConstants.auditTime);
}
]]></source>
<source file="../../Dataset/small/1.12-EventAudit.java" startline="79" endline="81"><![CDATA[
public void setType (String t) {
    eventAudit.set (org.ofbiz.shark.SharkConstants.auditType, t);
}
]]></source>
<source file="../../Dataset/small/1.12-EventAudit.java" startline="83" endline="85"><![CDATA[
public String getType () {
    return eventAudit.getString (org.ofbiz.shark.SharkConstants.auditType);
}
]]></source>
<source file="../../Dataset/small/1.12-EventAudit.java" startline="87" endline="89"><![CDATA[
public void setActivityId (String aId) {
    eventAudit.set (org.ofbiz.shark.SharkConstants.activityId, aId);
}
]]></source>
<source file="../../Dataset/small/1.12-EventAudit.java" startline="91" endline="93"><![CDATA[
public String getActivityId () {
    return eventAudit.getString (org.ofbiz.shark.SharkConstants.activityId);
}
]]></source>
<source file="../../Dataset/small/1.12-EventAudit.java" startline="95" endline="97"><![CDATA[
public void setActivityName (String an) {
    eventAudit.set (org.ofbiz.shark.SharkConstants.activityName, an);
}
]]></source>
<source file="../../Dataset/small/1.12-EventAudit.java" startline="99" endline="101"><![CDATA[
public String getActivityName () {
    return eventAudit.getString (org.ofbiz.shark.SharkConstants.activityName);
}
]]></source>
<source file="../../Dataset/small/1.12-EventAudit.java" startline="103" endline="105"><![CDATA[
public void setProcessId (String pId) {
    eventAudit.set (org.ofbiz.shark.SharkConstants.processId, pId);
}
]]></source>
<source file="../../Dataset/small/1.12-EventAudit.java" startline="107" endline="109"><![CDATA[
public String getProcessId () {
    return eventAudit.getString (org.ofbiz.shark.SharkConstants.processId);
}
]]></source>
<source file="../../Dataset/small/1.12-EventAudit.java" startline="111" endline="113"><![CDATA[
public void setProcessName (String pn) {
    eventAudit.set (org.ofbiz.shark.SharkConstants.processName, pn);
}
]]></source>
<source file="../../Dataset/small/1.12-EventAudit.java" startline="115" endline="117"><![CDATA[
public String getProcessName () {
    return eventAudit.getString (org.ofbiz.shark.SharkConstants.processName);
}
]]></source>
<source file="../../Dataset/small/1.12-EventAudit.java" startline="119" endline="121"><![CDATA[
public void setProcessDefinitionName (String pdn) {
    eventAudit.set (org.ofbiz.shark.SharkConstants.processDefName, pdn);
}
]]></source>
<source file="../../Dataset/small/1.12-EventAudit.java" startline="123" endline="125"><![CDATA[
public String getProcessDefinitionName () {
    return eventAudit.getString (org.ofbiz.shark.SharkConstants.processDefName);
}
]]></source>
<source file="../../Dataset/small/1.12-EventAudit.java" startline="127" endline="129"><![CDATA[
public void setProcessDefinitionVersion (String pdv) {
    eventAudit.set (org.ofbiz.shark.SharkConstants.processDefVer, pdv);
}
]]></source>
<source file="../../Dataset/small/1.12-EventAudit.java" startline="131" endline="133"><![CDATA[
public String getProcessDefinitionVersion () {
    return eventAudit.getString (org.ofbiz.shark.SharkConstants.processDefVer);
}
]]></source>
<source file="../../Dataset/small/1.12-EventAudit.java" startline="135" endline="137"><![CDATA[
public void setActivityDefinitionId (String adId) {
    eventAudit.set (org.ofbiz.shark.SharkConstants.activityDefId, adId);
}
]]></source>
<source file="../../Dataset/small/1.12-EventAudit.java" startline="139" endline="141"><![CDATA[
public String getActivityDefinitionId () {
    return eventAudit.getString (org.ofbiz.shark.SharkConstants.activityDefId);
}
]]></source>
<source file="../../Dataset/small/1.12-EventAudit.java" startline="143" endline="145"><![CDATA[
public void setActivitySetDefinitionId (String adId) {
    eventAudit.set (org.ofbiz.shark.SharkConstants.activitySetDefId, adId);
}
]]></source>
<source file="../../Dataset/small/1.12-EventAudit.java" startline="147" endline="150"><![CDATA[
public String getActivitySetDefinitionId () {
    return eventAudit.getString (org.ofbiz.shark.SharkConstants.activitySetDefId);
}
]]></source>
<source file="../../Dataset/small/1.12-EventAudit.java" startline="152" endline="154"><![CDATA[
public void setProcessDefinitionId (String pdId) {
    eventAudit.set (org.ofbiz.shark.SharkConstants.processDefId, pdId);
}
]]></source>
<source file="../../Dataset/small/1.12-EventAudit.java" startline="156" endline="158"><![CDATA[
public String getProcessDefinitionId () {
    return eventAudit.getString (org.ofbiz.shark.SharkConstants.processDefId);
}
]]></source>
<source file="../../Dataset/small/1.12-EventAudit.java" startline="160" endline="162"><![CDATA[
public void setPackageId (String pkgId) {
    eventAudit.set (org.ofbiz.shark.SharkConstants.packageId, pkgId);
}
]]></source>
<source file="../../Dataset/small/1.12-EventAudit.java" startline="164" endline="166"><![CDATA[
public String getPackageId () {
    return eventAudit.getString (org.ofbiz.shark.SharkConstants.packageId);
}
]]></source>
<source file="../../Dataset/small/1.12-EventAudit.java" startline="168" endline="175"><![CDATA[
public void store () throws GenericEntityException {
    if (newValue) {
        newValue = false;
        delegator.createOrStore (eventAudit);
    } else {
        delegator.store (eventAudit);
    }
}
]]></source>
<source file="../../Dataset/small/1.12-EventAudit.java" startline="177" endline="181"><![CDATA[
public void reload () throws GenericEntityException {
    if (! newValue) {
        eventAudit.refresh ();
    }
}
]]></source>
<source file="../../Dataset/small/1.12-EventAudit.java" startline="183" endline="187"><![CDATA[
public void remove () throws GenericEntityException {
    if (! newValue) {
        delegator.removeValue (eventAudit);
    }
}
]]></source>
</source_elements>
</project>
