
\documentclass[conference]{IEEEtran}


%\usepackage{multirow}
%\usepackage{rotating}
%\usepackage{array}
\usepackage{color}
%\usepackage{verbatim}
%\usepackage{subfigure}
%\usepackage{bigstrut}
%\usepackage{amsmath}
%\usepackage{color}
%\usepackage{comment}



\usepackage{cite}
%\usepackage{graphicx}
\usepackage{listings}
%\usepackage{pxfonts}
%\usepackage{times}
%\usepackage{xspace}
%\usepackage{booktabs}
%\usepackage{fancybox}
%\usepackage{color}
%\usepackage{multirow}
%\usepackage{array}
%\usepackage{tabularx}
%\usepackage{url}
%\urlstyle{same}
%\usepackage{xcolor}
%\usepackage{pgfplots}
%\usepackage{tikz}
%\usepackage{caption}
%\usetikzlibrary{shapes,arrows, positioning}
%\usetikzlibrary{patterns}
%\usepackage[numbers]{natbib} % Used to fix formatting issue.
%\usepackage{soul} % Needed for wrapping of highlighted text
%\usepackage{balance} % Used to balance out the columns



\usepackage{cite}
\usepackage{color}
%\usepackage{courier}
\usepackage{listings}
\usepackage{url}
%\usepackage{balance} % Add this back in. Probably needed during camera ready.
%\usepackage{listings} % Not sure this does anything here
\usepackage{tikz} % Need for all tikz material
\usetikzlibrary{shapes,arrows, positioning} %  Need for all tikz material
%\usepackage{balance}

\usepackage{times} % Used for formatting formatting url footnotes
\urlstyle{same} % Used for formatting formatting url footnotes
%\usepackage{caption} % Used for formatting formatting url footnotes
%\usepackage{graphicx}
%\usepackage{subcaption}


\newcommand{\mehdi}[1]{\textcolor{red}{{\it [Mehdi says: #1]}}}
\newcommand{\dan}[1]{\textcolor{blue}{{\it [Dan says: #1]}}}


\lstset{ %
language=java,                % choose the language of the code
%xleftmargin=100pt,xrightmargin=100pt
basicstyle=\footnotesize,       % the size of the fonts that are used for the code
%numbers=left,                   % where to put the line-numbers
numberstyle=\footnotesize,      % the size of the fonts that are used for the line-numbers
stepnumber=1,                   % the step between two line-numbers. If it is 1 each line will be numbered
numbersep=3pt,                  % how far the line-numbers are from the code
backgroundcolor=\color{white},  % choose the background color. You must add \usepackage{color}
showspaces=false,               % show spaces adding particular underscores
showstringspaces=false,         % underline spaces within strings
showtabs=false,                 % show tabs within strings adding particular underscores
frame=none,           % adds a frame around the code
tabsize=2,          % sets default tabsize to 2 spaces
captionpos=t,           % sets the caption-position to bottom
%captionpos=b,           % sets the caption-position to bottom
breaklines=true,        % sets automatic line breaking
breakatwhitespace=false,    % sets if automatic breaks should only happen at whitespace
escapeinside={\%*}{*)}          % if you want to add a comment within your code
}

\setlength{\abovecaptionskip}{6pt plus 3pt minus 2pt} % Space over captions
%\setlength{\belowcaptionskip}{6pt plus 3pt minus 2pt} % Space under captions



\lstdefinestyle{ConcolicOutput}{
   % language={SQL},basicstyle=\ttfamily,
    moredelim=**[is][\btHL]{`}{`},
   % moredelim=**[is][{\btHL[fill=green!30,draw=red,dashed,thin]}]{@}{@},
}



\begin{document}
%
% paper title
% can use linebreaks \\ within to get better formatting as desired
\title{Architectural Clones: A Step Toward Recommending Tactical Codes}

\author{\IEEEauthorblockN{Mehdi Mirakhorli and Daniel E. Krutz, }
\IEEEauthorblockA{
Rochester Institute of Technology,
Rochester, NY, USA\\
\{mxmvse,dxkvse\}@rit.edu}
}




% use for special paper notices
%\IEEEspecialpapernotice{(Invited Paper)}




% make the title area
\maketitle


\begin{abstract}
%\boldmath

Architectural tactics are building blocks of software architecture. They describe solutions for addressing specific quality concerns, and are prevalent across many software systems. Once a decision is made to utilize a tactic, the developer must generate a concrete plan for implementing the tactic in the code. Unfortunately, this a non-trivial task for many inexperienced developers. Developers often use code search engines, crowd-sourcing websites, or discussion forums to find sample code snippets. A robust tactic recommender system can replace this manual internet based search process and assist developers to reuse successful architectural knowledge, as well as implementation of tactics and patterns  from a wide range of open source systems. In this paper we study several implementations of architectural choices in the open source community and identify the foundation of building a practical tactic recommender system. As a result of this study we introduce the concept of~\emph{tactical-clones} and use that as a basic element to develop our recommender system. While this NIER paper does not present the details of our recommender engine instead it proposes the notion which we will base our architecture recommender system upon.

\end{abstract}
% IEEEtran.cls defaults to using nonbold math in the Abstract.
% This preserves the distinction between vectors and scalars. However,
% if the conference you are submitting to favors bold math in the abstract,
% then you can use LaTeX's standard command \boldmath at the very start
% of the abstract to achieve this. Many IEEE journals/conferences frown on
% math in the abstract anyway.

% no keywords




% For peer review papers, you can put extra information on the cover
% page as needed:
% \ifCLASSOPTIONpeerreview
% \begin{center} \bfseries EDICS Category: 3-BBND \end{center}
% \fi
%
% For peerreview papers, this IEEEtran command inserts a page break and
% creates the second title. It will be ignored for other modes.
\IEEEpeerreviewmaketitle



\section{Introduction}
The success of any complex software-intensive system is dependent on how that system addresses stakeholders' quality attribute concerns such as security, usability, availability, interoperability, performance, etc. Designing a system to satisfy such concerns involves devising and comparing alternate solutions, understanding their trade-offs, and ultimately making a series of design choices. These architectural decisions typically begin with design primitives such as architectural tactics and patterns.

Tactics are the building blocks of architectural design \cite{bass:arch12}, reflecting the fundamental choices that an architect makes to address a  quality attribute concern. Because they are building blocks, tactics are composed together to form patterns. Architectural tactics come in many different shapes and sizes and describe solutions for a wide range of quality concerns.  They are particularly prevalent across high-performance and/or fault tolerant software systems.  For example, reliability tactics such as \emph{redundancy with voting}, \emph{heartbeat}, and \emph{check pointing} provide solutions for fault mitigation, detection, and recovery; while performance tactics such as \emph{resource pooling} and \emph{scheduling} help optimize response time and latency .

The importance of implementing architectural tactics rigorously and robustly was highlighted by a small study we conducted as a precursor to this work.  We investigated tactic implementations in Hadoop  and OFBiz and evaluated their degree of stability during the maintenance process.  For each of these projects we retrieved a list of bug fixes from the change logs (Nov. 2008 - Nov. 2011 for Hadoop, and Jan. 2009 - Nov. 2011 for OFBiz). Our analysis showed that tactics-related classes incurred 2.8 times as many bugs in Hadoop, and 2.0 times as many bugs in OFBiz as non-tactics related classes. In another preliminary work, we studied the implementation of security tactics in Chromium Browser and we observed that 10\% of tactic implementations resulted in reported  vulnerabilities. These observations suggest that tactic implementations, if not developed correctly, are likely to contribute towards the well-documented problem of architectural degradation \cite{Erosion}. Less experienced developers sometimes find this challenging, primarily because of the variability points that exist in a tactic, and the numerous design decisions that need to be made in order to implement a tactic in a robust and effective way. We found many examples of such questions on coding forums.

A robust tactic recommender system that shares sample code snippets from successful implementation of tactics in open source community can provide valuable support for the developers. However obtaining a practical tactic recommender system is non-trivial. This paper discusses the foundation of such a recommender system. Although there have been some initial development of source code recommender systems~\cite{DBLP:conf/icse/McMillanHPCM12,6340250}, the primary focus of such works are on generic codes and not tactical codes. Therefore the challenges of obtaining and recommending architecturally significant code is still unexplored.
Prior to proposing more specific guidelines for developing an architecture recommender system, we conducted an extensive study of architectural decisions in performance centric and dependable complex system. This study provided the foundation and motivation for the introduction of the concept of ``Tactical Clones''. We investigate this notion in several open source systems and use then as key elements in developing our recommender system.

\input{SeenUnseen}
\input{Study}




% conference papers do not normally have an appendix


\bibliographystyle{IEEEtran}



%\balance
\bibliography{neir_2015}





% that's all folks
\end{document}


